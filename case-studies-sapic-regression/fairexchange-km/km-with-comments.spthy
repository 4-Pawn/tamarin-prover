theory KMNonRepudiation
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The  Kremer-Markowitch non-repudiation protocol *}

builtins: hashing

functions: pk/1, sk/1[private], sign/2, verify/2, extrmsg/1, true/0, aenc/2, adec/2, senc/2, sdec/2

equations: verify(sign(m, sk(i)), pk(i))=true,extrmsg(sign(m, x))=m,adec(aenc(m, pk(i)), sk(i))=m,sdec(senc(m, k), k)=m

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: // [process=top-level] Par 
 [State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [!Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTP_TTP__11: // [process=top-level] in 'c',<$A, $B, <'TTP', $TTP>> 
 [Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, <'TTP', $TTP>>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, <'TTP', $TTP>>>)]-> [State_111($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_111: // [process=top-level] Par 
 [State_111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_1111($A, $B, $TTP, ~prog_, ~prog_111), State_1112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_1111: // [process=top-level] Par 
 [State_1111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_11111($A, $B, $TTP, ~prog_, ~prog_111), State_11112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_11111: // [process=top-level] Par 
 [State_11111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_111111($A, $B, $TTP, ~prog_, ~prog_111), State_111112($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_t_111111 [color=#569DC0]: // [process=A] in 'c',t 
 [State_111111($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', t>)] --[ProgressTo_1111111(~prog_111), ChannelInEvent(<'c', t>)]-> [State_1111111($A, $B, $TTP, ~prog_, ~prog_111, t)]

rule new_k_1111111 [color=#569DC0]: // [process=A] new k 
 [Fr(~prog_11111111), State_1111111($A, $B, $TTP, ~prog_, ~prog_111, t), Fr(k)] --[ProgressFrom_11111111(~prog_11111111)]-> [State_11111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)]

rule event_StartA_A_k_11111111 [color=#569DC0]: // [process=A] event StartA($A, k) 
 [State_11111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)] --[Event(), StartA($A, k)]-> [State_111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)]

rule out_c_senct_k_aenck_pk_TTP_TTP__sign_EOO_B_TTP_TTP_h_t_k__hsenct_k_sk_A_sign_SUB_B_h_t_k__aenck_pk_TTP_TTP__sk_A__111111111 [color=#569DC0]: // [process=A] out 'c',<senc(t, k), aenc(k, pk(<'TTP', $TTP>)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, k>), h(senc(t, k))>, sk($A)), sign(<'SUB', $B, h(<t, k>), aenc(k, pk(<'TTP', $TTP>))>, sk($A))> 
 [State_111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t), In('c')] --[ChannelInEvent('c')]-> [State_1111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t), Out(<senc(t, k), aenc(k, pk(<'TTP', $TTP>)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, k>), h(senc(t, k))>, sk($A)), sign(<'SUB', $B, h(<t, k>), aenc(k, pk(<'TTP', $TTP>))>, sk($A))>)]

rule in_c_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B_11111111111 [color=#569DC0]: // [process=A] in 'c',sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B)) 
 [State_1111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t), In(<'c', sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>)] --[ChannelInEvent(<'c', sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>)]-> [State_111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)]

rule out_c_sign_EOOk_B_h_t_k__k_sk_A_111111111111 [color=#569DC0]: // [process=A] out 'c',sign(<'EOOk', $B, h(<t, k>), k>, sk($A)) 
 [Fr(~prog_1111111111111), State_111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t), In('c')] --[ProgressFrom_1111111111111(~prog_1111111111111), ChannelInEvent('c')]-> [State_1111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_1111111111111, k, t), Out(sign(<'EOOk', $B, h(<t, k>), k>, sk($A)))]

rule event_ContractA_A_B_t_k_1111111111111 [color=#569DC0]: // [process=A] event ContractA($A, $B, t, k) 
 [State_1111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_1111111111111, k, t)] --[Event(), ContractA($A, $B, t, k)]-> [State_11111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_1111111111111, k, t)]

rule Zero_11111111111111 [color=#569DC0]: // [process=A] Zero 
 [State_11111111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_1111111111111, k, t)] --[ProgressTo_111111111111111(~prog_1111111111111)]-> []

rule in_r_originator_A_TTP_TTP_CONk_A_B_h_t_k__k_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B__11111111112 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, k>), k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>> 
 [State_1111111111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t), In(<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, k>), k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>>), MID_Receiver(mid_11111111112)] --[Receive(mid_11111111112,<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, k>), k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>>)]-> [State_111111111121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)]

rule event_ContractA_A_B_t_k_111111111121 [color=#569DC0]: // [process=A] event ContractA($A, $B, t, k) 
 [State_111111111121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)] --[Event(), ContractA($A, $B, t, k)]-> [State_1111111111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)]

rule Zero_1111111111211 [color=#569DC0]: // [process=A] Zero 
 [State_1111111111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111111, k, t)] --[]-> []

rule in_c_senct_k_aenck_pk_TTP_TTP__sign_EOO_B_TTP_TTP_h_t_k__hsenct_k_sk_A_sign_SUB_B_h_t_k__aenck_pk_TTP_TTP__sk_A__111112 [color=#2CD719]: // [process=B] in 'c',<senc(t, ~k), aenc(~k, pk(<'TTP', $TTP>)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A))> 
 [State_111112($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <senc(t, ~k), aenc(~k, pk(<'TTP', $TTP>)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A))>>)] --[ProgressTo_1111121(~prog_111), ChannelInEvent(<'c', <senc(t, ~k), aenc(~k, pk(<'TTP', $TTP>)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A))>>)]-> [State_1111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, t)]

rule new_session_1111121 [color=#2CD719]: // [process=B] new session 
 [Fr(~prog_11111211), State_1111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, t), Fr(session)] --[ProgressFrom_11111211(~prog_11111211)]-> [State_11111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule event_StartB_B_session_11111211 [color=#2CD719]: // [process=B] event StartB($B, session) 
 [State_11111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[Event(), StartB($B, session)]-> [State_111112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule out_c_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B_111112111 [color=#2CD719]: // [process=B] out 'c',sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)) 
 [State_111112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t), In('c')] --[ChannelInEvent('c')]-> [State_1111121111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t), Out(sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)))]

rule in_c_sign_EOOk_B_h_t_k__k_sk_A_11111211111 [color=#2CD719]: // [process=B] in 'c',sign(<'EOOk', $B, h(<t, ~k>), ~k>, sk($A)) 
 [State_1111121111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t), In(<'c', sign(<'EOOk', $B, h(<t, ~k>), ~k>, sk($A))>)] --[ChannelInEvent(<'c', sign(<'EOOk', $B, h(<t, ~k>), ~k>, sk($A))>)]-> [State_111112111111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule event_ContractB_A_B_t_session_111112111111 [color=#2CD719]: // [process=B] event ContractB($A, $B, t, session) 
 [State_111112111111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[Event(), ContractB($A, $B, t, session)]-> [State_1111121111111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule Zero_1111121111111 [color=#2CD719]: // [process=B] Zero 
 [State_1111121111111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[ProgressTo_11111211111111(~prog_11111211)]-> []

rule out_r_responder_B_TTP_TTP_sign_REC_A_h_t_k__sk_B_sign_SUB_B_h_t_k__aenck_pk_TTP_TTP__sk_A_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B_sign_EOO_B_TTP_TTP_h_t_k__hsenct_k_sk_A__11111211112 [color=#2CD719]: // [process=B] out 'r',<'responder', $B, <'TTP', $TTP>, <sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>> 
 [MID_Sender(mid_11111211112), State_1111121111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[Send(mid_11111211112,<'responder', $B, <'TTP', $TTP>, <sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>>)]-> [Out(<'responder', $B, <'TTP', $TTP>, <sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>>), State_111112111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule in_r_responder_B_TTP_TTP_sign_CONk_A_B_h_t_k__k_sk_TTP_TTP___111112111121 [color=#2CD719]: // [process=B] in 'r',<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))> 
 [State_111112111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t), In(<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))>), MID_Receiver(mid_111112111121)] --[Receive(mid_111112111121,<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))>)]-> [State_1111121111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule event_ContractB_A_B_t_session_1111121111211 [color=#2CD719]: // [process=B] event ContractB($A, $B, t, session) 
 [State_1111121111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[Event(), ContractB($A, $B, t, session)]-> [State_11111211112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule event_ResolveContractB_A_B_t_session_11111211112111 [color=#2CD719]: // [process=B] event ResolveContractB($A, $B, t, session) 
 [State_11111211112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[Event(), ResolveContractB($A, $B, t, session)]-> [State_111112111121111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)]

rule Zero_111112111121111 [color=#2CD719]: // [process=B] Zero 
 [State_111112111121111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_11111211, session, t)] --[]-> []

rule in_r_responder_B_TTP_TTP_h_t_k__sign_REC_A_h_t_k__sk_B_sign_SUB_B_h_t_k__aenck_pk_TTP_TTP__sk_A_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B_sign_EOO_B_TTP_TTP_h_t_k__hsenct_k_sk_A__11112 [color=#11EC28]: // [process=TTP] in 'r',<'responder', $B, <'TTP', $TTP>, <h(<t, ~k>), sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>> 
 [State_11112($A, $B, $TTP, ~prog_, ~prog_111), In(<'responder', $B, <'TTP', $TTP>, <h(<t, ~k>), sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>>), MID_Receiver(mid_11112)] --[ProgressTo_111121(~prog_111), Receive(mid_11112,<'responder', $B, <'TTP', $TTP>, <h(<t, ~k>), sign(<'REC', $A, h(<t, ~k>)>, sk($B)), sign(<'SUB', $B, h(<t, ~k>), aenc(~k, pk(<'TTP', $TTP>))>, sk($A)), sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B)), sign(<'EOO', $B, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k))>, sk($A))>>)]-> [State_111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, t)]

rule out_r_originator_A_TTP_TTP_CONk_A_B_h_t_k__k_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B__111121 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, ~k>), ~k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B))>> 
 [Fr(~prog_1111211), MID_Sender(mid_111121), State_111121($A, $B, $TTP, ~k, ~prog_, ~prog_111, t)] --[ProgressFrom_1111211(~prog_1111211), Send(mid_111121,<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, ~k>), ~k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B))>>)]-> [Out(<'originator', $A, <'TTP', $TTP>, <'CONk', $A, $B, h(<t, ~k>), ~k, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, ~k>), h(senc(t, ~k)), aenc(~k, pk(<'TTP', $TTP>))>, sk($B))>>), State_1111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_1111211, t)]

rule out_r_responder_B_TTP_TTP_sign_CONk_A_B_h_t_k__k_sk_TTP_TTP___1111211 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))> 
 [MID_Sender(mid_1111211), State_1111211($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_1111211, t)] --[Send(mid_1111211,<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))>)]-> [Out(<'responder', $B, <'TTP', $TTP>, sign(<'CONk', $A, $B, h(<t, ~k>), ~k>, sk(<'TTP', $TTP>))>), State_11112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_1111211, t)]

rule Zero_11112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_11112111($A, $B, $TTP, ~k, ~prog_, ~prog_111, ~prog_1111211, t)] --[ProgressTo_111121111(~prog_1111211)]-> []

rule Par_1112 [color=#45D1E2]: // [process=Judge] Par 
 [State_1112($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_11121($A, $B, $TTP, ~prog_, ~prog_111), State_11122($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_11121 [color=#45D1E2]: // [process=Judge] Par 
 [State_11121($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_111212(~prog_111)]-> [State_111211($A, $B, $TTP, ~prog_, ~prog_111), State_111212($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_k_t_sign_EOR_A_TTP_TTP_h_t_k__hsenct_k_aenck_pk_TTP_TTP__sk_B__111211 [color=#45D1E2]: // [process=Judge] in 'c',<k, t, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))> 
 [State_111211($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <k, t, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>>)] --[ProgressTo_1112112(~prog_111), ProgressTo_1112111(~prog_111), ChannelInEvent(<'c', <k, t, sign(<'EOR', $A, <'TTP', $TTP>, h(<t, k>), h(senc(t, k)), aenc(k, pk(<'TTP', $TTP>))>, sk($B))>>)]-> [State_1112111($A, $B, $TTP, ~prog_, ~prog_111, k, t)]

rule event_ReceiptJudge_A_B_t_1112111 [color=#45D1E2]: // [process=Judge] event ReceiptJudge($A, $B, t) 
 [Fr(~prog_11121111), State_1112111($A, $B, $TTP, ~prog_, ~prog_111, k, t)] --[ProgressFrom_11121111(~prog_11121111), Event(), ReceiptJudge($A, $B, t)]-> [State_11121111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11121111, k, t)]

rule Zero_11121111 [color=#45D1E2]: // [process=Judge] Zero 
 [State_11121111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11121111, k, t)] --[ProgressTo_111211111(~prog_11121111)]-> []

rule in_c_k_t_sign_EOO_B_TTP_TTP_h_t_k__hsenct_k_sk_A_sign_EOOk_B_h_t_k__k_sk_A__111212 [color=#45D1E2]: // [process=Judge] in 'c',<k, t, sign(<'EOO', $B, <'TTP', $TTP>, h(<t, k>), h(senc(t, k))>, sk($A)), sign(<'EOOk', $B, h(<t, k>), k>, sk($A))> 
 [Fr(~prog_1112121), State_111212($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <k, t, sign(<'EOO', $B, <'TTP', $TTP>, h(<t, k>), h(senc(t, k))>, sk($A)), sign(<'EOOk', $B, h(<t, k>), k>, sk($A))>>)] --[ProgressFrom_1112121(~prog_1112121), ChannelInEvent(<'c', <k, t, sign(<'EOO', $B, <'TTP', $TTP>, h(<t, k>), h(senc(t, k))>, sk($A)), sign(<'EOOk', $B, h(<t, k>), k>, sk($A))>>)]-> [State_1112121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, k, t)]

rule event_OriginJudge_A_B_t_1112121 [color=#45D1E2]: // [process=Judge] event OriginJudge($A, $B, t) 
 [State_1112121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, k, t)] --[ProgressTo_11121211(~prog_1112121), Event(), OriginJudge($A, $B, t)]-> [State_11121211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, k, t)]

rule Zero_11121211 [color=#45D1E2]: // [process=Judge] Zero 
 [State_11121211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, k, t)] --[]-> []

rule in_c_k_t_sign_CONk_A_B_h_t_k__k_sk_TTP_TTP___11122 [color=#45D1E2]: // [process=Judge] in 'c',<k, t, sign(<'CONk', $A, $B, h(<t, k>), k>, sk(<'TTP', $TTP>))> 
 [State_11122($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <k, t, sign(<'CONk', $A, $B, h(<t, k>), k>, sk(<'TTP', $TTP>))>>)] --[ChannelInEvent(<'c', <k, t, sign(<'CONk', $A, $B, h(<t, k>), k>, sk(<'TTP', $TTP>))>>)]-> [State_111221($A, $B, $TTP, ~prog_, ~prog_111, k, t)]

rule event_OriginJudge_A_B_t_111221 [color=#45D1E2]: // [process=Judge] event OriginJudge($A, $B, t) 
 [State_111221($A, $B, $TTP, ~prog_, ~prog_111, k, t)] --[Event(), OriginJudge($A, $B, t)]-> [State_1112211($A, $B, $TTP, ~prog_, ~prog_111, k, t)]

rule Zero_1112211 [color=#45D1E2]: // [process=Judge] Zero 
 [State_1112211($A, $B, $TTP, ~prog_, ~prog_111, k, t)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [!Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: // [process=top-level] in 'c',<'corrupt', $x> 
 [Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: // [process=top-level] event Corrupt($x) 
 [State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: // [process=top-level] out 'c',sk($x) 
 [State_2111($x, ~prog_, ~prog_211), In('c')] --[ProgressTo_21111(~prog_211), ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Rep_0_21111: // [process=top-level] Rep, 0 
 [State_21111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111($x, ~prog_, ~prog_211)]

rule Rep_1_21111: // [process=top-level] Rep, 1 
 [!Semistate_211111($x, ~prog_, ~prog_211)] --[]-> [State_211111($x, ~prog_, ~prog_211)]

rule in_r_p_x_m__211111: // [process=top-level] in 'r',<p, $x, m> 
 [State_211111($x, ~prog_, ~prog_211), In(<p, $x, m>), MID_Receiver(mid_211111)] --[Receive(mid_211111,<p, $x, m>)]-> [State_2111111($x, ~prog_, ~prog_211, m, p)]

rule Zero_2111111: // [process=top-level] Zero 
 [State_2111111($x, ~prog_, ~prog_211, m, p)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_1112121_to_11121211:
    "All p #t1. ProgressFrom_1112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11121211(p )@t2)
    "

restriction progress_11121121_to_111211211:
    "All p #t1. ProgressFrom_11121121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111211211(p )@t2)
    "

restriction progress_1111111111121_to_11111111111211:
    "All p #t1. ProgressFrom_1111111111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111211(p )@t2)
    "

restriction progress_11111211111211_to_1111121111121111:
    "All p #t1. ProgressFrom_11111211111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111121111(p )@t2)
    "

restriction progress_11111211_to_11111211111111_or_1111121111121:
    "All p #t1. ProgressFrom_11111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111211111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111121111121(p )@t2)
    "

restriction progress_1111211_to_111121111:
    "All p #t1. ProgressFrom_1111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121111(p )@t2)
    "

restriction progress_211_to_21111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111(p )@t2)
    "

restriction progress_11121111_to_111211111:
    "All p #t1. ProgressFrom_11121111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111211111(p )@t2)
    "

restriction progress_1111111111111_to_111111111111111:
    "All p #t1. ProgressFrom_1111111111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111111111(p )@t2)
    "

restriction progress_11111111_to_11111111111:
    "All p #t1. ProgressFrom_11111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111(p )@t2)
    "

restriction progress_111_to_111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111212(p )@t2)
    "

restriction progress_111_to_1112112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112112(p )@t2)
    "

restriction progress_111_to_1111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121(p )@t2)
    "

restriction progress_111_to_111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121(p )@t2)
    "

restriction progress_111_to_1112111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112111(p )@t2)
    "

restriction progress_111_to_1111111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma untimelinessA : exists-trace
"	not( All #i a k. StartA(a, k) @ i ==> ( Ex #j b t. ContractA(a, b, t, k) @ j ) | ( Ex #j. Corrupt(a) @ j ) )"

lemma strongfairnessA :
"	All #i a b t. OriginJudge(a, b, t) @ i ==> ( Ex #j k. ContractA(a, b, t, k) @ j ) | ( Ex #j. Corrupt(a) @ j )"

end
