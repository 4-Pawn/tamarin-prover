theory GJM
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* Garay-Jakobsson-MacKenzie contract signing protocol *}

functions: pk/1, sk/1[private], sign/2, verify/2, true/0, pcs/3, checkpcs/5, convertpcs/2, verify/2, fakepcs/4

equations: verify(sign(m, sk(i)), pk(i))=m,checkpcs(c, pk(s), pk(v), pk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=true,convertpcs(sk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=sign(c, sk(s)),checkpcs(c, pk(s), pk(v), pk(ttp), fakepcs(pk(s), sk(v), pk(ttp), c))=true

heuristic: l /* heuristic for SAPIC in liveness mode, i.e., with progress) */ 

rule Init_: // [process=top-level] Init 
 [Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: // [process=top-level] MessageID-rule 
 [Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: // [process=top-level] Par 
 [State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: // [process=top-level] Rep, 0 
 [State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: // [process=top-level] Rep, 1 
 [!Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTP_TTP__11: // [process=top-level] in 'c',<$A, $B, <'TTP', $TTP>> 
 [Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, <'TTP', $TTP>>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, <'TTP', $TTP>>>)]-> [State_111($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_111: // [process=top-level] Par 
 [State_111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_1111($A, $B, $TTP, ~prog_, ~prog_111), State_1112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_1111: // [process=top-level] Par 
 [State_1111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_11111($A, $B, $TTP, ~prog_, ~prog_111), State_11112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_11111: // [process=top-level] Par 
 [State_11111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_111111($A, $B, $TTP, ~prog_, ~prog_111), State_111112($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_TEXT_111111 [color=#569DC0]: // [process=A] in 'c',$TEXT 
 [State_111111($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', $TEXT>)] --[ProgressTo_1111111(~prog_111), ChannelInEvent(<'c', $TEXT>)]-> [State_1111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule new_sida_1111111 [color=#569DC0]: // [process=A] new sida 
 [Fr(~prog_11111111), State_1111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), Fr(sida)] --[ProgressFrom_11111111(~prog_11111111)]-> [State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_StartA_TEXT_sida_11111111 [color=#569DC0]: // [process=A] event StartA($TEXT, sida) 
 [State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), StartA($TEXT, sida)]-> [State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule out_c_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__111111111 [color=#569DC0]: // [process=A] out 'c',pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)) 
 [State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In('c')] --[ChannelInEvent('c')]-> [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), Out(pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))]

rule out_r_originator_A_TTP_TTP_sign_TEXT_A_B_abort_sk_A___11111111111 [color=#569DC0]: // [process=A] out 'r',<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))> 
 [MID_Sender(mid_11111111111), State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Send(mid_11111111111,<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))>)]-> [Out(<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))>), State_111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule in_r_originator_A_TTP_TTP_signsign_TEXT_A_B_abort_sk_A__sk_TTP_TTP___1111111111111 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))> 
 [State_111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>), MID_Receiver(mid_1111111111111)] --[Receive(mid_1111111111111,<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>)]-> [State_11111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_AbortA_TEXT_sida_11111111111111 [color=#569DC0]: // [process=A] event AbortA($TEXT, sida) 
 [Fr(~prog_111111111111111), State_11111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[ProgressFrom_111111111111111(~prog_111111111111111), Event(), AbortA($TEXT, sida)]-> [State_111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111111111, sida)]

rule Zero_111111111111111 [color=#569DC0]: // [process=A] Zero 
 [State_111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111111111, sida)] --[ProgressTo_1111111111111111(~prog_111111111111111)]-> []

rule in_r_originator_A_TTP_TTP_sign_TEXT_2_sk_B__1111111111112 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))> 
 [State_111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))>), MID_Receiver(mid_1111111111112)] --[Receive(mid_1111111111112,<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))>)]-> [State_11111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_ResolveA_TEXT_sida_11111111111121 [color=#569DC0]: // [process=A] event ResolveA($TEXT, sida) 
 [State_11111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), ResolveA($TEXT, sida)]-> [State_111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule Zero_111111111111211 [color=#569DC0]: // [process=A] Zero 
 [State_111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[]-> []

rule in_c_pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP__11111111112 [color=#569DC0]: // [process=A] in 'c',pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)) 
 [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'c', pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>)] --[ChannelInEvent(<'c', pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>)]-> [State_111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule out_c_sign_TEXT_1_sk_A_111111111121 [color=#569DC0]: // [process=A] out 'c',sign(<$TEXT, '1'>, sk($A)) 
 [State_111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In('c')] --[ChannelInEvent('c')]-> [State_1111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), Out(sign(<$TEXT, '1'>, sk($A)))]

rule out_r_originator_A_TTP_TTP_sign_TEXT_1_sk_A_pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP___11111111112111 [color=#569DC0]: // [process=A] out 'r',<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>> 
 [MID_Sender(mid_11111111112111), State_1111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Send(mid_11111111112111,<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>>)]-> [Out(<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>>), State_111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule in_r_originator_A_TTP_TTP_signsign_TEXT_A_B_abort_sk_A__sk_TTP_TTP___1111111111211111 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))> 
 [State_111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>), MID_Receiver(mid_1111111111211111)] --[Receive(mid_1111111111211111,<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>)]-> [State_11111111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_AbortA_TEXT_sida_11111111112111111 [color=#569DC0]: // [process=A] event AbortA($TEXT, sida) 
 [State_11111111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), AbortA($TEXT, sida)]-> [State_111111111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule Zero_111111111121111111 [color=#569DC0]: // [process=A] Zero 
 [State_111111111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[]-> []

rule in_r_originator_A_TTP_TTP_sign_TEXT_2_sk_B__1111111111211112 [color=#569DC0]: // [process=A] in 'r',<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))> 
 [State_111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))>), MID_Receiver(mid_1111111111211112)] --[Receive(mid_1111111111211112,<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, '2'>, sk($B))>)]-> [State_11111111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_ResolveA_TEXT_sida_11111111112111121 [color=#569DC0]: // [process=A] event ResolveA($TEXT, sida) 
 [State_11111111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), ResolveA($TEXT, sida)]-> [State_111111111121111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule Zero_111111111121111211 [color=#569DC0]: // [process=A] Zero 
 [State_111111111121111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[]-> []

rule in_c_sign_TEXT_2_sk_B_11111111112112 [color=#569DC0]: // [process=A] in 'c',sign(<$TEXT, '2'>, sk($B)) 
 [State_1111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'c', sign(<$TEXT, '2'>, sk($B))>)] --[ChannelInEvent(<'c', sign(<$TEXT, '2'>, sk($B))>)]-> [State_111111111121121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_ContractA_A_B_TEXT_sida_111111111121121 [color=#569DC0]: // [process=A] event ContractA($A, $B, $TEXT, sida) 
 [State_111111111121121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), ContractA($A, $B, $TEXT, sida)]-> [State_1111111111211211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule Zero_1111111111211211 [color=#569DC0]: // [process=A] Zero 
 [State_1111111111211211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[]-> []

rule in_c_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__111112 [color=#2CD719]: // [process=B] in 'c',pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)) 
 [State_111112($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>))>)] --[ProgressTo_1111121(~prog_111), ChannelInEvent(<'c', pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>))>)]-> [State_1111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule new_sidb_1111121 [color=#2CD719]: // [process=B] new sidb 
 [Fr(~prog_11111211), State_1111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), Fr(sidb)] --[ProgressFrom_11111211(~prog_11111211)]-> [State_11111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule event_StartB_TEXT_sidb_11111211 [color=#2CD719]: // [process=B] event StartB($TEXT, sidb) 
 [State_11111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[Event(), StartB($TEXT, sidb)]-> [State_111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule out_c_pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP__111112111 [color=#2CD719]: // [process=B] out 'c',pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)) 
 [State_111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), In('c')] --[ChannelInEvent('c')]-> [State_1111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), Out(pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]

rule out_r_responder_B_TTP_TTP_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__sign_TEXT_2_sk_B__11111211111 [color=#2CD719]: // [process=B] out 'r',<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>> 
 [MID_Sender(mid_11111211111), State_1111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[Send(mid_11111211111,<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>>)]-> [Out(<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>>), State_111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule in_r_responder_B_TTP_TTP_signsign_TEXT_A_B_abort_sk_A__sk_TTP_TTP___1111121111111 [color=#2CD719]: // [process=B] in 'r',<'responder', $B, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))> 
 [State_111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), In(<'responder', $B, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>), MID_Receiver(mid_1111121111111)] --[Receive(mid_1111121111111,<'responder', $B, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk('A')), sk(<'TTP', $TTP>))>)]-> [State_11111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule event_AbortB_TEXT_sidb_11111211111111 [color=#2CD719]: // [process=B] event AbortB($TEXT, sidb) 
 [Fr(~prog_111112111111111), State_11111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[ProgressFrom_111112111111111(~prog_111112111111111), Event(), AbortB($TEXT, sidb)]-> [State_111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111111, sidb)]

rule Zero_111112111111111 [color=#2CD719]: // [process=B] Zero 
 [State_111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111111, sidb)] --[ProgressTo_1111121111111111(~prog_111112111111111)]-> []

rule in_r_responder_B_TTP_TTP_sign_TEXT_1_sk_A__1111121111112 [color=#2CD719]: // [process=B] in 'r',<'responder', $B, <'TTP', $TTP>, sign(<$TEXT, '1'>, sk($A))> 
 [State_111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), In(<'responder', $B, <'TTP', $TTP>, sign(<$TEXT, '1'>, sk($A))>), MID_Receiver(mid_1111121111112)] --[Receive(mid_1111121111112,<'responder', $B, <'TTP', $TTP>, sign(<$TEXT, '1'>, sk($A))>)]-> [State_11111211111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule event_ResolveB_TEXT_sidb_11111211111121 [color=#2CD719]: // [process=B] event ResolveB($TEXT, sidb) 
 [State_11111211111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[Event(), ResolveB($TEXT, sidb)]-> [State_111112111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule Zero_111112111111211 [color=#2CD719]: // [process=B] Zero 
 [State_111112111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[]-> []

rule in_c_sign_TEXT_1_sk_A_11111211112 [color=#2CD719]: // [process=B] in 'c',sign(<$TEXT, '1'>, sk($A)) 
 [State_1111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), In(<'c', sign(<$TEXT, '1'>, sk($A))>)] --[ChannelInEvent(<'c', sign(<$TEXT, '1'>, sk($A))>)]-> [State_111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule event_ContractB_A_B_TEXT_sidb_111112111121 [color=#2CD719]: // [process=B] event ContractB($A, $B, $TEXT, sidb) 
 [State_111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[Event(), ContractB($A, $B, $TEXT, sidb)]-> [State_1111121111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)]

rule out_c_sign_TEXT_2_sk_B_1111121111211 [color=#2CD719]: // [process=B] out 'c',sign(<$TEXT, '2'>, sk($B)) 
 [State_1111121111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), In('c')] --[ChannelInEvent('c')]-> [State_11111211112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb), Out(sign(<$TEXT, '2'>, sk($B)))]

rule Zero_11111211112111 [color=#2CD719]: // [process=B] Zero 
 [State_11111211112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111211, sidb)] --[]-> []

rule Par_11112 [color=#11EC28]: // [process=TTP] Par 
 [State_11112($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_111121($A, $B, $TTP, ~prog_, ~prog_111), State_111122($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_111121 [color=#11EC28]: // [process=TTP] Par 
 [State_111121($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_1111212(~prog_111)]-> [State_1111211($A, $B, $TTP, ~prog_, ~prog_111), State_1111212($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_r_originator_A_TTP_TTP_sign_TEXT_A_B_abort_sk_A__1111211 [color=#11EC28]: // [process=TTP] in 'r',<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk($A))> 
 [State_1111211($A, $B, $TTP, ~prog_, ~prog_111), In(<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk($A))>), MID_Receiver(mid_1111211)] --[ProgressTo_11112112(~prog_111), ProgressTo_11112111(~prog_111), Receive(mid_1111211,<'originator', $A, <'TTP', $TTP>, sign(<$TEXT, $A, $B, 'abort'>, sk($A))>)]-> [State_11112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule lock_TEXT_11112111 [color=#11EC28]: // [process=TTP] lock $TEXT 
 [Fr(~prog_111121111), State_11112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), Fr(~lock7)] --[ProgressFrom_111121111(~prog_111121111), Lock($7, ~lock7, $TEXT), Lock_7($7, ~lock7, $TEXT)]-> [State_111121111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule lookup_Resolved1_TTP_TTP_TEXT_as_siga_0_111121111 [color=#11EC28]: // [process=TTP] lookup <'Resolved1', <'TTP', $TTP>, $TEXT> as siga, 0 
 [State_111121111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[IsIn(<'Resolved1', <'TTP', $TTP>, $TEXT>, siga)]-> [State_1111211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)]

rule lookup_Resolved1_TTP_TTP_TEXT_as_siga_1_111121111 [color=#11EC28]: // [process=TTP] lookup <'Resolved1', <'TTP', $TTP>, $TEXT> as siga, 1 
 [State_111121111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[IsNotSet(<'Resolved1', <'TTP', $TTP>, $TEXT>)]-> [State_1111211112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule out_r_originator_A_TTP_TTP_siga__1111211111 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, siga> 
 [MID_Sender(mid_1111211111), State_1111211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)] --[Send(mid_1111211111,<'originator', $A, <'TTP', $TTP>, siga>)]-> [Out(<'originator', $A, <'TTP', $TTP>, siga>), State_11112111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)]

rule unlock_TEXT_11112111111 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_11112111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_111121111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)]

rule Zero_111121111111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111121111111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, siga)] --[ProgressTo_1111211111111(~prog_111121111)]-> []

rule lookup_Resolved2_TTP_TTP_TEXT_as_sigb_0_1111211112 [color=#11EC28]: // [process=TTP] lookup <'Resolved2', <'TTP', $TTP>, $TEXT> as sigb, 0 
 [State_1111211112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[IsIn(<'Resolved2', <'TTP', $TTP>, $TEXT>, sigb)]-> [State_11112111121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)]

rule lookup_Resolved2_TTP_TTP_TEXT_as_sigb_1_1111211112 [color=#11EC28]: // [process=TTP] lookup <'Resolved2', <'TTP', $TTP>, $TEXT> as sigb, 1 
 [State_1111211112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[IsNotSet(<'Resolved2', <'TTP', $TTP>, $TEXT>)]-> [State_11112111122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule out_r_originator_A_TTP_TTP_sigb__11112111121 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, sigb> 
 [MID_Sender(mid_11112111121), State_11112111121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)] --[Send(mid_11112111121,<'originator', $A, <'TTP', $TTP>, sigb>)]-> [Out(<'originator', $A, <'TTP', $TTP>, sigb>), State_111121111211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)]

rule unlock_TEXT_111121111211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_111121111211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_1111211112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)]

rule Zero_1111211112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_1111211112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111, sigb)] --[]-> []

rule insert_Aborted_TTP_TTP_TEXT_signsign_TEXT_A_B_abort_sk_A_sk_TTP_TTP__11112111122 [color=#11EC28]: // [process=TTP] insert <'Aborted', <'TTP', $TTP>, $TEXT>,sign(sign(<$TEXT, $A, $B, 'abort'>, sk($A)), sk(<'TTP', $TTP>)) 
 [State_11112111122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[Insert(<'Aborted', <'TTP', $TTP>, $TEXT>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk($A)), sk(<'TTP', $TTP>)))]-> [State_111121111221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule out_r_originator_A_TTP_TTP_signsign_TEXT_A_B_abort_sk_A_sk_TTP_TTP___111121111221 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk($A)), sk(<'TTP', $TTP>))> 
 [MID_Sender(mid_111121111221), State_111121111221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[Send(mid_111121111221,<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk($A)), sk(<'TTP', $TTP>))>)]-> [Out(<'originator', $A, <'TTP', $TTP>, sign(sign(<$TEXT, $A, $B, 'abort'>, sk($A)), sk(<'TTP', $TTP>))>), State_1111211112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule unlock_TEXT_1111211112211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_1111211112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_11112111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)]

rule Zero_11112111122111 [color=#11EC28]: // [process=TTP] Zero 
 [State_11112111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111121111)] --[]-> []

rule in_r_originator_A_TTP_TTP_sign_TEXT_1_sk_A_pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP___1111212 [color=#11EC28]: // [process=TTP] in 'r',<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>> 
 [Fr(~prog_11112121), State_1111212($A, $B, $TTP, ~prog_, ~prog_111), In(<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>>), MID_Receiver(mid_1111212)] --[ProgressFrom_11112121(~prog_11112121), Receive(mid_1111212,<'originator', $A, <'TTP', $TTP>, <sign(<$TEXT, '1'>, sk($A)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>))>>)]-> [State_11112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11112121)]

rule lock_TEXT_11112121 [color=#11EC28]: // [process=TTP] lock $TEXT 
 [State_11112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11112121), Fr(~lock7)] --[Lock($7, ~lock7, $TEXT), Lock_7($7, ~lock7, $TEXT)]-> [State_111121211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule lookup_Aborted_TTP_TTP_TEXT_as_abortcert_0_111121211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', <'TTP', $TTP>, $TEXT> as abortcert, 0 
 [State_111121211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[IsIn(<'Aborted', <'TTP', $TTP>, $TEXT>, abortcert)]-> [State_1111212111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)]

rule lookup_Aborted_TTP_TTP_TEXT_as_abortcert_1_111121211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', <'TTP', $TTP>, $TEXT> as abortcert, 1 
 [State_111121211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[IsNotSet(<'Aborted', <'TTP', $TTP>, $TEXT>)]-> [State_1111212112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule out_r_originator_A_TTP_TTP_abortcert__1111212111 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, abortcert> 
 [MID_Sender(mid_1111212111), State_1111212111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)] --[Send(mid_1111212111,<'originator', $A, <'TTP', $TTP>, abortcert>)]-> [Out(<'originator', $A, <'TTP', $TTP>, abortcert>), State_11112121111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)]

rule unlock_TEXT_11112121111 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_11112121111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)] --[ProgressTo_111121211111(~prog_11112121), Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_111121211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)]

rule Zero_111121211111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111121211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, abortcert)] --[]-> []

rule lookup_Resolved2_TTP_TTP_TEXT_as_resolvesig_0_1111212112 [color=#11EC28]: // [process=TTP] lookup <'Resolved2', <'TTP', $TTP>, $TEXT> as resolvesig, 0 
 [State_1111212112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[IsIn(<'Resolved2', <'TTP', $TTP>, $TEXT>, resolvesig)]-> [State_11112121121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)]

rule lookup_Resolved2_TTP_TTP_TEXT_as_resolvesig_1_1111212112 [color=#11EC28]: // [process=TTP] lookup <'Resolved2', <'TTP', $TTP>, $TEXT> as resolvesig, 1 
 [State_1111212112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[IsNotSet(<'Resolved2', <'TTP', $TTP>, $TEXT>)]-> [State_11112121122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule out_r_originator_A_TTP_TTP_resolvesig__11112121121 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, resolvesig> 
 [MID_Sender(mid_11112121121), State_11112121121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)] --[Send(mid_11112121121,<'originator', $A, <'TTP', $TTP>, resolvesig>)]-> [Out(<'originator', $A, <'TTP', $TTP>, resolvesig>), State_111121211211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)]

rule unlock_TEXT_111121211211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_111121211211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)] --[ProgressTo_1111212112111(~prog_11112121), Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_1111212112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)]

rule Zero_1111212112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_1111212112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121, resolvesig)] --[]-> []

rule out_r_originator_A_TTP_TTP_convertpcssk_TTP_TTP__pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP___11112121122 [color=#11EC28]: // [process=TTP] out 'r',<'originator', $A, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))> 
 [MID_Sender(mid_11112121122), State_11112121122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[Send(mid_11112121122,<'originator', $A, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))>)]-> [Out(<'originator', $A, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))>), State_111121211221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule insert_Resolved1_TTP_TTP_TEXT_sign_TEXT_1_sk_A_111121211221 [color=#11EC28]: // [process=TTP] insert <'Resolved1', <'TTP', $TTP>, $TEXT>,sign(<$TEXT, '1'>, sk($A)) 
 [State_111121211221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[Insert(<'Resolved1', <'TTP', $TTP>, $TEXT>, sign(<$TEXT, '1'>, sk($A)))]-> [State_1111212112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule unlock_TEXT_1111212112211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_1111212112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[ProgressTo_11112121122111(~prog_11112121), Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_11112121122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)]

rule Zero_11112121122111 [color=#11EC28]: // [process=TTP] Zero 
 [State_11112121122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_11112121)] --[]-> []

rule in_r_responder_B_TTP_TTP_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__sign_TEXT_2_sk_B__111122 [color=#11EC28]: // [process=TTP] in 'r',<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>> 
 [State_111122($A, $B, $TTP, ~prog_, ~prog_111), In(<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>>), MID_Receiver(mid_111122)] --[Receive(mid_111122,<'responder', $B, <'TTP', $TTP>, <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), sign(<$TEXT, '2'>, sk($B))>>)]-> [State_1111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule lock_TEXT_1111221 [color=#11EC28]: // [process=TTP] lock $TEXT 
 [State_1111221($A, $B, $TEXT, $TTP, ~prog_, ~prog_111), Fr(~lock7)] --[Lock($7, ~lock7, $TEXT), Lock_7($7, ~lock7, $TEXT)]-> [State_11112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule lookup_Aborted_TTP_TTP_TEXT_as_abortcert_0_11112211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', <'TTP', $TTP>, $TEXT> as abortcert, 0 
 [State_11112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[IsIn(<'Aborted', <'TTP', $TTP>, $TEXT>, abortcert)]-> [State_111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)]

rule lookup_Aborted_TTP_TTP_TEXT_as_abortcert_1_11112211 [color=#11EC28]: // [process=TTP] lookup <'Aborted', <'TTP', $TTP>, $TEXT> as abortcert, 1 
 [State_11112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[IsNotSet(<'Aborted', <'TTP', $TTP>, $TEXT>)]-> [State_111122112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule out_r_responder_B_TTP_TTP_abortcert__111122111 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, <'TTP', $TTP>, abortcert> 
 [MID_Sender(mid_111122111), State_111122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)] --[Send(mid_111122111,<'responder', $B, <'TTP', $TTP>, abortcert>)]-> [Out(<'responder', $B, <'TTP', $TTP>, abortcert>), State_1111221111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)]

rule unlock_TEXT_1111221111 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_1111221111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_11112211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)]

rule Zero_11112211111 [color=#11EC28]: // [process=TTP] Zero 
 [State_11112211111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, abortcert)] --[]-> []

rule lookup_Resolved1_TTP_TTP_TEXT_as_resolvesig_0_111122112 [color=#11EC28]: // [process=TTP] lookup <'Resolved1', <'TTP', $TTP>, $TEXT> as resolvesig, 0 
 [State_111122112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[IsIn(<'Resolved1', <'TTP', $TTP>, $TEXT>, resolvesig)]-> [State_1111221121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)]

rule lookup_Resolved1_TTP_TTP_TEXT_as_resolvesig_1_111122112 [color=#11EC28]: // [process=TTP] lookup <'Resolved1', <'TTP', $TTP>, $TEXT> as resolvesig, 1 
 [State_111122112($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[IsNotSet(<'Resolved1', <'TTP', $TTP>, $TEXT>)]-> [State_1111221122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule out_r_responder_B_TTP_TTP_resolvesig__1111221121 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, <'TTP', $TTP>, resolvesig> 
 [MID_Sender(mid_1111221121), State_1111221121($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)] --[Send(mid_1111221121,<'responder', $B, <'TTP', $TTP>, resolvesig>)]-> [Out(<'responder', $B, <'TTP', $TTP>, resolvesig>), State_11112211211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)]

rule unlock_TEXT_11112211211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_11112211211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_111122112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)]

rule Zero_111122112111 [color=#11EC28]: // [process=TTP] Zero 
 [State_111122112111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111, resolvesig)] --[]-> []

rule out_r_responder_B_TTP_TTP_convertpcssk_TTP_TTP__pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP___1111221122 [color=#11EC28]: // [process=TTP] out 'r',<'responder', $B, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))> 
 [MID_Sender(mid_1111221122), State_1111221122($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[Send(mid_1111221122,<'responder', $B, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))>)]-> [Out(<'responder', $B, <'TTP', $TTP>, convertpcs(sk(<'TTP', $TTP>), pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))>), State_11112211221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule insert_Resolved2_TTP_TTP_TEXT_sign_TEXT_2_sk_B_11112211221 [color=#11EC28]: // [process=TTP] insert <'Resolved2', <'TTP', $TTP>, $TEXT>,sign(<$TEXT, '2'>, sk($B)) 
 [State_11112211221($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[Insert(<'Resolved2', <'TTP', $TTP>, $TEXT>, sign(<$TEXT, '2'>, sk($B)))]-> [State_111122112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule unlock_TEXT_111122112211 [color=#11EC28]: // [process=TTP] unlock $TEXT 
 [State_111122112211($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[Unlock($7, ~lock7, $TEXT), Unlock_7($7, ~lock7, $TEXT)]-> [State_1111221122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)]

rule Zero_1111221122111 [color=#11EC28]: // [process=TTP] Zero 
 [State_1111221122111($A, $B, $TEXT, $TTP, ~lock7, ~prog_, ~prog_111)] --[]-> []

rule Par_1112 [color=#45D1E2]: // [process=Judge] Par 
 [State_1112($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_11121($A, $B, $TTP, ~prog_, ~prog_111), State_11122($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_11121 [color=#45D1E2]: // [process=Judge] Par 
 [State_11121($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_111212(~prog_111)]-> [State_111211($A, $B, $TTP, ~prog_, ~prog_111), State_111212($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP__sign_TEXT_1_sk_A_sign_TEXT_2_sk_B__111211 [color=#45D1E2]: // [process=Judge] in 'c',<pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)), sign(<$TEXT, '1'>, sk($A)), sign(<$TEXT, '2'>, sk($B))> 
 [State_111211($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)), sign(<$TEXT, '1'>, sk($A)), sign(<$TEXT, '2'>, sk($B))>>)] --[ProgressTo_1112112(~prog_111), ProgressTo_1112111(~prog_111), ChannelInEvent(<'c', <pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)), sign(<$TEXT, '1'>, sk($A)), sign(<$TEXT, '2'>, sk($B))>>)]-> [State_1112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)]

rule event_ContractJudge_A_B_TEXT_1112111 [color=#45D1E2]: // [process=Judge] event ContractJudge($A, $B, $TEXT) 
 [Fr(~prog_11121111), State_1112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111)] --[ProgressFrom_11121111(~prog_11121111), Event(), ContractJudge($A, $B, $TEXT)]-> [State_11121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11121111)]

rule Zero_11121111 [color=#45D1E2]: // [process=Judge] Zero 
 [State_11121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11121111)] --[ProgressTo_111211111(~prog_11121111)]-> []

rule in_c_sign_signct_sk1_signct_sk2_skT_111212 [color=#45D1E2]: // [process=Judge] in 'c',sign(<sign(ct, sk1), sign(ct, sk2)>, skT) 
 [Fr(~prog_1112121), State_111212($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', sign(<sign(ct, sk1), sign(ct, sk2)>, skT)>)] --[ProgressFrom_1112121(~prog_1112121), ChannelInEvent(<'c', sign(<sign(ct, sk1), sign(ct, sk2)>, skT)>)]-> [State_1112121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, ct, sk1, sk2, skT)]

rule event_ContractJudge_A_B_TEXT_1112121 [color=#45D1E2]: // [process=Judge] event ContractJudge($A, $B, $TEXT) 
 [State_1112121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, ct, sk1, sk2, skT)] --[ProgressTo_11121211(~prog_1112121), Event(), ContractJudge($A, $B, $TEXT)]-> [State_11121211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, ct, sk1, sk2, skT)]

rule Zero_11121211 [color=#45D1E2]: // [process=Judge] Zero 
 [State_11121211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1112121, ct, sk1, sk2, skT)] --[]-> []

rule in_c_wittness_abort_11122 [color=#45D1E2]: // [process=Judge] in 'c',wittness_abort 
 [State_11122($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', wittness_abort>)] --[ChannelInEvent(<'c', wittness_abort>)]-> [State_111221($A, $B, $TTP, ~prog_, ~prog_111, wittness_abort)]

rule event_AbortJudge_A_B_TEXT_111221 [color=#45D1E2]: // [process=Judge] event AbortJudge($A, $B, $TEXT) 
 [State_111221($A, $B, $TTP, ~prog_, ~prog_111, wittness_abort)] --[Event(), AbortJudge($A, $B, $TEXT)]-> [State_1112211($A, $B, $TTP, ~prog_, ~prog_111, wittness_abort)]

rule Zero_1112211 [color=#45D1E2]: // [process=Judge] Zero 
 [State_1112211($A, $B, $TTP, ~prog_, ~prog_111, wittness_abort)] --[]-> []

rule Rep_0_2: // [process=top-level] Rep, 0 
 [State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: // [process=top-level] Rep, 1 
 [!Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: // [process=top-level] in 'c',<'corrupt', $x> 
 [Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: // [process=top-level] event Corrupt($x) 
 [State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: // [process=top-level] out 'c',sk($x) 
 [State_2111($x, ~prog_, ~prog_211), In('c')] --[ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Par_21111: // [process=top-level] Par 
 [State_21111($x, ~prog_, ~prog_211)] --[ProgressTo_211112(~prog_211), ProgressTo_211111(~prog_211)]-> [State_211111($x, ~prog_, ~prog_211), State_211112($x, ~prog_, ~prog_211)]

rule Rep_0_211111: // [process=top-level] Rep, 0 
 [State_211111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111111($x, ~prog_, ~prog_211)]

rule Rep_1_211111: // [process=top-level] Rep, 1 
 [!Semistate_2111111($x, ~prog_, ~prog_211)] --[]-> [State_2111111($x, ~prog_, ~prog_211)]

rule in_r_responder_x_m__2111111: // [process=top-level] in 'r',<'responder', $x, m> 
 [State_2111111($x, ~prog_, ~prog_211), In(<'responder', $x, m>), MID_Receiver(mid_2111111)] --[Receive(mid_2111111,<'responder', $x, m>)]-> [State_21111111($x, ~prog_, ~prog_211, m)]

rule Zero_21111111: // [process=top-level] Zero 
 [State_21111111($x, ~prog_, ~prog_211, m)] --[]-> []

rule Rep_0_211112: // [process=top-level] Rep, 0 
 [State_211112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111121($x, ~prog_, ~prog_211)]

rule Rep_1_211112: // [process=top-level] Rep, 1 
 [!Semistate_2111121($x, ~prog_, ~prog_211)] --[]-> [State_2111121($x, ~prog_, ~prog_211)]

rule in_r_originator_x_m__2111121: // [process=top-level] in 'r',<'originator', $x, m> 
 [State_2111121($x, ~prog_, ~prog_211), In(<'originator', $x, m>), MID_Receiver(mid_2111121)] --[Receive(mid_2111121,<'originator', $x, m>)]-> [State_21111211($x, ~prog_, ~prog_211, m)]

rule Zero_21111211: // [process=top-level] Zero 
 [State_21111211($x, ~prog_, ~prog_211, m)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_11112121_to_111121211111_or_1111212112111_or_11112121122111:
    "All p #t1. ProgressFrom_11112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121211111(p )@t2)
	 | (Ex #t2. ProgressTo_1111212112111(p )@t2)
	 | (Ex #t2. ProgressTo_11112121122111(p )@t2)
    "

restriction progress_1112121_to_11121211:
    "All p #t1. ProgressFrom_1112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11121211(p )@t2)
    "

restriction progress_111121121_to_1111211211111_or_11112112112111_or_111121121122111:
    "All p #t1. ProgressFrom_111121121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211211111(p )@t2)
	 | (Ex #t2. ProgressTo_11112112112111(p )@t2)
	 | (Ex #t2. ProgressTo_111121121122111(p )@t2)
    "

restriction progress_11121121_to_111211211:
    "All p #t1. ProgressFrom_11121121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111211211(p )@t2)
    "

restriction progress_111111111112111121_to_1111111111121111211:
    "All p #t1. ProgressFrom_111111111112111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111121111211(p )@t2)
    "

restriction progress_111112111111121_to_1111121111111211:
    "All p #t1. ProgressFrom_111112111111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111111211(p )@t2)
    "

restriction progress_111111111111121_to_1111111111111211:
    "All p #t1. ProgressFrom_111111111111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111211(p )@t2)
    "

restriction progress_11111211_to_1111121111111_or_111112111112111:
    "All p #t1. ProgressFrom_11111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111111(p )@t2)
	 | (Ex #t2. ProgressTo_111112111112111(p )@t2)
    "

restriction progress_211_to_211112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211112(p )@t2)
    "

restriction progress_211_to_211111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211111(p )@t2)
    "

restriction progress_111121111_to_1111211111111_or_11112111112111_or_111121111122111:
    "All p #t1. ProgressFrom_111121111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211111111(p )@t2)
	 | (Ex #t2. ProgressTo_11112111112111(p )@t2)
	 | (Ex #t2. ProgressTo_111121111122111(p )@t2)
    "

restriction progress_11121111_to_111211111:
    "All p #t1. ProgressFrom_11121111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111211111(p )@t2)
    "

restriction progress_111111111112111111_to_1111111111121111111:
    "All p #t1. ProgressFrom_111111111112111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111121111111(p )@t2)
    "

restriction progress_111112111111111_to_1111121111111111:
    "All p #t1. ProgressFrom_111112111111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111111111(p )@t2)
    "

restriction progress_111111111111111_to_1111111111111111:
    "All p #t1. ProgressFrom_111111111111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111111(p )@t2)
    "

restriction progress_11111111_to_1111111111111_or_1111111111121111_or_11111111111211211:
    "All p #t1. ProgressFrom_11111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111121111(p )@t2)
	 | (Ex #t2. ProgressTo_11111111111211211(p )@t2)
    "

restriction progress_111_to_1111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111212(p )@t2)
    "

restriction progress_111_to_111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111212(p )@t2)
    "

restriction progress_111_to_11112112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112112(p )@t2)
    "

restriction progress_111_to_1112112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112112(p )@t2)
    "

restriction progress_111_to_1111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121(p )@t2)
    "

restriction progress_111_to_11112111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112111(p )@t2)
    "

restriction progress_111_to_1112111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112111(p )@t2)
    "

restriction progress_111_to_1111111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

 
 restriction locking_7: 
 "All p pp l x lp #t1 #t3 . Lock_7(p,l,x)@t1 & Lock(pp,lp,x)@t3 
         ==> 
         ( #t1<#t3 
                  & (Ex #t2. Unlock_7(p,l,x)@t2 & #t1<#t2 & #t2<#t3  
                  & (All #t0 pp  . Unlock(pp,l,x)@t0 ==> #t0=#t2) 
                  & (All pp lpp #t0 . Lock(pp,lpp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                  & (All pp lpp #t0 . Unlock(pp,lpp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 ) 
                 )) 
         | #t3<#t1 | #t1=#t3 " 

 lemma sanity_optimistic_AB : exists-trace
"	Ex #i #j a b t sida sidb. ContractA(a, b, t, sida) @ i & ContractB(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

end
