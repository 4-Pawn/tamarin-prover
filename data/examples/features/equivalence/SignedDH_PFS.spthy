theory SignedDH_PFS
begin

section{* The Signed Diffie-Hellman Protocol *}

/*
 * Protocol:	Signed Diffie-Hellman, extended for ObsEq
 * Modeler: 	Simon Meier, Benedikt Schmidt; extension by Jannik Dreier, Ralf Sasse
 * Date: 	January 2012; extended April 2015
 *
 * Status: 	working; ???
 */

builtins: diffie-hellman, signing

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltk) ] 
  --> 
  [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)) ]

rule Get_pk:
  [ !Pk(A, pk) ] 
  --> 
  [ Out(pk) ]

rule Reveal_ltk:
    [ !Ltk(A, ltk) ]
  --[ LtkReveal(A) ]->
    [ Out(ltk) ]

// Protocol
rule Init_1:
  [ Fr(~ekI), !Ltk($I, ltkI) ]
  -->
  [ Init_1( $I, $R, ~ekI )
  , Out( <$I, $R, 'g' ^ ~ekI, sign{'1', $I, $R,'g' ^ ~ekI }ltkI> ) ]

rule Init_2:
    [ Init_1( $I, $R, ~ekI )
    , !Pk($R, pk(ltkR))
    , In( <$R, $I, Y, sign{'2', $R, $I, Y }ltkR> ) 
    ]
  --[ SessionKey($I,$R, Y ^ ~ekI) ]->
    [ InitiatorKey($I,$R, Y ^ ~ekI) ]

rule Resp:
    [ !Pk($I, pk(ltkI))
    , !Ltk($R, ltkR)
    , Fr(~ekR)
    , In( <$I, $R, X, sign{'1', $I, $R, X }ltkI> ) 
    ]
  --[ SessionKey($I,$R, X ^ ~ekR) ]->
    [
      ResponderKey($I,$R, X ^ ~ekR)
    , Out( <$R, $I, 'g' ^ ~ekR, sign{'2', $R, $I, 'g' ^ ~ekR }ltkR> ) 
    ]


rule ChallengeInitiator:
    [ InitiatorKey($I,$R, k) , Fr(~z) , In(~c)]
  --[ Challenge($I,$R,diff(k, ~z)) ]->
    [ Out(diff(sign{'challenge', ~c}k,sign{'challenge', ~c}~z)) ]

rule ChallengeResponder:
    [ ResponderKey($I,$R, k) , Fr(~z) , In(~c)]
  --[ Challenge($I,$R,diff(k, ~z)) ]->
    [ Out(diff(sign{'challenge', ~c}k, sign{'challenge', ~c}~z)) ]


lemma Perfect_Forward_Secrecy:
  "All I R sessKey #i #k. 
     SessionKey(I,R,sessKey) @ i &
     K(sessKey) @ k
     ==>
     ( (Ex #r. LtkReveal(I) @ r & r < i)
     | (Ex #r. LtkReveal(R) @ r & r < i)
     )
  "

axiom singleChallenge:
  "All I R k I2 R2 k2 #j #j2. Challenge(I, R, k)@j & Challenge(I2, R2, k2)@ j2 ==> #j = #j2"

// Note that these axioms are only for observational equivalence, comment them out for trace properties!
axiom NoChallengeAndRevealInitiator:
  "not (Ex I R key #i #k. Challenge(I, R, key)@i & LtkReveal(I)@k)"

axiom NoChallengeAndRevealResponder:
  "not (Ex I R key #i #k. Challenge(I, R, key)@i & LtkReveal(R)@k)"

end
