theory PLAINDH
begin






















section{* Plain Diffie-Hellman Key-Exchange Protocol *}

text{*
*}

rule Reveal_pk:
  [ ] --> [ Out( pk(lts($m)) ) ]

rule Reveal_lts:
  [ In( m ) ] --> [ LTSR( m ), Out( lts(m) ) ]

/* Protocol rules */


rule reveal_pk:
   [ ] --> [ Out('g'^sk(lts($X))) ]

rule plaindh_I_1:
   [ Fr( ~ni ) ]
   -->
   [ plaindh_I_1( $I, $R, ~ni ), Out( <$I, 'g'^~ni >) ]

rule plaindh_I_2:
   [ plaindh_I_1( $I, $R, ~ni ), In( <$R, Gr> ) ]
   -->
   [ plaindh_I_2( $I, $R, ~ni, Gr ) ]

rule plaindh_R_1:
   [ In( <I, Gi> ) ] --> [ plaindh_R_1( I, $R, Gi ) ]

rule plaindh_R_2:
   [ plaindh_R_1( I, $R, Gi ), Fr( ~nr ) ]
   -->
   [ plaindh_R_2( I, $R, Gi, ~nr ), Out( <$R, 'g'^~nr >) ]


/* Session keys */


rule SeKeyI:
  [ plaindh_I_2( $I, $R, ~ni, Gr ) ]
  -->
  [ SeKeyI(Gr^~ni , <$I,$R,'g'^~ni,Gr> ) ]


rule SeKeyR:
  [ plaindh_R_2( I, $R, Gi, ~nr ) ]
  -->
  [ SeKeyR(Gi^~nr , <I,$R,Gi,'g'^~nr> ) ]


subsection{* Secrecy Properties *}


/*
Security Model (Compromise Rules without premises)
Filtering is done in the property conclusions (property violation ==> security model violation)
*/

	
 
/*
lemma I_executable:
  "not(v :> plaindh_I_2( $I, $R, ~ni, Gr ) )"

lemma R_executable:
  "not(v :> plaindh_R_2( I, $R, Gi, ~nr ) )"
*/

 
lemma I_secrecy_ephkeys:
  "( v :> plaindh_I_2( $I, $R, ~ni, Gr ) & u :> In(~ni) )
   ==>  (Ex #rN Agv. ( rN :> LTSR(Agv) & ((Agv = $I) | (Agv = $R)))) "

lemma R_secrecy_ephkeys:
  "( v :> plaindh_R_2( I, $R, Gi, ~nr ) & u :> In(~nr) )
   ==>  (Ex #rN Agv. ( rN :> LTSR(Agv) & ((Agv = $R) | (Agv = I)))) "

 
lemma I_secrecy_key:
  "vkey :> SeKeyI(k, <$I, $R, Gi, Gr>) & vk :> In(k)
  ==>  (Ex #rN Agv. ( rN :> LTSR(Agv) & ((Agv = $I) | (Agv = $R)))) "

lemma R_secrecy_key:
  "vkey :> SeKeyR(k, <I, $R, Gi, Gr>) & vk :> In(k)
  ==>  (Ex #rN Agv. ( rN :> LTSR(Agv) & ((Agv = $R) | (Agv = I)))) "


end
