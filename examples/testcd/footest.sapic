theory Foo
begin

/*free ch,ch1,ch2,ch3,ch4,ch5,c1,c2.
free a,b,v.
free ska,skva,skvb,skvc.
free skvaCh,skvbCh,skvcCh.*/

functions: open/2, commit/2, checksign/2, sign/2, blind/2, unblind/2, pk/1, true/0
equations: open(commit(m,r),r) = m, checksign(sign(m,sk),pk(sk)) = m, unblind(blind(m,r),r) = m, unblind(sign(blind(m,r),sk),r) = sign(m,sk)


let sync_process_0 =
in(aaa'5, y1);in(aaa'1, y2);in(aaa'9, y3);out(aaa'6,choice[y1,y1]);out(aaa'2,choice[y2,y2]);out(aaa'10,choice[y3,y3]);in(aaa'7, y4);in(aaa'3, y5);in(aaa'11, y6);out(aaa'8,choice[y4,y4]);out(aaa'4,choice[y5,y5]);out(aaa'12,choice[y6,y6]);0.

let sync_process_1 =
in(aaa'5, y1);in(aaa'1, y2);in(aaa'9, y3);out(aaa'6,choice[y1,y1]);out(aaa'2,choice[y2,y2]);out(aaa'10,choice[y3,y3]);in(aaa'7, y4);in(aaa'3, y5);in(aaa'11, y6);out(aaa'8,choice[y4,y5]);out(aaa'4,choice[y5,y4]);out(aaa'12,choice[y6,y6]);0.

let sync_process_2 =
in(aaa'5, y1);in(aaa'1, y2);in(aaa'9, y3);out(aaa'6,choice[y1,y2]);out(aaa'2,choice[y2,y1]);out(aaa'10,choice[y3,y3]);in(aaa'7, y4);in(aaa'3, y5);in(aaa'11, y6);out(aaa'8,choice[y4,y4]);out(aaa'4,choice[y5,y5]);out(aaa'12,choice[y6,y6]);0.

let sync_process_3 =
in(aaa'5, y1);in(aaa'1, y2);in(aaa'9, y3);out(aaa'6,choice[y1,y2]);out(aaa'2,choice[y2,y1]);out(aaa'10,choice[y3,y3]);in(aaa'7, y4);in(aaa'3, y5);in(aaa'11, y6);out(aaa'8,choice[y4,y5]);out(aaa'4,choice[y5,y4]);out(aaa'12,choice[y6,y6]);0.

process
new aaa'9;
new aaa'10;
new aaa'11;
new aaa'12;
new aaa'5;
new aaa'6;
new aaa'7;
new aaa'8;
new aaa'1;
new aaa'2;
new aaa'3;
new aaa'4;
(
    let skv = skva in
    let v = choice[a,b] in
    new b;
    new r;
    let commitedvote = commit(v,r) in
    let blindedvote = blind(commitedvote,b) in
    out(ch1, (pk(skv),sign(blindedvote,skv),blindedvote));
    in(ch2, m2);
    let result = checksign(m2,pk(ska)) in
    if result = blindedvote then
    let signedvote = unblind(m2,b) in
    out(aaa'1, (r,ch5,ch4,signedvote,commitedvote,ch3));
    in(aaa'2, (xxx'1,xxx'2,xxx'3,xxx'4,xxx'5,xxx'6));
    out(xxx'6, (xxx'5,xxx'4));
    in(xxx'3, (l,=xxx'5,=xxx'4));
    out(aaa'3, (xxx'1,l,xxx'2));
    in(aaa'4, (xxx'1,xxx'2,xxx'3));
    out(xxx'3, (xxx'2,xxx'1));
    0
) || (
    let skv = skvb in
    let v = choice[b,a] in
    new b;
    new r;
    let commitedvote = commit(v,r) in
    let blindedvote = blind(commitedvote,b) in
    out(ch1, (pk(skv),sign(blindedvote,skv),blindedvote));
    in(ch2, m2);
    let result = checksign(m2,pk(ska)) in
    if result = blindedvote then
    let signedvote = unblind(m2,b) in
    out(aaa'5, (r,ch5,ch4,signedvote,commitedvote,ch3));
    in(aaa'6, (xxx'1,xxx'2,xxx'3,xxx'4,xxx'5,xxx'6));
    out(xxx'6, (xxx'5,xxx'4));
    in(xxx'3, (l,=xxx'5,=xxx'4));
    out(aaa'7, (xxx'1,l,xxx'2));
    in(aaa'8, (xxx'1,xxx'2,xxx'3));
    out(xxx'3, (xxx'2,xxx'1));
    0
) || (
    let skv = skvc in
    new b;
    out(c1, b);
    new r;
    out(c1, r);
    let commitedvote = commit(v,r) in
    let blindedvote = blind(commitedvote,b) in
    in(c2, y1);
    out(ch1, y1);
    in(ch2, m2);
    out(c1, m2);
    let result = checksign(m2,pk(ska)) in
    in(c2, y2);
    if y2 = true() then
    let signedvote = unblind(m2,b) in
    out(aaa'9, (ch5,c1,ch4,ch3,c2));
    in(aaa'10, (xxx'1,xxx'2,xxx'3,xxx'4,xxx'5));
    in(xxx'5, y3);
    out(xxx'4, y3);
    in(xxx'3, m3);
    out(xxx'2, m3);
    let (l,commitedvoter,signedvoter) = m3 in
    in(xxx'5, y4);
    if y4 = true() then
    in(xxx'5, y5);
    if y4 = true() then
    out(aaa'11, (xxx'1,xxx'5));
    in(aaa'12, (xxx'1,xxx'2));
    in(xxx'2, y6);
    out(xxx'1, y6);
    0
)
|| sync_process_2
