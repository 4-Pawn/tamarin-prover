theory NAXOS_eCK begin

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^x.3 ), !KU( f_, x.4 )
   -->
    !KD( 'exp', x.2^(x.4*x.3) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^x.3 ), !KU( f_, inv(x.3) ) --> !KD( 'exp', x.2 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv(x.3) ), !KU( f_, x.3 ) --> !KD( 'exp', x.2 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv(x.3) ), !KU( f_, inv(x.4) )
   -->
    !KD( 'exp', x.2^inv((x.4*x.3)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, x.4 )
   -->
    !KD( 'exp', x.2^x.3 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.4*x.3) ), !KU( f_, inv(x.3) )
   -->
    !KD( 'exp', x.2^x.4 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv((x.4*x.3)) ), !KU( f_, x.3 )
   -->
    !KD( 'exp', x.2^inv(x.4) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^x.3 ), !KU( f_, (x.4*inv(x.3)) )
   -->
    !KD( 'exp', x.2^x.4 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^x.3 ), !KU( f_, inv((x.4*x.3)) )
   -->
    !KD( 'exp', x.2^inv(x.4) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv(x.3) ), !KU( f_, (x.4*x.3) )
   -->
    !KD( 'exp', x.2^x.4 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, inv(x.5) )
   -->
    !KD( 'exp', x.2^(x.3*inv((x.5*x.4))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv(x.3) ), !KU( f_, (x.4*inv(x.5)) )
   -->
    !KD( 'exp', x.2^(x.4*inv((x.5*x.3))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ), !KU( f_, x.4 )
   -->
    !KD( 'exp', x.2^(x.3*inv(x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, (x.5*x.4) )
   -->
    !KD( 'exp', x.2^(x.5*x.3) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.4*x.3) ), !KU( f_, (x.5*inv(x.3)) )
   -->
    !KD( 'exp', x.2^(x.5*x.4) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.4*x.3) ), !KU( f_, inv((x.5*x.3)) )
   -->
    !KD( 'exp', x.2^(x.4*inv(x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv((x.4*x.3)) ), !KU( f_, (x.5*x.3) )
   -->
    !KD( 'exp', x.2^(x.5*inv(x.4)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^x.3 ), !KU( f_, (x.4*inv((x.5*x.3))) )
   -->
    !KD( 'exp', x.2^(x.4*inv(x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, (x.5*inv(x.6)) )
   -->
    !KD( 'exp', x.2^((x.5*x.3)*inv((x.6*x.4))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, (x.4*inv(x.3)) )
   -->
    !KD( 'exp', x.2 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, inv((x.5*x.3)) )
   -->
    !KD( 'exp', x.2^inv((x.5*x.4)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv((x.4*x.3)) ), !KU( f_, (x.3*inv(x.5)) )
   -->
    !KD( 'exp', x.2^inv((x.5*x.4)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ), !KU( f_, (x.6*x.4) )
   -->
    !KD( 'exp', x.2^((x.6*x.3)*inv(x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.4*x.3) ), !KU( f_, (x.5*inv((x.6*x.3))) )
   -->
    !KD( 'exp', x.2^((x.5*x.4)*inv(x.6)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ), !KU( f_, (x.5*inv(x.3)) )
   -->
    !KD( 'exp', x.2^x.4 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ), !KU( f_, (x.4*inv(x.3)) )
   -->
    !KD( 'exp', x.2^inv(x.5) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, ((x.5*x.4)*inv(x.3)) )
   -->
    !KD( 'exp', x.2^x.5 )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, (x.4*inv((x.5*x.3))) )
   -->
    !KD( 'exp', x.2^inv(x.5) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ), !KU( f_, inv((x.6*x.3)) )
   -->
    !KD( 'exp', x.2^(x.4*inv((x.6*x.5))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^inv((x.4*x.3)) ), !KU( f_, ((x.5*x.3)*inv(x.6)) )
   -->
    !KD( 'exp', x.2^(x.5*inv((x.6*x.4))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ), !KU( f_, (x.4*inv(x.6)) )
   -->
    !KD( 'exp', x.2^(x.3*inv((x.6*x.5))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ), !KU( f_, (x.5*inv((x.6*x.3))) )
   -->
    !KD( 'exp', x.2^(x.5*inv((x.6*x.4))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv(x.4)) ),
    !KU( f_, ((x.5*x.4)*inv((x.6*x.3))) )
   -->
    !KD( 'exp', x.2^(x.5*inv(x.6)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv((x.6*x.5))) ),
    !KU( f_, (x.5*inv(x.3)) )
   -->
    !KD( 'exp', x.2^(x.4*inv(x.6)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ),
    !KU( f_, (x.4*inv((x.6*x.3))) )
   -->
    !KD( 'exp', x.2^inv((x.6*x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ),
    !KU( f_, ((x.6*x.4)*inv(x.3)) )
   -->
    !KD( 'exp', x.2^(x.6*inv(x.5)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ),
    !KU( f_, (x.5*inv((x.6*x.3))) )
   -->
    !KD( 'exp', x.2^(x.4*inv(x.6)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ),
    !KU( f_, ((x.6*x.5)*inv(x.3)) )
   -->
    !KD( 'exp', x.2^(x.6*x.4) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ),
    !KU( f_, (x.6*inv((x.7*x.3))) )
   -->
    !KD( 'exp', x.2^((x.6*x.4)*inv((x.7*x.5))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ),
    !KU( f_, ((x.6*x.4)*inv(x.7)) )
   -->
    !KD( 'exp', x.2^((x.6*x.3)*inv((x.7*x.5))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv(x.5)) ),
    !KU( f_, ((x.6*x.5)*inv((x.7*x.3))) )
   -->
    !KD( 'exp', x.2^((x.6*x.4)*inv(x.7)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv((x.6*x.5))) ),
    !KU( f_, ((x.7*x.5)*inv(x.3)) )
   -->
    !KD( 'exp', x.2^((x.7*x.4)*inv(x.6)) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^(x.3*inv((x.5*x.4))) ),
    !KU( f_, ((x.6*x.4)*inv((x.7*x.3))) )
   -->
    !KD( 'exp', x.2^(x.6*inv((x.7*x.5))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv((x.6*x.5))) ),
    !KU( f_, (x.5*inv((x.7*x.3))) )
   -->
    !KD( 'exp', x.2^(x.4*inv((x.7*x.6))) )
 
 rule (modulo AC) Exp:
    !KD( 'noexp', x.2^((x.4*x.3)*inv((x.6*x.5))) ),
    !KU( f_, ((x.7*x.5)*inv((x.8*x.3))) )
   -->
    !KD( 'exp', x.2^((x.7*x.4)*inv((x.8*x.6))) )
 
 rule (modulo AC) Inv:
    !KD( f_, inv(x.1) ) --> !KD( 'noexp', x.1 )
 
 rule (modulo AC) snd:
    !KD( f_, <x.1, x.2> ) --> !KD( 'noexp', x.2 )
 
 rule (modulo AC) fst:
    !KD( f_, <x.1, x.2> ) --> !KD( 'noexp', x.1 )
 
 rule (modulo AC) adec:
    !KD( f1_, aenc{x.3}pk(x.2) ), !KU( f2_, x.2 )
   -->
    !KD( 'noexp', x.3 )
 
 rule (modulo AC) sdec:
    !KD( f1_, senc{x.3}x.2 ), !KU( f2_, x.2 ) --> !KD( 'noexp', x.3 )
 
 rule (modulo AC) verify:
    !KD( f1_, sign{x.3}x.2 ), !KU( f2_, pk(x.2) )
   -->
    !KD( 'noexp', x.3 )
 
 rule (modulo AC) Exp:
    !KU( 'noexp', x ), !KU( f_, x.1 ) --> !KU( 'exp', x^x.1 )
 
 rule (modulo AC) Unit:
   --> !KU( 'noexp', 1 )
 
 rule (modulo AC) h:
    !KU( f_, x ) --> !KU( 'noexp', h(x) )
 
 rule (modulo AC) pk:
    !KU( f_, x ) --> !KU( 'noexp', pk(x) )
 
 rule (modulo AC) snd:
    !KU( f_, x ) --> !KU( 'noexp', snd(x) )
 
 rule (modulo AC) fst:
    !KU( f_, x ) --> !KU( 'noexp', fst(x) )
 
 rule (modulo AC) senc:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', senc{x}x.1 )
 
 rule (modulo AC) aenc:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', aenc{x}x.1 )
 
 rule (modulo AC) adec:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', adec(x.1, x) )
 
 rule (modulo AC) sdec:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', sdec(x.1, x) )
 
 rule (modulo AC) sign:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', sign{x}x.1 )
 
 rule (modulo AC) verify:
    !KU( f1_, x ), !KU( f2_, x.1 ) --> !KU( 'noexp', verify(x.1, x) )
 
 rule (modulo AC) coerce:
    !KD( f_, x ) --> !KU( f_, x )
 
 rule (modulo AC) pub:
   --> !KU( f_, $x )
 
 rule (modulo AC) gen_fresh:
    Fresh( ~x ) --> !KU( 'noexp', ~x )

section{* The NAXOS Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   Fresh( <'RegisterKey', $A> ), Fresh( ~lk )
  -->
   !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Send( 'g'^~lk )

rule (modulo E) Init_1:
   Fresh( ~ekI ), !Ltk( $I, ~lkI )
  --[ SidI_1( ~ekI, $I, $R, 'g'^h(<~lkI, ~ekI>) ) ]->
   Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(<~lkI, ~ekI>) ), !EphkI( ~ekI ),
   Send( 'g'^h(<~lkI, ~ekI>) )

rule (modulo E) Init_2:
   Init_1( ~ekI, $I, $R, ~lkI, hkI ), !Knows( Y ), !Pk( $R, 'g'^~lkR )
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y,
          h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
  )
  ]->
   !SesskOfI( ~ekI,
              h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
   )

rule (modulo E) Resp_1:
   !Knows( X ), Fresh( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI )
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^h(<~lkR, ~ekR>),
          h(<'g'^~lkI^h(<~lkR, ~ekR>), X^~lkR, X^h(<~lkR, ~ekR>), $I, $R>)
  )
  ]->
   Send( 'g'^h(<~lkR, ~ekR>) ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR,
              h(<'g'^~lkI^h(<~lkR, ~ekR>), X^~lkR, X^h(<~lkR, ~ekR>), $I, $R>)
   )

rule (modulo E) Sessk_revealI:
   !SesskOfI( ~tid, k ) --[ SesskRev( ~tid ) ]-> Send( k )

rule (modulo E) Sessk_revealR:
   !SesskOfR( ~tid, k ) --[ SesskRev( ~tid ) ]-> Send( k )

rule (modulo E) Ephk_revealI:
   !EphkI( ~ekI ) --[ EphkRev( ~ekI ) ]-> Send( ~ekI )

rule (modulo E) Ephk_revealR:
   !EphkR( ~ekR ) --[ EphkRev( ~ekR ) ]-> Send( ~ekR )

rule (modulo E) Ltk_reveal:
   !Ltk( $A, k ) --[ LtkRev( $A ) ]-> Send( k )

rule (modulo E) log_deducible:
   !Knows( x ) --[ Deducible( x ) ]->

lemma (modulo E) key_agreement_reachable:
  "not(Ex #i #i.1 ekI.2 ekR.3 I.4 R.5 k.6 hkI.7 hkR.8.
        (SidI_2( ekI.2, I.4, R.5, hkI.7, hkR.8, k.6 ) @ #i) &
        (SidR_1( ekR.3, I.4, R.5, hkI.7, hkR.8, k.6 ) @ #i.1))"
/* proof based on the same lemma modulo AC */
by sorry // not yet proven

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i #i.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i) &
             (Deducible( k.5 ) @ #i.1)) &
            (All #i.8 #i.9.
              ((LtkRev( I.3 ) @ #i.8) & (EphkRev( ttest.2 ) @ #i.9)) ==> (F))) &
           (All #i.10. (SesskRev( ttest.2 ) @ #i.10) ==> (F))) &
          (All #i.11 #i.12 tpartner.13 kpartner.14.
            ((SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14
              ) @ #i.11) &
             (SesskRev( tpartner.13 ) @ #i.12)) ==>
            (F))) &
         (All #i.15 #i.16 #i.17 tpartner.18 kpartner.19.
           (((SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19
              ) @ #i.15) &
             (LtkRev( R.4 ) @ #i.16)) &
            (EphkRev( tpartner.18 ) @ #i.17)) ==>
           (F))) &
        (All #i.20.
          (LtkRev( R.4 ) @ #i.20) ==>
          (Ex #i.21 tpartner.22 kpartner.23.
            SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23
            ) @ #i.21)))"
/* proof based on the same lemma modulo AC */
simplify
solve( SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i )
  case Init_2
  simplify
  solve( Deducible( k.5 ) @ #i.1 )
    case log_deducible
    simplify
    solve( (#i, 0)[Init_1( ~ekI.11, $I.13, $R.14, ~lkI.12, hkI.6 )] )
      case Init_1
      solve( (#i, 2)[!Pk( $R.14, 'g'^~lkR.16 )] )
        case generate_ltk
        solve( (#vf.20, 0)[!KU( f_.21,
                                h(<x.9, 'g'^(h(<~lkI.12, ~ekI.11>)*~lkR.16), x.10, $I.13, $R.14>)
                           )] )
          case Sessk_revealI
          simplify
          by contradiction // contradiction derived from formulas
        next
          case Sessk_revealR
          simplify
          solve( splitEqs(2) )
            case split_case_1
            by simplify
          next
            case split_case_2
            simplify
            by contradiction // contradiction derived from formulas
          next
            case split_case_3
            by simplify
          next
            case split_case_4
            simplify
            by contradiction // non-normal terms
          qed
        next
          case h
          solve( KU((#vr.49, 0), 'g'^(h(<~lkI.12, ~ekI.11>)*~lkR.16)) )
            case Exp
            solve( KU((#vr.55, 1), h(<~lkI.12, ~ekI.11>)) )
              case h
              solve( KU((#vr.55, 1), ~lkR.16) )
                case Ephk_revealI
                by simplify
              next
                case Ephk_revealR
                by simplify
              next
                case Ltk_reveal
                simplify
                solve( SidR_1( tpartner.82, $I.13, $R.14,
                               'g'^h(<~lkI.12, ~ekI.11>), hkR.7, kpartner.83
                       ) @ #i.81 )
                  case Resp_1
                  simplify
                  solve( (#i.81, 2)[!Ltk( $R.14, ~lkR.88 )] )
                    case generate_ltk
                    simplify
                    solve( KU((#vr.61, 0), ~lkI.12) )
                      case Ephk_revealI
                      by simplify
                    next
                      case Ephk_revealR
                      by simplify
                    next
                      case Ltk_reveal
                      simplify
                      solve( (#i.81, 3)[!Pk( $I.13, 'g'^~lkI.91 )] )
                        case generate_ltk
                        simplify
                        solve( KU((#vr.61, 0), ~ekI.11) )
                          case Ephk_revealI
                          simplify
                          by contradiction // contradiction derived from formulas
                        next
                          case Ephk_revealR
                          by simplify
                        next
                          case Ltk_reveal
                          by simplify
                        next
                          case gen_fresh
                          by simplify
                        qed
                      qed
                    next
                      case gen_fresh
                      by simplify
                    qed
                  qed
                qed
              next
                case gen_fresh
                by simplify
              qed
            qed
          next
            case Init_1
            simplify
            solve( (#vr.64, 1)[!KU( f_.65, ~lkR.80 )] )
              case Ephk_revealI
              by simplify
            next
              case Ephk_revealR
              by simplify
            next
              case Ltk_reveal
              simplify
              solve( SidR_1( tpartner.100, $I.13, $R.14,
                             'g'^h(<~lkI.79, ~ekI.78>), hkR.7, kpartner.101
                     ) @ #i.99 )
                case Resp_1
                simplify
                solve( (#i.99, 2)[!Ltk( $R.14, ~lkR.106 )] )
                  case generate_ltk
                  simplify
                  solve( (#i.99, 3)[!Pk( $I.13, 'g'^~lkI.109 )] )
                    case generate_ltk
                    simplify
                    solve( splitEqs(1) )
                      case split_case_1
                      simplify
                      by contradiction // non-normal terms
                    next
                      case split_case_2
                      simplify
                      solve( splitEqs(1) )
                        case split_case_1
                        simplify
                        by contradiction // non-normal terms
                      next
                        case split_case_2
                        simplify
                        solve( KU((#vr.49, 0), 'g'^(h(<~lkR.147, ~ekR.148>)*~lkI.146)) )
                          case Exp
                          solve( KU((#vr.152, 1), h(<~lkR.147, ~ekR.148>)) )
                            case h
                            simplify
                            solve( KU((#vr.152, 1), ~lkI.146) )
                              case Ephk_revealI
                              by simplify
                            next
                              case Ephk_revealR
                              by simplify
                            next
                              case Ltk_reveal
                              simplify
                              solve( KU((#vr.158, 0), ~ekR.148) )
                                case Ephk_revealI
                                by simplify
                              next
                                case Ephk_revealR
                                simplify
                                by contradiction // contradiction derived from formulas
                              next
                                case Ltk_reveal
                                by simplify
                              next
                                case gen_fresh
                                by simplify
                              qed
                            next
                              case gen_fresh
                              by simplify
                            qed
                          qed
                        next
                          case Init_1
                          by simplify
                        next
                          case Resp_1
                          simplify
                          solve( (#vr.167, 1)[!KU( f_.168, ~lkI.197 )] )
                            case Ephk_revealI
                            by simplify
                          next
                            case Ephk_revealR
                            by simplify
                          next
                            case Ltk_reveal
                            simplify
                            solve( KU((#vr.49, 0), 'g'^(h(<~lkR.198, ~ekR.199>)*
                                                        h(<~lkI.197, ~ekI.196>))) )
                              case Exp
                              solve( KU((#vr.220, 1), h(<~lkI.197, ~ekI.196>)) )
                                case h
                                simplify
                                solve( KU((#vr.220, 1), h(<~lkR.198, ~ekR.199>)) )
                                  case h
                                  simplify
                                  solve( KU((#vr.226, 0), ~ekI.196) )
                                    case Ephk_revealI
                                    simplify
                                    by contradiction // contradiction derived from formulas
                                  next
                                    case Ephk_revealR
                                    by simplify
                                  next
                                    case Ltk_reveal
                                    by simplify
                                  next
                                    case gen_fresh
                                    by simplify
                                  qed
                                qed
                              qed
                            next
                              case Init_1_case_1
                              simplify
                              solve( (#vr.229, 1)[!KU( f_.230, h(<~x.397, ~x.398>) )] )
                                case h
                                simplify
                                solve( KU((#vr.403, 0), ~x.398) )
                                  case Ephk_revealI
                                  by simplify
                                next
                                  case Ephk_revealR
                                  simplify
                                  by contradiction // contradiction derived from formulas
                                next
                                  case Ltk_reveal
                                  by simplify
                                next
                                  case gen_fresh
                                  by simplify
                                qed
                              qed
                            next
                              case Init_1_case_2
                              by simplify
                            next
                              case Resp_1_case_1
                              by simplify
                            next
                              case Resp_1_case_2
                              simplify
                              solve( (#vr.235, 1)[!KU( f_.236, h(<~lkI.507, ~x.508>) )] )
                                case h
                                simplify
                                solve( KU((#vr.513, 0), ~x.508) )
                                  case Ephk_revealI
                                  simplify
                                  by contradiction // contradiction derived from formulas
                                next
                                  case Ephk_revealR
                                  by simplify
                                next
                                  case Ltk_reveal
                                  by simplify
                                next
                                  case gen_fresh
                                  by simplify
                                qed
                              qed
                            qed
                          next
                            case gen_fresh
                            by simplify
                          qed
                        next
                          case generate_ltk
                          simplify
                          solve( (#vr.160, 1)[!KU( f_.161, h(<~lkR.168, ~ekR.169>) )] )
                            case h
                            simplify
                            solve( KU((#vr.49, 0), 'g'^(h(<~lkR.168, ~ekR.169>)*
                                                        h(<~lkI.167, ~ekI.145>))) )
                              case Exp
                              simplify
                              solve( KU((#vr.178, 1), h(<~lkI.167, ~ekI.145>)) )
                                case h
                                solve( KU((#vr.184, 0), ~lkI.167) )
                                  case Ephk_revealI
                                  by simplify
                                next
                                  case Ephk_revealR
                                  by simplify
                                next
                                  case Ltk_reveal
                                  simplify
                                  solve( KU((#vr.172, 0), ~ekR.169) )
                                    case Ephk_revealI
                                    by simplify
                                  next
                                    case Ephk_revealR
                                    simplify
                                    by contradiction // contradiction derived from formulas
                                  next
                                    case Ltk_reveal
                                    by simplify
                                  next
                                    case gen_fresh
                                    by simplify
                                  qed
                                next
                                  case gen_fresh
                                  by simplify
                                qed
                              qed
                            next
                              case Init_1_case_1
                              simplify
                              solve( (#vr.187, 1)[!KU( f_.188, h(<~x.355, ~x.356>) )] )
                                case h
                                simplify
                                solve( KU((#vr.172, 0), ~x.356) )
                                  case Ephk_revealI
                                  by simplify
                                next
                                  case Ephk_revealR
                                  simplify
                                  by contradiction // contradiction derived from formulas
                                next
                                  case Ltk_reveal
                                  by simplify
                                next
                                  case gen_fresh
                                  by simplify
                                qed
                              qed
                            next
                              case Init_1_case_2
                              by simplify
                            next
                              case Resp_1_case_1
                              by simplify
                            next
                              case Resp_1_case_2
                              simplify
                              solve( (#vr.193, 1)[!KU( f_.194, h(<~lkI.465, ~x.466>) )] )
                                case h
                                solve( KU((#vr.172, 0), ~ekR.467) )
                                  case Ephk_revealI
                                  by simplify
                                next
                                  case Ephk_revealR
                                  simplify
                                  by contradiction // contradiction derived from formulas
                                next
                                  case Ltk_reveal
                                  by simplify
                                next
                                  case gen_fresh
                                  by simplify
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case gen_fresh
              by simplify
            qed
          next
            case Resp_1
            by simplify
          next
            case generate_ltk
            simplify
            solve( (#vr.63, 1)[!KU( f_.64, h(<~lkI.71, ~ekI.70>) )] )
              case h
              solve( KU((#vr.75, 0), ~ekI.70) )
                case Ephk_revealI
                simplify
                solve( KU((#vr.75, 0), ~lkI.71) )
                  case Ephk_revealI
                  by simplify
                next
                  case Ephk_revealR
                  by simplify
                next
                  case Ltk_reveal
                  simplify
                  by contradiction // contradiction derived from formulas
                next
                  case gen_fresh
                  by simplify
                qed
              next
                case Ephk_revealR
                by simplify
              next
                case Ltk_reveal
                by simplify
              next
                case gen_fresh
                by simplify
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i #i.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i) &
             (Deducible( k.5 ) @ #i.1)) &
            (All #i.8 #i.9.
              ((LtkRev( R.4 ) @ #i.8) & (EphkRev( ttest.2 ) @ #i.9)) ==> (F))) &
           (All #i.10. (SesskRev( ttest.2 ) @ #i.10) ==> (F))) &
          (All #i.11 #i.12 tpartner.13 kpartner.14.
            ((SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14
              ) @ #i.11) &
             (SesskRev( tpartner.13 ) @ #i.12)) ==>
            (F))) &
         (All #i.15 #i.16 #i.17 tpartner.18.
           (((SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i.15) &
             (LtkRev( I.3 ) @ #i.16)) &
            (EphkRev( tpartner.18 ) @ #i.17)) ==>
           (F))) &
        (All #i.19.
          (LtkRev( I.3 ) @ #i.19) ==>
          (Ex #i.20 tpartner.21.
            SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i.20)))"
/* proof based on the same lemma modulo AC */
simplify
solve( SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i )
  case Resp_1
  simplify
  solve( (#i, 2)[!Ltk( $R.13, ~lkR.12 )] )
    case generate_ltk
    solve( (#i, 3)[!Pk( $I.14, 'g'^~lkI.15 )] )
      case generate_ltk
      solve( Deducible( k.5 ) @ #i.1 )
        case log_deducible
        simplify
        solve( (#vf.34, 0)[!KU( f_.35,
                                h(<'g'^(h(<~lkR.12, ~ekR.11>)*~lkI.15), x.9, x.10, $I.14, $R.13>)
                           )] )
          case Sessk_revealI
          simplify
          solve( splitEqs(1) )
            case split_case_1
            simplify
            by contradiction // contradiction derived from formulas
          next
            case split_case_2
            by simplify
          next
            case split_case_3
            simplify
            by contradiction // non-normal terms
          qed
        next
          case Sessk_revealR
          simplify
          by contradiction // contradiction derived from formulas
        next
          case h
          solve( KU((#vr.38, 0), 'g'^(h(<~lkR.12, ~ekR.11>)*~lkI.15)) )
            case Exp
            solve( KU((#vr.44, 1), h(<~lkR.12, ~ekR.11>)) )
              case h
              solve( KU((#vr.44, 1), ~lkI.15) )
                case Ephk_revealI
                by simplify
              next
                case Ephk_revealR
                by simplify
              next
                case Ltk_reveal
                simplify
                solve( SidI_1( tpartner.71, $I.14, $R.13, hkI.6 ) @ #i.70 )
                  case Init_1
                  simplify
                  solve( (#i.70, 1)[!Ltk( $I.14, ~lkI.74 )] )
                    case generate_ltk
                    simplify
                    solve( splitEqs(1) )
                      case split_case_1
                      simplify
                      by contradiction // non-normal terms
                    next
                      case split_case_2
                      simplify
                      solve( KU((#vr.38, 0), 'g'^(h(<~lkI.93, ~ekI.94>)*~lkR.92)) )
                        case Exp
                        solve( KU((#vr.98, 1), h(<~lkI.93, ~ekI.94>)) )
                          case h
                          simplify
                          solve( KU((#vr.50, 0), ~ekR.91) )
                            case Ephk_revealI
                            by simplify
                          next
                            case Ephk_revealR
                            simplify
                            solve( KU((#vr.50, 0), ~lkR.146) )
                              case Ephk_revealI
                              by simplify
                            next
                              case Ephk_revealR
                              by simplify
                            next
                              case Ltk_reveal
                              simplify
                              by contradiction // contradiction derived from formulas
                            next
                              case gen_fresh
                              by simplify
                            qed
                          next
                            case Ltk_reveal
                            by simplify
                          next
                            case gen_fresh
                            by simplify
                          qed
                        qed
                      next
                        case Init_1
                        simplify
                        solve( KU((#vr.50, 0), ~ekR.91) )
                          case Ephk_revealI
                          by simplify
                        next
                          case Ephk_revealR
                          simplify
                          solve( KU((#vr.50, 0), ~lkR.164) )
                            case Ephk_revealI
                            by simplify
                          next
                            case Ephk_revealR
                            by simplify
                          next
                            case Ltk_reveal
                            simplify
                            by contradiction // contradiction derived from formulas
                          next
                            case gen_fresh
                            by simplify
                          qed
                        next
                          case Ltk_reveal
                          by simplify
                        next
                          case gen_fresh
                          by simplify
                        qed
                      next
                        case Resp_1
                        by simplify
                      next
                        case generate_ltk
                        simplify
                        solve( (#vr.106, 1)[!KU( f_.107, h(<~lkI.114, ~ekI.115>) )] )
                          case h
                          simplify
                          solve( KU((#vr.50, 0), ~ekR.91) )
                            case Ephk_revealI
                            by simplify
                          next
                            case Ephk_revealR
                            simplify
                            solve( KU((#vr.50, 0), ~lkR.160) )
                              case Ephk_revealI
                              by simplify
                            next
                              case Ephk_revealR
                              by simplify
                            next
                              case Ltk_reveal
                              simplify
                              by contradiction // contradiction derived from formulas
                            next
                              case gen_fresh
                              by simplify
                            qed
                          next
                            case Ltk_reveal
                            by simplify
                          next
                            case gen_fresh
                            by simplify
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case gen_fresh
                by simplify
              qed
            qed
          next
            case Init_1
            by simplify
          next
            case Resp_1
            simplify
            solve( (#vr.59, 1)[!KU( f_.60, ~lkI.91 )] )
              case Ephk_revealI
              by simplify
            next
              case Ephk_revealR
              by simplify
            next
              case Ltk_reveal
              simplify
              solve( SidI_1( tpartner.110, $I.90, $R.89, hkI.86 ) @ #i.109 )
                case Init_1
                simplify
                solve( (#i.109, 1)[!Ltk( $I.90, ~lkI.113 )] )
                  case generate_ltk
                  simplify
                  solve( splitEqs(1) )
                    case split_case_1
                    simplify
                    by contradiction // non-normal terms
                  next
                    case split_case_2
                    simplify
                    solve( KU((#vr.38, 0), 'g'^(h(<~lkI.132, ~ekI.133>)*~lkR.131)) )
                      case Exp
                      solve( KU((#vr.137, 1), h(<~lkI.132, ~ekI.133>)) )
                        case h
                        simplify
                        solve( KU((#vr.137, 1), ~lkR.131) )
                          case Ephk_revealI
                          by simplify
                        next
                          case Ephk_revealR
                          by simplify
                        next
                          case Ltk_reveal
                          simplify
                          solve( KU((#vr.143, 0), ~ekI.133) )
                            case Ephk_revealI
                            simplify
                            by contradiction // contradiction derived from formulas
                          next
                            case Ephk_revealR
                            by simplify
                          next
                            case Ltk_reveal
                            by simplify
                          next
                            case gen_fresh
                            by simplify
                          qed
                        next
                          case gen_fresh
                          by simplify
                        qed
                      qed
                    next
                      case Init_1
                      simplify
                      solve( (#vr.146, 1)[!KU( f_.147, ~lkR.160 )] )
                        case Ephk_revealI
                        by simplify
                      next
                        case Ephk_revealR
                        by simplify
                      next
                        case Ltk_reveal
                        simplify
                        solve( KU((#vr.38, 0), 'g'^(h(<~lkI.161, ~ekI.162>)*
                                                    h(<~lkR.160, ~ekR.130>))) )
                          case Exp
                          solve( KU((#vr.184, 1), h(<~lkR.160, ~ekR.130>)) )
                            case h
                            simplify
                            solve( KU((#vr.184, 1), h(<~lkI.161, ~ekI.162>)) )
                              case h
                              simplify
                              solve( KU((#vr.190, 0), ~ekR.130) )
                                case Ephk_revealI
                                by simplify
                              next
                                case Ephk_revealR
                                simplify
                                by contradiction // contradiction derived from formulas
                              next
                                case Ltk_reveal
                                by simplify
                              next
                                case gen_fresh
                                by simplify
                              qed
                            qed
                          qed
                        next
                          case Init_1_case_1
                          by simplify
                        next
                          case Init_1_case_2
                          simplify
                          solve( (#vr.193, 1)[!KU( f_.194, h(<~x.361, ~x.362>) )] )
                            case h
                            simplify
                            solve( KU((#vr.367, 0), ~x.362) )
                              case Ephk_revealI
                              by simplify
                            next
                              case Ephk_revealR
                              simplify
                              by contradiction // contradiction derived from formulas
                            next
                              case Ltk_reveal
                              by simplify
                            next
                              case gen_fresh
                              by simplify
                            qed
                          qed
                        next
                          case Resp_1_case_1
                          simplify
                          solve( (#vr.199, 1)[!KU( f_.200, h(<~lkI.471, ~x.472>) )] )
                            case h
                            simplify
                            solve( KU((#vr.477, 0), ~x.472) )
                              case Ephk_revealI
                              simplify
                              by contradiction // contradiction derived from formulas
                            next
                              case Ephk_revealR
                              by simplify
                            next
                              case Ltk_reveal
                              by simplify
                            next
                              case gen_fresh
                              by simplify
                            qed
                          qed
                        next
                          case Resp_1_case_2
                          by simplify
                        qed
                      next
                        case gen_fresh
                        by simplify
                      qed
                    next
                      case Resp_1
                      by simplify
                    next
                      case generate_ltk
                      simplify
                      solve( (#vr.145, 1)[!KU( f_.146, h(<~lkI.153, ~ekI.154>) )] )
                        case h
                        simplify
                        solve( KU((#vr.157, 0), ~ekI.154) )
                          case Ephk_revealI
                          simplify
                          by contradiction // contradiction derived from formulas
                        next
                          case Ephk_revealR
                          by simplify
                        next
                          case Ltk_reveal
                          by simplify
                        next
                          case gen_fresh
                          by simplify
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case gen_fresh
              by simplify
            qed
          next
            case generate_ltk
            simplify
            solve( (#vr.52, 1)[!KU( f_.53, h(<~lkR.60, ~ekR.59>) )] )
              case h
              solve( KU((#vr.64, 0), ~ekR.59) )
                case Ephk_revealI
                by simplify
              next
                case Ephk_revealR
                simplify
                solve( KU((#vr.64, 0), ~lkR.108) )
                  case Ephk_revealI
                  by simplify
                next
                  case Ephk_revealR
                  by simplify
                next
                  case Ltk_reveal
                  simplify
                  by contradiction // contradiction derived from formulas
                next
                  case gen_fresh
                  by simplify
                qed
              next
                case Ltk_reveal
                by simplify
              next
                case gen_fresh
                by simplify
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end