theory Case_Study_Incremental_Design
begin

section{* A Key Exchange Protocol based on the NS(L)PK Protocol *}

/* Idea:
   
   1. Start with Needham-Schroeder Public-Key Protocol and a passive adversary.
      Prove its session-key secrecy.

   2. Add an active adversary that can dynamically compromise long-term keys.
      The session-key secrecy proof will fail.
      Note the attack and add the fix: the missing identity in the second message.
      Prove session-key secrecy again. Use the user-interface support for
      rechecking/rearranging proofs.

   3. Add a rule for session-key compromise.
      The session-key secrecy proof will fail.
      Note again the problem and add the fix: weaken the property to account for
      a session-key reveal on a session identified by <I,R,ni,nr>.
      Prove the session-key secrecy again. Use the user-interface support for
      rechecking/rearranging proofs.
     
   Document problems (e.g., redundant work) and suggest/implement improvements.

*/

subsection{* Protocl Model *}

anb-proto KEP
{
  1. I -> R: encA{'1', ni, I    }pk(lts(R))

             type assertions:
                 ni: ~x
                 I : $x

  // 2. I <- R: encA{'2', ni, nr, R}pk(lts(I))  -- for NSL-PK variant
  2. I <- R: encA{'2', ni, nr}pk(lts(I))        // NS-PK variant
      
             type assertions:
                 nr: ~x

  3. I ->  : encA{'3', nr       }pk(lts(R))

             note SeKey(h(ni,nr), <'I', I,R,ni,nr>)

       -> R: encA{'3', nr       }pk(lts(R))

             note SeKey(h(ni,nr), <'R', I,R,ni,nr>)
}

subsection{* Adversary Model *}

rule Reveal_pk:
  [ ] --> [ Out( pk(lts($m)) ) ]

/*
rule Reveal_lts:
  [ In( m ) ] --> [ LTSR( m ), Out( lts(m) ) ]

rule SeKey_Reveal:
  [ SeKey(k, params) ] 
  --> 
  [ SeKeyReveal(k, params), Out(k) ]

  type assertions: k: h(x,y)
*/

subsection{* Security Properties *}

lemma SeKey_secrecy:
  "key   :> SeKey(k, <role, I,R,ni,nr>) & 
   knows :> In(k)
   ==>
     (Ex #vr. vr :> LTSR(I))
   | (Ex #vr. vr :> LTSR(R))
   // | (Ex #vr rolep. vr :> SeKeyReveal(k, <rolep, I, R, ni, nr>))
  "


end

