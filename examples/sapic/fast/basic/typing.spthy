theory Typing
begin

functions: f(bitstring):bitstring, g(lol):lol, 
            h/1 // implicitely typed

builtins: multiset

let P(a:rofl) = new x:lol; new y; 
        out(x); out(y); 
        out(f(y));
        /* out(f(x)); // should fail */
       out(<x,y>); out(x + y); // should succeed
        out(f(<x,y>));  // should succeed
        out(h(x)); // implicitely types input to x as lol
        out(h(h(x))); // should implictely tupe h as lol->lol now 
        // TODO note that printout of function does not reflect this-> need to update with typing info...
        /* out(f(h(x))); // should fail: as h goes to lol and f wants bitstring */
        (new b:lol | new b:rofl) // should be allowed

process:
in(a:lol); // TODO we do not typecheck call to process correctly atm. I think the trick is to type check before inlining.
P(a)


end
