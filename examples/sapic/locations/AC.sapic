
theory Test

begin
functions: prog/3,list/2

predicates:
pred_rep(x,y) <=> not  (y= 'l')

let r =                                        // The remote server who runs the code
	(lock state; lookup state as ipo in
	in(ip); new r; let o = prog(r,ip,ipo) in   // computation of the new output
	let x = report (<o,ip,ipo>) in             // report call of the IEE
		event Poutput(<o,ip,ipo>);
		out(<o,x>);
		insert state,<o,list(ip,ipo)>;
		unlock state)@'l'


let v =                                        // The verifier
	lock state; lookup state as ipo in
	in(ip); in(<o,signedios>);
	if <o,ip,ipo>= check_rep(signedios,'l') then // verification of the validity of the report 
		(event Voutput(<o,ip,ipo>);
		insert state,<o,list(ip,ipo)>;
		unlock state)
	else  
		event Fail()


new init;
 ( !(new state;  insert state,init; !r) || !(new state;  insert state,init; !v)  )

/*
lemma can_run_v: //for sanity 
 	exists-trace 
	"Ex #t h .Voutput(h)@t" 
*/

// Attested computation theorem
lemma attested_comput:  
	"All #t1 h .  Voutput(h)@t1 ==> (Ex #t2 . Poutput(h)@t2 & t2<t1)" 

end
