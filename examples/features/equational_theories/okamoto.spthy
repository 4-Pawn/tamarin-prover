theory Okamoto
begin

/*
 * Protocol: Protocol by Okamoto 
 * Modeler: Charles DumÃ©nil
 * Date: 19/07/2016	
 * Source: Formal verification of voting and auction protocols by Jannik Dreier
 * Status: Working 
 */


/*
  Protocol FOO {
    Phase 1:
    V -> A: sign(blind(tdcommit(vote,r,td),b),skV)
    A -> V: sign(blind(tdcommit(vote,r,td),b),skA)
    Phase 2:
    V -> C: sign(tdcommit(vote,r,td),skA)
    V -> T: <vote, r, x>
    Phase 3
    C -> Pub: vote
    T -> Pub: vote
  }
*/


builtins: signing
functions: getmess/1, blind/2, unblind/2, open/2, tdcommit/3, checksign/2, f/4
equations: getmess( sign(m,sk) ) = m,
           checksign( sign(m,sk), pk(sk) ) = m,
           unblind( blind(m,b), b ) = m,
           unblind( sign( blind(m,b), sk), b ) = sign(m,sk),
           open( tdcommit(m,r,td), r ) = m,
           tdcommit( m2,f(m1,r,td,m2), td ) = tdcommit(m1,r,td),
           open( tdcommit(m1,r,td), f(m1,r,td,m2) )=m2,
           f(m1, f (m, r, td, m1), td, m2) = f (m, r, td, m2)    //The two last rules are needed for the convergence


// Public key infrastructure
rule Register_Voter_pk:
  [ Fr(~ltkV) ] --[ ]-> [ !Ltk($V, ~ltkV), !Pk($V, pk(~ltkV)), Out(pk(~ltkV)) ]

rule Register_Admin_pk:
  [ Fr(~ltkA) ] --[ ]-> [ !AdminLtk($A, ~ltkA), !AdminPk($A, pk(~ltkA)), Out(pk(~ltkA)) ]


//Rules

rule V_1:
  let x = tdcommit( ~vote , ~r, ~td )
      e = blind( x, ~b )
      s = sign ( e , ~ltkV )
  in
    [ Fr( ~r ), Fr( ~b ), Fr(~td), Fr( ~vote ), !Ltk( V, ~ltkV ) ]
  --[ Voted(~vote), Create_V_1(e)]->
    [ Out( < e , s > ), St_V_1( V, ~vote, ~r, ~b, ~td ) ]

rule A_1:
  let d = sign( e, ~ltkA )
      verif = verify(s, e, pkV)
  in
    [ In( < e , s >), !AdminLtk( A, ~ltkA ), !Pk( V, pkV ) ]
  --[ Eq( verif, true ),  Registered(e,V), In_A_1(e) ]->
    [ Out( < e , d > ) ]

rule V_2:    // Check Admin_Signature & Check the commit 
  let y = unblind(d,~b)   // = sign(x,ltkA)
      x = tdcommit(~vote,~r,~td)
      verif1 = verify( d, e, pkA )
      verif2 = verify( y, x, pkA )
  in
    [ In(< e, d>), St_V_1( V, ~vote, ~r, ~b, ~td),  !AdminPk(A, pkA) ]
  --[ Eq( verif1, true ), Eq(verif2,true), In_V_2( e ) ]->     
    [ Out( <x,y> ) , P_Ch_Timeliness( ~vote, ~r, x ) ]

rule C_1:
    [ In( <x,y> ), !AdminPk(A, pkA)]
  --[ Eq( checksign(y,pkA), x )  ]->
    [ Out( <x,y> ) ]

rule T_1:
  let v = open( x, ~r)
  in
    [ P_Ch_Timeliness( ~vote, ~r, x ) ]
  --[ VotePublished( ~vote ) ]->
    [ Out( ~vote ) ]


// Axioms

axiom Equality:
"All x y #i. Eq(x,y) @i ==> x = y"

axiom OnlyOneVotPerVoter:
"not (Ex e1 e2 V #i #j. Registered(e1,V) @i & Registered(e2,V)@j & not(#i = #j) )"


// Lemma simplifying the proof

lemma skiploops [reuse, use_induction]:
  " (
  All e #i. In_A_1(e) @ i
  ==>
  ( (Ex #j .  Create_V_1( e )@j & j<i )
  ) ) & (
  All e #i. In_V_2(e) @ i
  ==>
  ( (Ex #j. In_A_1(e)@j & j<i)
  ) ) "

// Property

lemma elligibility:
  " 
  All vote #j.
  VotePublished(vote)@j
  ==> 
  ( ( Ex r td b V #i.  Registered( blind( tdcommit(vote,r,td) ,b) ,V)@i & #i < #j  )  )"


end
