theory Chaum
begin


/*
 * Protocol: Chaum's On-line Protocol
 * Modeler: Charles DumÃ©nil
 * Date: July 2016	
 * Source: Formal Analysis of E-Cash Protocols by Jannik Dreier, Ali Kassem and Pascal Lafourcade
 * Status: working
 */


/*
  Protocol Chaum {
    Withdrawal phase
     C -> B: blind(x,r)
     B -> C: sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check sign"
     S -> B: <x, sign(x,skB)>        "Check sign" 
     B -> C: Private(x)              "Check sign" + "Deposite"
     S     :                         "Spend"
  }
*/


builtins: signing
functions: blind/2, unblind/2, getmess/1
equations: getmess(sign(m,r)) = m,
           unblind(blind(m,r),r) = m,
           unblind(sign(blind(m,r),k),r) = sign(m,k)


// Public key infrastructure

rule Register_Bank_pk:
  [ Fr(~ltkB) ]
  -->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(pk(~ltkB)) ]


// Withdrawal Phase

rule C_1:
    [ Fr(~x), Fr(~r) ]
  --[ ]->
    [ Out( blind(~x,~r) ), St_C_1( $C, ~x, ~r )]

rule B_1:
    [ In( blind(~x,r) ), !Bank_Ltk($B, ~ltkB) ]
  --[ Withdraw(~x)]->
    [ Out( sign( blind(~x,r), ~ltkB) ) ]


//Payment and deposit phase

rule C_2:
 let s = unblind(sb,r)
     verif = verify( sb, blind(x,r), pkB)
  in
    [ St_C_1( $C, x, r ), In( sb ), !Bank_Pk(B, pkB) ]
  --[ Eq( verif, true  )]->
    [ Out( <x,s> ) ]

rule S_1:
  let verif = verify( s, x , pkB )
  in
    [ In( <x,s> ), !Bank_Pk($B, pkB) ]
  --[ Eq( verif,true ) ]->
    [ Out( <x,s> ) ]

rule B_2:
  let verif = verify( s, x , pkB )
  in
    [ In( <x,s> ), !Bank_Pk($B, pkB) ]
  --[ Eq( verif,true ), Deposited(x)]->
    [ Private_Ch(x) ]

rule S_2:
    [ Private_Ch(~x) ]
  --[ Spend(~x ) ]->
    [  ]


// Axioms

axiom Equality:
  " All x y #i. Eq(x,y)@i ==> x = y "

axiom BankOnlyAcceptsOnce:
  " All x #j #k. Deposited(x)@j & Deposited(x)@k ==> #j = #k "


// Property

lemma unforgeability:
  "  All x #j. Spend(x) @ j
  ==> 
  ( Ex #i. Withdraw( x )@i & #i < #j & not (Ex #l. Spend(x)@l & not ( #l = #j ) ) ) "


end

