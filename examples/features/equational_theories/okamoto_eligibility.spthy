theory Okamoto_Eligibility
begin


/*
 * Protocol: Protocol by Okamoto 
 * Modeler: Charles DumÃ©nil
 * Date: July 2016	
 * Source: Formal verification of voting and auction protocols by Jannik Dreier
 * Status: Working 
 */


/*
  Protocol Okamoto {
    Phase 1:
     V -> A: <blind(tdcommit(vote,r,td),b), sign(blind(tdcommit(vote,r,td),b),skV)>
     A -> V: <blind(tdcommit(vote,r,td),b), sign(blind(tdcommit(vote,r,td),b),skA)>    "Registered" + "Check sign Voter"
    Phase 2:
     V -> C: <tdcommit(vote,r,td), sign(tdcommit(vote,r,td),skA)>                      "Check sign Admin" + "Check commit"
     V -> T: <vote, r, x>
    Phase 3
     C -> Pub: <tdcommit(vote,r,td), sign(tdcommit(vote,r,td),skA)>                    "Check sign Admin"
     T -> Pub: vote                                                                    "VotePublished"
  }
*/


builtins: signing
functions: getmess/1, blind/2, unblind/2, open/2, tdcommit/3, f/4
equations: getmess( sign( m, sk) ) = m,
           unblind( blind(m,b), b ) = m,
           unblind( sign( blind(m,b), sk), b ) = sign(m,sk),
           open( tdcommit(m,r,td), r ) = m,
           tdcommit( m2,f(m1,r,td,m2), td ) = tdcommit(m1,r,td),
           open( tdcommit(m1,r,td), f(m1,r,td,m2) )=m2 ,
           f(m1, f (m, r, td, m1), td, m2) = f (m, r, td, m2)


// Public key infrastructure

rule Register_Voter_pk:
  [ Fr(~ltkV) ] --[ ]-> [ !Ltk($V, ~ltkV), !Pk($V, pk(~ltkV)), Out(pk(~ltkV)) ]

rule Register_Admin_pk:
  [ Fr(~ltkA) ] --[ ]-> [ !AdminLtk($A, ~ltkA), !AdminPk($A, pk(~ltkA)), Out(pk(~ltkA)) ]


//Rules

rule V_1:
  let x = tdcommit( $vote , ~r, ~td )
      e = blind( x, ~b )
      s = sign ( e , ~ltkV )
  in
    [ Fr( ~r ), Fr( ~b ), Fr(~td), !Ltk( V, ~ltkV ) ]
  --[ Voted($vote), Create_V_1(e)]->
    [ Out( < e , s > ), St_V_1( V, $vote, ~r, ~b, ~td ) ]

rule A_1:
  let d = sign( e, ~ltkA )
      verif = verify(s, e, pkV)
  in
    [ In( < e , s >), !AdminLtk( A, ~ltkA ), !Pk( V, pkV ) ]
  --[ Eq( verif, true ),  Registered(e), In_A_1(e) ]->
    [ Out( < e , d > ) ]

rule V_2:    
  let y = unblind(d,~b)
      x = tdcommit($vote,~r,~td)
      verif1 = verify( d, e, pkA )
      verif2 = verify( y, x, pkA )
  in
    [ In(< e, d>), St_V_1( V, $vote, ~r, ~b, ~td),  !AdminPk(A, pkA) ]
  --[ Eq( verif1, true ), Eq(verif2,true) ]->     
    [ Out( <x,y> ) , P_Ch_Timeliness( $vote, ~r, x ) ]

rule C_1:
  let verif = verify( y, x, pkA )
  in
    [ In( <x,y> ), !AdminPk(A, pkA)]
  --[ Eq( verif, true )  ]->
    [ Out( <x,y> ) ]

rule T_1:
    [ P_Ch_Timeliness( $vote, ~r, x ) ]
  --[ VotePublished( x ) ]->
    [ Out( $vote ) ]


// Axioms

axiom Equality:
"All x y #i. Eq(x,y) @i ==> x = y"


// Typing lemma

lemma types [typing]:
  " All e #i. In_A_1(e) @ i
  ==>
  Ex #j . Create_V_1( e )@j & j<i "


// Executability

lemma exec:
  exists-trace
  " Ex x #i. VotePublished( x )@i "


// Property

lemma elligibility:
  " 
  All x #j.
  VotePublished(x)@j
  ==> 
  ( Ex b #i.  Registered( blind(x,b) )@i & #i < #j )"


end
