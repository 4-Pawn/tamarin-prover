theory Chaum_Equiv
begin

/*
 * Protocol: Chaum's On-line Protocol
 * Modeler: Charles DumÃ©nil
 * Date: 	
 * Source: Formal Analysis of E-Cash Protocols by Jannik Dreier, Ali Kassem and Pascal Lafourcade
 * Status: work in progress
 */


/*
  Protocol Chaum {
    Withdrawal phase
     C -> B: blind(x,r)
     B -> C: sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check sign"
     S -> B: <x, sign(x,skB)>        "Check sign" 
     B -> C: Private(x)              "Check sign" + "Deposite"
     S     :                         "Spend"
  }
*/


builtins: signing
functions: blind/2, unblind/2, getmess/1
equations: getmess(sign(m,r)) = m,
           unblind(blind(m,r),r) = m,
           unblind(sign(blind(m,r),k),r) = sign(m,k)


// Public key infrastructure

rule Register_Bank_pk:
  [ Fr(~ltkB) ]
  -->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(pk(~ltkB)) ]


// Withdrawal Phase

rule C_11:
    [ Fr(~x), Fr(~r) ]
  --[ Create_C_1(~x)]->
    [ Out( blind(~x,~r) ), St_C_1('C1', ~x, ~r )]

rule C_12:
    [ Fr(~x), Fr(~r) ]
  --[ Create_C_1(~x)]->
    [ Out( blind(~x,~r) ), St_C_1('C2', ~x, ~r )]

rule B_1:
    [ In( blind(~x,r) ), !Bank_Ltk($B, ~ltkB) ]
  --[ Withdraw(~x), In_B_1(~x)]->
    [ St_B_1( $B ), Out( sign( blind(~x,r), ~ltkB) ) ]


// Payment and deposit phase

rule C_2:
 let s = unblind(sb,r)
     verif = verify( sb, blind(x,r), pkB)
  in
    [ St_C_1($C, x, r ), In( sb ), !Bank_Pk($B, pkB) ]
  --[ Eq( verif, true  ), In_C_2(x)]->
    [ St_C_2($C, x, s ) ]

rule C_2sync:
    [ St_C_2('C1', x1,  s1 ),St_C_2('C2', x2, s2 ) ]
  --[  ]->
    [ Out(diff(< x1, s1 >,< x2, s2 >)) ]

rule S_1:
  let verif = verify( s, x , pkB )
  in
    [ In( <x,s> ), !Bank_Pk($B, pkB) ]
  --[ Eq( verif,true ), In_S_1(x) ]->
    [ Out( <x,s> ) ]

rule B_2:
  let verif = verify( s, x , pkB )
  in
    [ In( <x,s> ), St_B_1( $B ), !Bank_Pk($B, pkB) ]
  --[ Eq( verif,true ), Deposited(x)]->
    [ Private_Ch(x) ]

rule S_2:
    [ Private_Ch(~x) ]
  --[ Spend(~x ) ]->
    [  ]


// Axioms

axiom Equality:
"All x y #i. Eq(x,y)@i ==> x = y"

axiom BankOnlyAcceptsOnce:
  " All x #j #k. Deposited(x)@j & Deposited(x)@k ==> #j = #k "

lemma types [typing]:
  "
  All x r #i. In_S_1(blind(x,r))@i ==> F"


// Lemma simplifying the proof

lemma skiploops [reuse, use_induction]:
  " (
  All x #i. In_C_2(x) @ i
  ==>
  ( (Ex #j #k.  In_B_1(x) @ j & j<i & Create_C_1( x )  @ k & k<j)
  ) )
   
  "


// Property

lemma unforgeability:
  "
  All x #j. Spend(x) @ j
  ==> 
  ( ( Ex #i. Withdraw( x )@i & #i < #j
  & not (Ex #l. Spend(x)@l & not ( #l = #j ) )
  ) )
  "


end


