theory Chaum_Equiv
begin

/*
 * Protocol: Chaum's On-line Protocol
 * Modeler: Charles DumÃ©nil
 * Date: 	
 * Source: Formal Analysis of E-Cash Protocols by Jannik Dreier, Ali Kassem and Pascal Lafourcade
 * Status: work in progress
 */


/*
  Protocol Chaum { (Seller an bank are considered corrupted)
    Withdrawal phase
     C -> B: blind(x,r)
     B -> C: sign(blind(x,r),skB)    "Withdraw"
    Payment and deposit phase
     C -> S: <x, sign(x,skB)>        "Check sign"
     S -> B: <x, sign(x,skB)>        "Check sign" 
     B -> C: Private(x)              "Check sign" + "Deposite"
     S     :                         "Spend"
  }
*/


//builtins: signing
functions: pk/1, sign/2, checksign/2, blind/2, unblind/2
equations: unblind(blind(m,r),r) = m,
           unblind(sign(blind(m,r),k),r) = sign(m,k),
           checksign(sign(m,k),k)=m


// Public key infrastructure

rule Register_Bank_pk:
  [ Fr(~ltkB) ]
  --[ ]->
  [ !Bank_Ltk($B, ~ltkB), !Bank_Pk($B, pk(~ltkB)), Out(<~ltkB>) ]


// Withdrawal Phase

rule C_1_1:
    [ Fr(~x), Fr(~r) ]
  --[ C_1_1() ]->
    [ Out( blind(~x,~r) ), St_C_1('c1', ~x, ~r )]

rule C_1_2:
    [ Fr(~x), Fr(~r) ]
  --[ C_1_2() ]->
    [ Out( blind(~x,~r) ), St_C_1('c2', ~x, ~r )]


// Payment and deposit phase

rule C_2:
  let s = unblind(sign(blind(x,r), ~skB),r)
  in
    [ St_C_1(C, x, r ), In( sign(blind(x,r), ~skB) ), !Bank_Pk($B, pk(~skB)) ]
  --[  ]->
    [ St_C_2(C, x, s ) ]

rule C_2sync:
    [ St_C_2('c1', x1,  s1 ),St_C_2('c2', x2, s2 ) ]
  --[ Finish() ]->
    [ Out(diff(< x1, s1 >,< x2, s2 >)) ]



lemma test:
exists-trace
  " Ex #i. Finish()@i"


end


