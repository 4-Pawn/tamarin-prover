theory RFID_FeldhoferSPURIOUS
begin

/* 
Example by Feldhofer, described in: 
Untraceability of RFID Protocols
Ton van Deursen, Sjouke Mauw, Sasa Radomirovic

Figure 1.
Untraceability holds
*/

builtins: symmetric-encryption
functions: h/1

rule Setup_Shared_Key:
  [ Fr(~k) ]
--[ Setup(~k) ]->
  [ !Reader(~k), !Tag(~k) ]

rule Reader_Start:
  [ Fr(~nr) ]
--[ ]->
  [ Reader_Sent(~nr), Out(~nr) ]

//RECEIVED HASH OF FRESH IS CHEATING!!! --- fixed using typing lemma!

rule Reader_Finish:
  let r_in = senc(<h(~nr), hnt> , ~k) // h(~nt): we assume by typing the reader can see if the nt is actually a nonce
      r_out = senc(<hnt, h(~nr)>, ~k)
  in
  [ Reader_Sent(~nr), !Reader(~k), In(r_in) ]
--[ IN_R_1(hnt, r_in) ]->
  [ Reader_Done(~k, ~nr, hnt), Out(r_out) ]

rule Tag_Start:
  let t_msg = senc(<h(~nr),h(~nt)>, diff(~k1,~k2))
  in
  [ !Tag(~k1), !Tag(~k2) 
  , In(~nr) // we assume by typing we can see if the nr is actually a nonce type!
  , Fr(~nt) ] 
--[ OUT_T_1(h(~nt), t_msg) , InEq(~k1,~k2) ]->
  [ Trun(diff(~k1, ~k2), ~nr, ~nt), Out(t_msg) ]

rule Tag_Finish:
  [ Trun(~k, ~nr, ~nt), In(senc(<h(~nt),h(~nr)>, ~k)) ]
--[ Secret(~nt, ~k) ]->
  [ Tdone(~k, ~nr, ~nt) ]


//The typing lemma is needed to remove open chains.
lemma types [typing]:
  " (All n m1 #i.
       IN_R_1( n, m1) @ i
       ==>
       ( (Ex #j. KU(n) @ j & j < i)
       | (Ex #j. OUT_T_1(n, m1 ) @ j)
       )
    )"


lemma executable:
  exists-trace
  "Ex n k1 #i. Secret(n,k1)@i"

lemma secret_value:
  "All s k #i #i2. Secret(s,k)@i & K(s)@i2  ==>  ‚ä•"

end
