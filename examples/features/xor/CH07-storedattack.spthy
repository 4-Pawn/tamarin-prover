theory CH07 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, left/1, pair/2, right/1, rot/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) Setup:
   [ Fr( ~k ), Fr( ~id ) ]
  --[ OnlyOnce( ) ]->
   [ !Reader( ~k, ~id ), !Tag( ~k, ~id ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ) ]->
   [
   Out( <~r2, left(rot(~id, h((~k⊕~r2⊕r1))))> ),
   TagState( ~k, r1, ~r2, h((~k⊕~r2⊕r1)) )
   ]

  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Fr( ~r2 ), !Tag( ~k, ~id ) ]
    --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ) ]->
     [ Out( <~r2, left(rot(~id, h(z)))> ), TagState( ~k, r1, ~r2, h(z) )
     ]
    variants (modulo AC)
    1. ~k    = ~k.7
       ~r2   = ~r2.8
       r1    = r1.9
       z     = (~k.7⊕~r2.8⊕r1.9)
    
    2. ~k    = ~k.7
       ~r2   = ~r2.8
       r1    = zero
       z     = (~k.7⊕~r2.8)
    
    3. ~k    = ~k.8
       ~r2   = ~k.8
       r1    = r1.10
       z     = r1.10
    
    4. ~k    = ~k.8
       ~r2   = ~r2.9
       r1    = ~k.8
       z     = ~r2.9
    
    5. ~k    = ~k.8
       ~r2   = ~r2.9
       r1    = ~r2.9
       z     = ~k.8
    
    6. ~k    = ~k.8
       ~r2   = ~r2.9
       r1    = (~k.8⊕~r2.9)
       z     = zero
    
    7. ~k    = ~k.9
       ~r2   = ~r2.10
       r1    = (~k.9⊕~r2.10⊕z.12)
       z     = z.12
    
    8. ~k    = ~k.9
       ~r2   = ~r2.10
       r1    = (~k.9⊕x.14)
       z     = (~r2.10⊕x.14)
    
    9. ~k    = ~k.9
       ~r2   = ~r2.10
       r1    = (~r2.10⊕x.14)
       z     = (~k.9⊕x.14)
  */

rule (modulo E) reader2:
   [
   Initiated( ~r1 ), !Reader( ~k, ~id ),
   In( <r2, left(rot(~id, hash))> )
   ]
  --[
  Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ),
  Eq( h((~k⊕~r1⊕r2)), hash )
  ]->
   [ Out( right(rot(~id, hash)) ) ]

  /*
  rule (modulo AC) reader2:
     [
     Initiated( ~r1 ), !Reader( ~k, ~id ),
     In( <r2, left(rot(~id, hash))> )
     ]
    --[ Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ), Eq( h(z), hash )
    ]->
     [ Out( right(rot(~id, hash)) ) ]
    variants (modulo AC)
    1. ~k    = ~k.11
       ~r1   = ~r1.12
       r2    = ~k.11
       z     = ~r1.12
    
    2. ~k    = ~k.11
       ~r1   = ~r1.12
       r2    = ~r1.12
       z     = ~k.11
    
    3. ~k    = ~k.11
       ~r1   = ~r1.12
       r2    = zero
       z     = (~k.11⊕~r1.12)
    
    4. ~k    = ~k.11
       ~r1   = ~r1.12
       r2    = (~k.11⊕~r1.12)
       z     = zero
    
    5. ~k    = ~k.13
       ~r1   = ~k.13
       r2    = r2.16
       z     = r2.16
    
    6. ~k    = ~k.13
       ~r1   = ~r1.14
       r2    = r2.16
       z     = (~k.13⊕~r1.14⊕r2.16)
    
    7. ~k    = ~k.16
       ~r1   = ~r1.17
       r2    = (~k.16⊕~r1.17⊕z.22)
       z     = z.22
    
    8. ~k    = ~k.18
       ~r1   = ~r1.19
       r2    = (~k.18⊕x.33)
       z     = (~r1.19⊕x.33)
    
    9. ~k    = ~k.18
       ~r1   = ~r1.19
       r2    = (~r1.19⊕x.33)
       z     = (~k.18⊕x.33)
  */

rule (modulo E) tag2:
   [
   In( right(rot(~id, hash)) ), !Tag( ~k, ~id ),
   TagState( ~k, r1, ~r2, hash )
   ]
  --[ Alive( ~k, 'Reader' ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
simplify
solve( Alive( x, 'Tag' ) @ #i )
  case reader2
  solve( Initiated( ~r1 ) ▶₀ #i )
    case reader1
    solve( !Reader( ~k, ~id ) ▶₁ #i )
      case Setup
      solve( splitEqs(0) )
        case split_case_1
        by sorry
      next
        case split_case_2
        by sorry
      next
        case split_case_3
        by sorry
      next
        case split_case_4
        by sorry
      next
        case split_case_5
        by sorry
      next
        case split_case_6
        by sorry
      next
        case split_case_7
        by sorry
      next
        case split_case_8
        solve( !KU( left(rot(~id, h((~k⊕x)))) ) @ #vk.2 )
          case c_left
          solve( !KU( rot(~id, h((~k⊕x))) ) @ #vk.3 )
            case c_rot
            by solve( !KU( ~id ) @ #vk.4 )
          qed
        next
          case tag1
          solve( !KU( (~r1⊕x) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( ~r1 ) @ #vk.5 )
              case reader1
              by sorry
            qed
          next
            case c_xor_case_2
            solve( !KU( ~r1 ) @ #vk.4 )
              case reader1
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( ~r2 ) @ #vk.5 )
                  case tag1
                  SOLVED // trace found
                qed
              next
                case split_case_2
                by sorry
              next
                case split_case_3
                by sorry
              qed
            qed
          next
            case c_xor_case_3
            by sorry
          next
            case c_xor_case_4
            by sorry
          next
            case coerce
            by sorry
          qed
        qed
      qed
    qed
  qed
qed

lemma recentalive_reader:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry /* removed */

lemma executable:
  exists-trace
  "∃ x #i #j.
    (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j.
  (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
by sorry /* removed */

/* All well-formedness checks were successful. */

end