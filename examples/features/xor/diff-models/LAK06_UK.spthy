theory LAK06_UK
begin

// This theory models LAK06 as taken from [1].
//
// The key chaining as in actual LAK06 is NOT part of this model.
//
// This models specifies strong unlinkability [2] for two sessions of tag and
// reader. Tamarin finds the attack discussed in [2]. Note that, the protocol
// is claimed to be untraceable in [1] for a weaker notion of unlinkability.

// [1] "Attacks on RFID protocols" v1.1 from Aug 6, 2009, by Ton van Deursen and Sasa Radomirovic
// [2] L. Hirschi, D. Baelde and S. Delaune.$
//     A method for verifying privacy-type properties: the unbounded case.
//     In S&P'16, pages 564-581. IEEECSP, 2016.

builtins: xor, hashing, multiset

/*
  R -> T: r0
  T -> R: r1, h(r0 XOR r1 XOR k) 
  R -> R: h(h(r0 XOR r1 XOR k) XOR k XOR r0)

*/

rule setup:
   let id1 = ~k1
       id2 = diff(~k2, ~k1)
   in
   [ Fr( ~k1 )
   , Fr( ~k2 )
   ]
--[ OnlyOnce('setup'), Create(~k1), Create(~k2) ]->
   [ TagRun(id1)
   , ReaderRun(id1)
   , TagRun(id2)
   , ReaderRun(id2)
   ]

rule initiatereader:
  [ReaderRun(~k), Fr(~r0)]
--[ OnlyOnce('initiareader')]->
  [ ReaderState1(~k, ~r0), Out(~r0) ]

rule tag1:
  [ TagRun(~k), Fr(~r1), In(r0) ]
  --[ Running(<'R','T',<~k,r0,~r1>>) ]->
  [ TagState1(~k, ~r1, r0), Out(<~r1, h(r0 XOR ~r1 XOR ~k)>) ]

rule acceptreader:
  [ ReaderState1(~k, ~r0), In(<r1, h(~r0 XOR r1 XOR ~k)>) ]
--[ Commit(<'R','T',<~k,~r0,r1>>)
  , Running(<'T','R',<~k,~r0,r1>>) ]->
  [ Out(h(h(~r0 XOR r1 XOR ~k) XOR ~k XOR ~r0)) ]

rule accepttag:
  [ TagState1(~k, ~r1, r0), In(h(h(r0 XOR ~r1 XOR ~k) XOR ~k XOR r0)) ]
--[ Commit(<'T','R',<~k,r0,~r1>>)
  , FinTag()]->
  [ ]

restriction onylOnce:
  "All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2"


// PROVEN, quick autoproof
lemma executable:
  exists-trace
  " (Ex #i. FinTag()@i)
  & (All x #i1 #i2. OnlyOnce(x)@i1 & OnlyOnce(x)@i2 ==> #i1 = #i2)"

// FALSIFIED, autoproof, takes several minutes though
lemma helpingSecrecy[reuse]:
  "All k #i. 
     Create(k)@i ==> not(Ex #j. K(k)@j)"

end
