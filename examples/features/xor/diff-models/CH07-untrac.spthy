theory CH07_untrac begin

builtins: xor, hashing, multiset
functions: rot/2, left/1, right/1

rule Setup:
   let left = <~k1,~id1>+<~k2,~id2>
      right = <~k1,~id1>+<~k1,~id1>
   in
   [ Fr( ~k1 )
   , Fr( ~id1 )
   , Fr( ~k2 )
   , Fr( ~id2 ) 
   ]
 --[ OnlyOnce( ) ]-> 
   [ Reader( '1'+diff(left,right) )
   , Tag(    '1'+diff(left,right) )
   ]

rule select_tag:
  [ Tag( < ~k, ~id > + z ) ]
  --[ Tag( < ~k, ~id > + z ) ]->
  [ TagRun( ~k, ~id )
  , Tag(z) 
  ]

rule select_reader:
  [ Reader( < ~k, ~id > + z ) ]
  --[ Reader( < ~k, ~id > + z ) ]->
  [ ReaderRun( ~k, ~id )
  , Reader(z) 
  ]

rule reader1:
   [ Fr( ~r1 ) ]
 --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 )
   , Initiated( ~r1 ) 
   ]

rule tag1:
   let hash = h((r1⊕~r2⊕~k)) in 
   [ In( r1 )
   , Fr( ~r2 )
   , TagRun( ~k, ~id )
   ]
 --[ Response( ~k, 'Tag' )
   , Challenge(~r2, 'Tag') 
   ]->
   [ Out( <~r2,left(rot(~id,hash))>)
   , TagState(~k, ~id, r1, ~r2, hash)
   ]

rule reader2:
   [ Initiated( ~r1 )
   , ReaderRun( ~k, ~id )
   , In( <r2, left(rot(~id,hash))> ) 
   ]
 --[ Alive( ~k, 'Tag' )
   , Response(~k, 'Reader') 
   , Eq( h((~r1⊕r2⊕~k)), hash )
   ]->
   [ Out( right(rot(~id,hash)) ) ]

rule tag2:
   [ In( right(rot(~id,hash)) )
   , TagState(~k, ~id, r1, ~r2, hash)
   ]
 --[ Alive( ~k, 'Reader' ) ]->
   [ ]

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"

restriction max_number_of_tags_tag:
  "All a b c d #i. Tag(a+b+c+d)@i ==> F"

restriction max_number_of_tags_tag_reader:
  "All a b c d #i. Reader(a+b+c+d)@i ==> F"

/*
restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
*/

// There should be an attack on this
// FINDS ATTACK AUTOMATICALLY (2017-03-22) [left+right, using a 'zero', but with some clicking can get a "more realistic" attack easily]
lemma recentalive_tag:
  all-traces "∀ x #i. (Alive( x, 'Tag' ) @ #i) ⇒ (∃ y #j #k. Challenge(y, 'Reader') @k & Response( x, 'Tag' ) @ #j & k < j & j < i)"

// FINDS PROOF AUTOMATICALLY (2017-03-22) [left+right]
lemma recentalive_reader:
  all-traces "∀ x #i. (Alive( x, 'Reader' ) @ #i) ⇒ (∃ y #j #k. Challenge(y, 'Tag') @k & Response( x, 'Reader' ) @ #j & k < j & j < i)"

// FINDS PROOF AUTOMATICALLY (2017-03-22) [left+right]
lemma executable:
  exists-trace "∃ x #i #j. (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"

// VERY QUICK HIGH MEMORY USE
// MANUAL EXPLORATION ENDS UP IN A SITUATION WHERE "KU(x)" is solved - see the file CH07-untrac-manual-badstate.spthy
// Observational_equivalence lemma

end