theory KCL07_untrac_nodiff begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) Setup:
   [ Fr( ~k1 ), Fr( ~id1 ), Fr( ~k2 ), Fr( ~id2 ) ]
  --[ OnlyOnce( ) ]->
   [
   Reader( ('1'+<~k1, ~id1>+<~k2, ~id2>) ),
   Tag( ('1'+<~k1, ~id1>+<~k2, ~id2>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) select_tag:
   [ Tag( (z+<~k, ~id>) ) ]
  --[ Tag( (z+<~k, ~id>) ) ]->
   [ TagRun( ~k, ~id ), Tag( z ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) select_reader:
   [ Reader( (z+<~k, ~id>) ) ]
  --[ Reader( (z+<~k, ~id>) ) ]->
   [ ReaderRun( ~k, ~id ), Reader( z ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), TagRun( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ) ]->
   [ Out( <(~id⊕~r2), (~r2⊕h(<r1, ~k>))> ) ]

  /*
  rule (modulo AC) tag1:
     [ In( r1 ), Fr( ~r2 ), TagRun( ~k, ~id ) ]
    --[ Response( ~k, 'Tag' ) ]->
     [ Out( <z, (~r2⊕h(<r1, ~k>))> ) ]
    variants (modulo AC)
    1. ~id   = ~id.17
       ~r2   = ~id.17
       z     = zero
    
    2. ~id   = ~id.17
       ~r2   = ~r2.19
       z     = (~id.17⊕~r2.19)
  */

rule (modulo E) reader2:
   [ Initiated( ~r1 ), ReaderRun( ~k, ~id ), In( xoredhash ) ]
  --[ Alive( ~k, 'Tag' ), Eq( xoredhash, (~id⊕h(<~r1, ~k>)) ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction unique:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction max_number_of_tags_tag:
  "∀ a b c d #i. (Tag( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag_reader:
  "∀ a b c d #i. (Reader( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

lemma recentalive_tag:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable:
  exists-trace
  "∃ x #i #j. (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j. (Alive( x, 'Tag' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
simplify
  case 1
  solve( Initiated( ~r1 ) ▶₀ #i )
    case reader1
    solve( ReaderRun( ~k, ~id ) ▶₁ #i )
      case select_reader
      solve( TagRun( ~k, ~id.1 ) ▶₂ #j )
        case select_tag
        solve( splitEqs(1) )
          case split_case_1
          by sorry
        next
          case split_case_2
          solve( Reader( (z+<~k, ~id>) ) ▶₀ #vr.1 )
            case Setup_case_1
            solve( Tag( (z+<~k, ~id.1>) ) ▶₀ #vr.2 )
              case Setup
              solve( !KU( (~id⊕h(<~r1, ~k>)) ) @ #vk )
                case coerce
                solve( !KD( (~id⊕h(<~r1, ~k>)) ) ▶₀ #vk )
                  case reader1
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    solve( TagRun( ~k.1, ~id.1 ) ▶₂ #vr.4 )
                      case select_tag
                      solve( splitEqs(3) )
                        case split_case_1
                        by contradiction /* forbidden KD-fact */
                      next
                        case split_case_2
                        solve( (#vr.5, 0) ~~> (#vk, 0) )
                          case d_xor_case_1
                          solve( (#vr.7, 0) ~~> (#vk, 0) )
                            case Xor
                            solve( !KU( (~r2.1⊕h(<~r1, ~k>)) ) @ #vk.3 )
                              case coerce
                              solve( !KD( (~r2.1⊕h(<~r1, ~k>)) ) ▶₀ #vk.1 )
                                case reader1
                                by contradiction /* impossible chain */
                              next
                                case tag1
                                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                                  case d_0_fst
                                  by sorry /* removed */
                                next
                                  case d_0_snd
                                  solve( (#vr.9, 0) ~~> (#vk.1, 0) )
                                    case Xor
                                    solve( Tag( (z+<~k, ~id>) ) ▶₀ #vr.6 )
                                      case Setup
                                      solve( !KU( ~r1 ) @ #vk.2 )
                                        case reader1
                                        SOLVED // trace found
                                      next
                                        case tag1
                                        by sorry
                                      qed
                                    next
                                      case select_tag
                                      by sorry
                                    qed
                                  next
                                    case d_xor_case_1
                                    by sorry
                                  next
                                    case d_xor_case_2
                                    by sorry
                                  next
                                    case d_xor_case_3
                                    by sorry
                                  next
                                    case d_xor_case_4
                                    by sorry
                                  next
                                    case d_xor_case_5
                                    by contradiction /* impossible chain */
                                  next
                                    case d_xor_case_6
                                    by sorry
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case d_xor_case_2
                          by sorry
                        next
                          case d_xor_case_3
                          by sorry
                        next
                          case d_xor_case_4
                          by sorry
                        next
                          case d_xor_case_5
                          by contradiction /* impossible chain */
                        next
                          case d_xor_case_6
                          by contradiction /* impossible chain */
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    by sorry
                  qed
                qed
              qed
            next
              case select_tag
              by sorry
            qed
          next
            case Setup_case_2
            by sorry
          next
            case select_reader
            by sorry
          qed
        qed
      qed
    qed
  qed
next
  case 2
  by sorry
qed

/* All well-formedness checks were successful. */

end