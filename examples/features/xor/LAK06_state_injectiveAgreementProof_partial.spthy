theory LAK06_state begin

// Function signature and definition of the equational theory E

builtins: xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

/* looping facts with injective instances: ReaderK/3, TagK/2 */

rule (modulo E) setup:
   [ Fr( ~k ), Fr( ~id ) ]
  --[
  OnlyOnce( '2Users' ), Update( h(h(~k)), 'T' ),
  Update( h(~k), 'R1' ), Update( h(h(~k)), 'R2' ), Setup( )
  ]->
   [
   !Reader( ~id ), !Tag( ~id ), ReaderK( ~id, h(~k), h(h(~k)) ),
   TagK( ~id, h(h(~k)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) initiatereader:
   [ !Reader( ~id ), Fr( ~r0 ) ]
  -->
   [ ReaderState1( ~id, ~r0 ), Out( ~r0 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) tag1:
   [ !Tag( ~id ), TagK( ~id, k ), Fr( ~r1 ), In( r0 ) ]
  --[
  Running( <'R', 'T', k, r0, ~r1> ), Key( k, 'T' ),
  OutH( (~r1⊕k⊕r0) )
  ]->
   [
   TagState1( ~id, k, ~r1, r0, h((~r1⊕k⊕r0)) ),
   Out( <~r1, h((~r1⊕k⊕r0))> ), TagK( ~id, k )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) tag1:
     [ !Tag( ~id ), TagK( ~id, k ), Fr( ~r1 ), In( r0 ) ]
    --[ Running( <'R', 'T', k, r0, ~r1> ), Key( k, 'T' ), OutH( z ) ]->
     [
     TagState1( ~id, k, ~r1, r0, h(z) ), Out( <~r1, h(z)> ),
     TagK( ~id, k )
     ]
    variants (modulo AC)
     1. ~r1   = ~r1.8
        k     = k.9
        r0    = ~r1.8
        z     = k.9
    
     2. ~r1   = ~r1.8
        k     = k.9
        r0    = k.9
        z     = ~r1.8
    
     3. ~r1   = ~r1.8
        k     = k.9
        r0    = zero
        z     = (~r1.8⊕k.9)
    
     4. ~r1   = ~r1.8
        k     = k.9
        r0    = (~r1.8⊕k.9)
        z     = zero
    
     5. ~r1   = ~r1.9
        k     = ~r1.9
        r0    = r0.11
        z     = r0.11
    
     6. ~r1   = ~r1.9
        k     = k.10
        r0    = r0.11
        z     = (~r1.9⊕k.10⊕r0.11)
    
     7. ~r1   = ~r1.9
        k     = zero
        r0    = r0.11
        z     = (~r1.9⊕r0.11)
    
     8. ~r1   = ~r1.9
        k     = (~r1.9⊕r0.11)
        r0    = r0.11
        z     = zero
    
     9. ~r1   = ~r1.10
        k     = k.11
        r0    = (~r1.10⊕k.11⊕z.13)
        z     = z.13
    
    10. ~r1   = ~r1.10
        k     = zero
        r0    = (~r1.10⊕z.13)
        z     = z.13
    
    11. ~r1   = ~r1.10
        k     = (~r1.10⊕r0.12⊕z.13)
        r0    = r0.12
        z     = z.13
    
    12. ~r1   = ~r1.10
        k     = (~r1.10⊕z.13)
        r0    = zero
        z     = z.13
    
    13. ~r1   = ~r1.14
        k     = k.15
        r0    = (~r1.14⊕x.25)
        z     = (k.15⊕x.25)
    
    14. ~r1   = ~r1.14
        k     = k.15
        r0    = (k.15⊕x.25)
        z     = (~r1.14⊕x.25)
    
    15. ~r1   = ~r1.14
        k     = (~r1.14⊕x.25)
        r0    = r0.16
        z     = (r0.16⊕x.25)
    
    16. ~r1   = ~r1.14
        k     = (~r1.14⊕x.25)
        r0    = (z.17⊕x.25)
        z     = z.17
    
    17. ~r1   = ~r1.14
        k     = (r0.16⊕x.25)
        r0    = r0.16
        z     = (~r1.14⊕x.25)
    
    18. ~r1   = ~r1.15
        k     = (z.18⊕x.27)
        r0    = (~r1.15⊕x.27)
        z     = z.18
    
    19. ~r1   = ~r1.15
        k     = (x.25⊕x.26)
        r0    = (x.26⊕x.27)
        z     = (~r1.15⊕x.25⊕x.27)
    
    20. ~r1   = ~r1.16
        k     = (~r1.16⊕x.27⊕x.28)
        r0    = (x.28⊕x.29)
        z     = (x.27⊕x.29)
    
    21. ~r1   = ~r1.16
        k     = (x.27⊕x.28)
        r0    = (~r1.16⊕x.28⊕x.29)
        z     = (x.27⊕x.29)
    // loop breaker: [1]
  */

rule (modulo E) acceptreaderNew:
   [
   ReaderState1( ~id, ~r0 ), In( <r1, h((~r0⊕k⊕r1))> ),
   ReaderK( ~id, k0, k )
   ]
  --[
  Commit( <'R', 'T', k, ~r0, r1> ),
  Running( <'T', 'R', k, ~r0, r1> ), Key( k0, 'R1' ), Key( k, 'R2' ),
  Update( k, 'R1' ), Update( h(k), 'R2' ),
  OutH( h((~r0⊕k⊕h((~r0⊕k⊕r1)))) )
  ]->
   [ Out( h((~r0⊕k⊕h((~r0⊕k⊕r1)))) ), ReaderK( ~id, k, h(k) ) ]

  // loop breaker: [2]
  /*
  rule (modulo AC) acceptreaderNew:
     [ ReaderState1( ~id, ~r0 ), In( <r1, h(z)> ), ReaderK( ~id, k0, k )
     ]
    --[
    Commit( <'R', 'T', k, ~r0, r1> ),
    Running( <'T', 'R', k, ~r0, r1> ), Key( k0, 'R1' ), Key( k, 'R2' ),
    Update( k, 'R1' ), Update( h(k), 'R2' ), OutH( h(z.1) )
    ]->
     [ Out( h(z.1) ), ReaderK( ~id, k, h(k) ) ]
    variants (modulo AC)
     1. ~r0   = ~r0.9
        k     = h(~r0.9)
        r1    = h(~r0.9)
        z     = ~r0.9
        z.1   = ~r0.9
    
     2. ~r0   = ~r0.9
        k     = h(zero)
        r1    = (~r0.9⊕h(zero))
        z     = zero
        z.1   = ~r0.9
    
     3. ~r0   = ~r0.9
        k     = zero
        r1    = ~r0.9
        z     = zero
        z.1   = (~r0.9⊕h(zero))
    
     4. ~r0   = ~r0.9
        k     = zero
        r1    = zero
        z     = ~r0.9
        z.1   = (~r0.9⊕h(~r0.9))
    
     5. ~r0   = ~r0.9
        k     = (~r0.9⊕h(zero))
        r1    = h(zero)
        z     = zero
        z.1   = zero
    
     6. ~r0   = ~r0.10
        k     = k.11
        r1    = ~r0.10
        z     = k.11
        z.1   = (~r0.10⊕k.11⊕h(k.11))
    
     7. ~r0   = ~r0.10
        k     = k.11
        r1    = k.11
        z     = ~r0.10
        z.1   = (~r0.10⊕k.11⊕h(~r0.10))
    
     8. ~r0   = ~r0.10
        k     = k.11
        r1    = zero
        z     = (~r0.10⊕k.11)
        z.1   = (~r0.10⊕k.11⊕h((~r0.10⊕k.11)))
    
     9. ~r0   = ~r0.10
        k     = k.11
        r1    = (~r0.10⊕k.11)
        z     = zero
        z.1   = (~r0.10⊕k.11⊕h(zero))
    
    10. ~r0   = ~r0.12
        k     = ~r0.12
        r1    = r1.15
        z     = r1.15
        z.1   = h(r1.15)
    
    11. ~r0   = ~r0.12
        k     = k.13
        r1    = r1.15
        z     = (~r0.12⊕k.13⊕r1.15)
        z.1   = (~r0.12⊕k.13⊕h((~r0.12⊕k.13⊕r1.15)))
    
    12. ~r0   = ~r0.12
        k     = zero
        r1    = r1.15
        z     = (~r0.12⊕r1.15)
        z.1   = (~r0.12⊕h((~r0.12⊕r1.15)))
    
    13. ~r0   = ~r0.12
        k     = (~r0.12⊕r1.15)
        r1    = r1.15
        z     = zero
        z.1   = (r1.15⊕h(zero))
    
    14. ~r0   = ~r0.13
        k     = k.14
        r1    = (~r0.13⊕k.14⊕z.17)
        z     = z.17
        z.1   = (~r0.13⊕k.14⊕h(z.17))
    
    15. ~r0   = ~r0.13
        k     = h(z.17)
        r1    = (~r0.13⊕z.17⊕h(z.17))
        z     = z.17
        z.1   = ~r0.13
    
    16. ~r0   = ~r0.13
        k     = zero
        r1    = (~r0.13⊕z.17)
        z     = z.17
        z.1   = (~r0.13⊕h(z.17))
    
    17. ~r0   = ~r0.13
        k     = (~r0.13⊕r1.16⊕z.17)
        r1    = r1.16
        z     = z.17
        z.1   = (r1.16⊕z.17⊕h(z.17))
    
    18. ~r0   = ~r0.13
        k     = (~r0.13⊕z.17)
        r1    = zero
        z     = z.17
        z.1   = (z.17⊕h(z.17))
    
    19. ~r0   = ~r0.13
        k     = (~r0.13⊕z.17⊕h(z.17))
        r1    = h(z.17)
        z     = z.17
        z.1   = z.17
    
    20. ~r0   = ~r0.13
        k     = (~r0.13⊕h(z.17))
        r1    = (z.17⊕h(z.17))
        z     = z.17
        z.1   = zero
    
    21. ~r0   = ~r0.13
        k     = (z.17⊕h(z.17))
        r1    = (~r0.13⊕h(z.17))
        z     = z.17
        z.1   = (~r0.13⊕z.17)
    
    22. ~r0   = ~r0.14
        k     = (~r0.14⊕z.19⊕h(z.18))
        r1    = (z.18⊕z.19⊕h(z.18))
        z     = z.18
        z.1   = z.19
    
    23. ~r0   = ~r0.14
        k     = (~r0.14⊕z.19⊕h(zero))
        r1    = (z.19⊕h(zero))
        z     = zero
        z.1   = z.19
    
    24. ~r0   = ~r0.40
        k     = k.41
        r1    = (~r0.40⊕x.77)
        z     = (k.41⊕x.77)
        z.1   = (~r0.40⊕k.41⊕h((k.41⊕x.77)))
    
    25. ~r0   = ~r0.40
        k     = k.41
        r1    = (k.41⊕x.77)
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕k.41⊕h((~r0.40⊕x.77)))
    
    26. ~r0   = ~r0.40
        k     = h((~r0.40⊕x.77))
        r1    = (x.77⊕h((~r0.40⊕x.77)))
        z     = (~r0.40⊕x.77)
        z.1   = ~r0.40
    
    27. ~r0   = ~r0.40
        k     = (~r0.40⊕x.77)
        r1    = r1.43
        z     = (r1.43⊕x.77)
        z.1   = (x.77⊕h((r1.43⊕x.77)))
    
    28. ~r0   = ~r0.40
        k     = (~r0.40⊕x.77)
        r1    = (z.44⊕x.77)
        z     = z.44
        z.1   = (x.77⊕h(z.44))
    
    29. ~r0   = ~r0.40
        k     = (r1.43⊕x.77)
        r1    = r1.43
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕r1.43⊕x.77⊕h((~r0.40⊕x.77)))
    
    30. ~r0   = ~r0.40
        k     = (x.77⊕h(~r0.40))
        r1    = (x.77⊕h(~r0.40))
        z     = ~r0.40
        z.1   = (~r0.40⊕x.77)
    
    31. ~r0   = ~r0.40
        k     = (x.77⊕h(zero))
        r1    = (~r0.40⊕x.77⊕h(zero))
        z     = zero
        z.1   = (~r0.40⊕x.77)
    
    32. ~r0   = ~r0.40
        k     = (x.77⊕h((~r0.40⊕x.77)))
        r1    = h((~r0.40⊕x.77))
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕x.77)
    
    33. ~r0   = ~r0.41
        k     = (~r0.41⊕z.45⊕x.79⊕h(z.45))
        r1    = (x.79⊕h(z.45))
        z     = z.45
        z.1   = (z.45⊕x.79)
    
    34. ~r0   = ~r0.41
        k     = (~r0.41⊕z.46⊕h((z.46⊕x.79)))
        r1    = (x.79⊕h((z.46⊕x.79)))
        z     = (z.46⊕x.79)
        z.1   = z.46
    
    35. ~r0   = ~r0.41
        k     = (z.45⊕x.79)
        r1    = (~r0.41⊕x.79)
        z     = z.45
        z.1   = (~r0.41⊕z.45⊕x.79⊕h(z.45))
    
    36. ~r0   = ~r0.41
        k     = (z.45⊕x.79⊕h(z.45))
        r1    = (~r0.41⊕x.79⊕h(z.45))
        z     = z.45
        z.1   = (~r0.41⊕z.45⊕x.79)
    
    37. ~r0   = ~r0.41
        k     = (x.77⊕x.78)
        r1    = (x.78⊕x.79)
        z     = (~r0.41⊕x.77⊕x.79)
        z.1   = (~r0.41⊕x.77⊕x.78⊕h((~r0.41⊕x.77⊕x.79)))
    
    38. ~r0   = ~r0.41
        k     = (x.78⊕x.79⊕h((~r0.41⊕x.78)))
        r1    = (x.79⊕h((~r0.41⊕x.78)))
        z     = (~r0.41⊕x.78)
        z.1   = (~r0.41⊕x.78⊕x.79)
    
    39. ~r0   = ~r0.41
        k     = (x.78⊕h((~r0.41⊕x.78⊕x.79)))
        r1    = (x.79⊕h((~r0.41⊕x.78⊕x.79)))
        z     = (~r0.41⊕x.78⊕x.79)
        z.1   = (~r0.41⊕x.78)
    
    40. ~r0   = ~r0.41
        k     = (x.78⊕h((x.78⊕x.79)))
        r1    = (~r0.41⊕x.79⊕h((x.78⊕x.79)))
        z     = (x.78⊕x.79)
        z.1   = (~r0.41⊕x.78)
    
    41. ~r0   = ~r0.41
        k     = (x.79⊕h(z.45))
        r1    = (~r0.41⊕z.45⊕x.79⊕h(z.45))
        z     = z.45
        z.1   = (~r0.41⊕x.79)
    
    42. ~r0   = ~r0.41
        k     = (x.79⊕h((~r0.41⊕x.78)))
        r1    = (x.78⊕x.79⊕h((~r0.41⊕x.78)))
        z     = (~r0.41⊕x.78)
        z.1   = (~r0.41⊕x.79)
    
    43. ~r0   = ~r0.42
        k     = (~r0.42⊕x.79⊕x.80)
        r1    = (x.80⊕x.81)
        z     = (x.79⊕x.81)
        z.1   = (x.79⊕x.80⊕h((x.79⊕x.81)))
    
    44. ~r0   = ~r0.42
        k     = (~r0.42⊕x.79⊕x.81⊕h((x.79⊕x.80)))
        r1    = (x.80⊕x.81⊕h((x.79⊕x.80)))
        z     = (x.79⊕x.80)
        z.1   = (x.79⊕x.81)
    
    45. ~r0   = ~r0.42
        k     = (x.79⊕x.80)
        r1    = (~r0.42⊕x.80⊕x.81)
        z     = (x.79⊕x.81)
        z.1   = (~r0.42⊕x.79⊕x.80⊕h((x.79⊕x.81)))
    
    46. ~r0   = ~r0.42
        k     = (x.79⊕x.81⊕h((~r0.42⊕x.79⊕x.80)))
        r1    = (x.80⊕x.81⊕h((~r0.42⊕x.79⊕x.80)))
        z     = (~r0.42⊕x.79⊕x.80)
        z.1   = (~r0.42⊕x.79⊕x.81)
    
    47. ~r0   = ~r0.42
        k     = (x.79⊕x.81⊕h((x.79⊕x.80)))
        r1    = (~r0.42⊕x.80⊕x.81⊕h((x.79⊕x.80)))
        z     = (x.79⊕x.80)
        z.1   = (~r0.42⊕x.79⊕x.81)
    // loop breaker: [2]
  */

rule (modulo E) acceptreaderOld:
   [
   ReaderState1( ~id, ~r0 ), In( <r1, h((~r0⊕k0⊕r1))> ),
   ReaderK( ~id, k0, k )
   ]
  --[
  Commit( <'R', 'T', k0, ~r0, r1> ),
  Running( <'T', 'R', k0, ~r0, r1> ), Key( k0, 'R1' ),
  Key( k, 'R2' ), OutH( h((~r0⊕k0⊕h((~r0⊕k0⊕r1)))) )
  ]->
   [ Out( h((~r0⊕k0⊕h((~r0⊕k0⊕r1)))) ), ReaderK( ~id, k0, k ) ]

  // loop breaker: [2]
  /*
  rule (modulo AC) acceptreaderOld:
     [ ReaderState1( ~id, ~r0 ), In( <r1, h(z)> ), ReaderK( ~id, k0, k )
     ]
    --[
    Commit( <'R', 'T', k0, ~r0, r1> ),
    Running( <'T', 'R', k0, ~r0, r1> ), Key( k0, 'R1' ),
    Key( k, 'R2' ), OutH( h(z.1) )
    ]->
     [ Out( h(z.1) ), ReaderK( ~id, k0, k ) ]
    variants (modulo AC)
     1. ~r0   = ~r0.9
        k0    = h(~r0.9)
        r1    = h(~r0.9)
        z     = ~r0.9
        z.1   = ~r0.9
    
     2. ~r0   = ~r0.9
        k0    = h(zero)
        r1    = (~r0.9⊕h(zero))
        z     = zero
        z.1   = ~r0.9
    
     3. ~r0   = ~r0.9
        k0    = zero
        r1    = ~r0.9
        z     = zero
        z.1   = (~r0.9⊕h(zero))
    
     4. ~r0   = ~r0.9
        k0    = zero
        r1    = zero
        z     = ~r0.9
        z.1   = (~r0.9⊕h(~r0.9))
    
     5. ~r0   = ~r0.9
        k0    = (~r0.9⊕h(zero))
        r1    = h(zero)
        z     = zero
        z.1   = zero
    
     6. ~r0   = ~r0.11
        k0    = k0.13
        r1    = ~r0.11
        z     = k0.13
        z.1   = (~r0.11⊕k0.13⊕h(k0.13))
    
     7. ~r0   = ~r0.11
        k0    = k0.13
        r1    = k0.13
        z     = ~r0.11
        z.1   = (~r0.11⊕k0.13⊕h(~r0.11))
    
     8. ~r0   = ~r0.11
        k0    = k0.13
        r1    = zero
        z     = (~r0.11⊕k0.13)
        z.1   = (~r0.11⊕k0.13⊕h((~r0.11⊕k0.13)))
    
     9. ~r0   = ~r0.11
        k0    = k0.13
        r1    = (~r0.11⊕k0.13)
        z     = zero
        z.1   = (~r0.11⊕k0.13⊕h(zero))
    
    10. ~r0   = ~r0.12
        k0    = ~r0.12
        r1    = r1.15
        z     = r1.15
        z.1   = h(r1.15)
    
    11. ~r0   = ~r0.12
        k0    = k0.14
        r1    = r1.15
        z     = (~r0.12⊕k0.14⊕r1.15)
        z.1   = (~r0.12⊕k0.14⊕h((~r0.12⊕k0.14⊕r1.15)))
    
    12. ~r0   = ~r0.12
        k0    = zero
        r1    = r1.15
        z     = (~r0.12⊕r1.15)
        z.1   = (~r0.12⊕h((~r0.12⊕r1.15)))
    
    13. ~r0   = ~r0.12
        k0    = (~r0.12⊕r1.15)
        r1    = r1.15
        z     = zero
        z.1   = (r1.15⊕h(zero))
    
    14. ~r0   = ~r0.13
        k0    = k0.15
        r1    = (~r0.13⊕k0.15⊕z.17)
        z     = z.17
        z.1   = (~r0.13⊕k0.15⊕h(z.17))
    
    15. ~r0   = ~r0.13
        k0    = h(z.17)
        r1    = (~r0.13⊕z.17⊕h(z.17))
        z     = z.17
        z.1   = ~r0.13
    
    16. ~r0   = ~r0.13
        k0    = zero
        r1    = (~r0.13⊕z.17)
        z     = z.17
        z.1   = (~r0.13⊕h(z.17))
    
    17. ~r0   = ~r0.13
        k0    = (~r0.13⊕r1.16⊕z.17)
        r1    = r1.16
        z     = z.17
        z.1   = (r1.16⊕z.17⊕h(z.17))
    
    18. ~r0   = ~r0.13
        k0    = (~r0.13⊕z.17)
        r1    = zero
        z     = z.17
        z.1   = (z.17⊕h(z.17))
    
    19. ~r0   = ~r0.13
        k0    = (~r0.13⊕z.17⊕h(z.17))
        r1    = h(z.17)
        z     = z.17
        z.1   = z.17
    
    20. ~r0   = ~r0.13
        k0    = (~r0.13⊕h(z.17))
        r1    = (z.17⊕h(z.17))
        z     = z.17
        z.1   = zero
    
    21. ~r0   = ~r0.13
        k0    = (z.17⊕h(z.17))
        r1    = (~r0.13⊕h(z.17))
        z     = z.17
        z.1   = (~r0.13⊕z.17)
    
    22. ~r0   = ~r0.14
        k0    = (~r0.14⊕z.19⊕h(z.18))
        r1    = (z.18⊕z.19⊕h(z.18))
        z     = z.18
        z.1   = z.19
    
    23. ~r0   = ~r0.14
        k0    = (~r0.14⊕z.19⊕h(zero))
        r1    = (z.19⊕h(zero))
        z     = zero
        z.1   = z.19
    
    24. ~r0   = ~r0.40
        k0    = k0.42
        r1    = (~r0.40⊕x.77)
        z     = (k0.42⊕x.77)
        z.1   = (~r0.40⊕k0.42⊕h((k0.42⊕x.77)))
    
    25. ~r0   = ~r0.40
        k0    = k0.42
        r1    = (k0.42⊕x.77)
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕k0.42⊕h((~r0.40⊕x.77)))
    
    26. ~r0   = ~r0.40
        k0    = h((~r0.40⊕x.77))
        r1    = (x.77⊕h((~r0.40⊕x.77)))
        z     = (~r0.40⊕x.77)
        z.1   = ~r0.40
    
    27. ~r0   = ~r0.40
        k0    = (~r0.40⊕x.77)
        r1    = r1.43
        z     = (r1.43⊕x.77)
        z.1   = (x.77⊕h((r1.43⊕x.77)))
    
    28. ~r0   = ~r0.40
        k0    = (~r0.40⊕x.77)
        r1    = (z.44⊕x.77)
        z     = z.44
        z.1   = (x.77⊕h(z.44))
    
    29. ~r0   = ~r0.40
        k0    = (r1.43⊕x.77)
        r1    = r1.43
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕r1.43⊕x.77⊕h((~r0.40⊕x.77)))
    
    30. ~r0   = ~r0.40
        k0    = (x.77⊕h(~r0.40))
        r1    = (x.77⊕h(~r0.40))
        z     = ~r0.40
        z.1   = (~r0.40⊕x.77)
    
    31. ~r0   = ~r0.40
        k0    = (x.77⊕h(zero))
        r1    = (~r0.40⊕x.77⊕h(zero))
        z     = zero
        z.1   = (~r0.40⊕x.77)
    
    32. ~r0   = ~r0.40
        k0    = (x.77⊕h((~r0.40⊕x.77)))
        r1    = h((~r0.40⊕x.77))
        z     = (~r0.40⊕x.77)
        z.1   = (~r0.40⊕x.77)
    
    33. ~r0   = ~r0.41
        k0    = (~r0.41⊕z.45⊕x.79⊕h(z.45))
        r1    = (x.79⊕h(z.45))
        z     = z.45
        z.1   = (z.45⊕x.79)
    
    34. ~r0   = ~r0.41
        k0    = (~r0.41⊕z.46⊕h((z.46⊕x.79)))
        r1    = (x.79⊕h((z.46⊕x.79)))
        z     = (z.46⊕x.79)
        z.1   = z.46
    
    35. ~r0   = ~r0.41
        k0    = (z.45⊕x.79)
        r1    = (~r0.41⊕x.79)
        z     = z.45
        z.1   = (~r0.41⊕z.45⊕x.79⊕h(z.45))
    
    36. ~r0   = ~r0.41
        k0    = (z.45⊕x.79⊕h(z.45))
        r1    = (~r0.41⊕x.79⊕h(z.45))
        z     = z.45
        z.1   = (~r0.41⊕z.45⊕x.79)
    
    37. ~r0   = ~r0.41
        k0    = (x.77⊕x.78)
        r1    = (x.78⊕x.79)
        z     = (~r0.41⊕x.77⊕x.79)
        z.1   = (~r0.41⊕x.77⊕x.78⊕h((~r0.41⊕x.77⊕x.79)))
    
    38. ~r0   = ~r0.41
        k0    = (x.78⊕x.79⊕h((~r0.41⊕x.78)))
        r1    = (x.79⊕h((~r0.41⊕x.78)))
        z     = (~r0.41⊕x.78)
        z.1   = (~r0.41⊕x.78⊕x.79)
    
    39. ~r0   = ~r0.41
        k0    = (x.78⊕h((~r0.41⊕x.78⊕x.79)))
        r1    = (x.79⊕h((~r0.41⊕x.78⊕x.79)))
        z     = (~r0.41⊕x.78⊕x.79)
        z.1   = (~r0.41⊕x.78)
    
    40. ~r0   = ~r0.41
        k0    = (x.78⊕h((x.78⊕x.79)))
        r1    = (~r0.41⊕x.79⊕h((x.78⊕x.79)))
        z     = (x.78⊕x.79)
        z.1   = (~r0.41⊕x.78)
    
    41. ~r0   = ~r0.41
        k0    = (x.79⊕h(z.45))
        r1    = (~r0.41⊕z.45⊕x.79⊕h(z.45))
        z     = z.45
        z.1   = (~r0.41⊕x.79)
    
    42. ~r0   = ~r0.41
        k0    = (x.79⊕h((~r0.41⊕x.78)))
        r1    = (x.78⊕x.79⊕h((~r0.41⊕x.78)))
        z     = (~r0.41⊕x.78)
        z.1   = (~r0.41⊕x.79)
    
    43. ~r0   = ~r0.42
        k0    = (~r0.42⊕x.79⊕x.80)
        r1    = (x.80⊕x.81)
        z     = (x.79⊕x.81)
        z.1   = (x.79⊕x.80⊕h((x.79⊕x.81)))
    
    44. ~r0   = ~r0.42
        k0    = (~r0.42⊕x.79⊕x.81⊕h((x.79⊕x.80)))
        r1    = (x.80⊕x.81⊕h((x.79⊕x.80)))
        z     = (x.79⊕x.80)
        z.1   = (x.79⊕x.81)
    
    45. ~r0   = ~r0.42
        k0    = (x.79⊕x.80)
        r1    = (~r0.42⊕x.80⊕x.81)
        z     = (x.79⊕x.81)
        z.1   = (~r0.42⊕x.79⊕x.80⊕h((x.79⊕x.81)))
    
    46. ~r0   = ~r0.42
        k0    = (x.79⊕x.81⊕h((~r0.42⊕x.79⊕x.80)))
        r1    = (x.80⊕x.81⊕h((~r0.42⊕x.79⊕x.80)))
        z     = (~r0.42⊕x.79⊕x.80)
        z.1   = (~r0.42⊕x.79⊕x.81)
    
    47. ~r0   = ~r0.42
        k0    = (x.79⊕x.81⊕h((x.79⊕x.80)))
        r1    = (~r0.42⊕x.80⊕x.81⊕h((x.79⊕x.80)))
        z     = (x.79⊕x.80)
        z.1   = (~r0.42⊕x.79⊕x.81)
    // loop breaker: [2]
  */

rule (modulo E) accepttag:
   [
   TagState1( ~id, k, ~r1, r0, m ), In( h((k⊕m⊕r0)) ), TagK( ~id, k )
   ]
  --[
  Commit( <'T', 'R', k, r0, ~r1> ), FinTag( ), Key( k, 'T' ),
  Update( h(k), 'T' )
  ]->
   [ TagK( ~id, h(k) ) ]

  // loop breaker: [2]
  /*
  rule (modulo AC) accepttag:
     [ TagState1( ~id, k, ~r1, r0, m ), In( h(z) ), TagK( ~id, k ) ]
    --[
    Commit( <'T', 'R', k, r0, ~r1> ), FinTag( ), Key( k, 'T' ),
    Update( h(k), 'T' )
    ]->
     [ TagK( ~id, h(k) ) ]
    variants (modulo AC)
     1. k     = k.9
        m     = m.10
        r0    = k.9
        z     = m.10
    
     2. k     = k.9
        m     = m.10
        r0    = m.10
        z     = k.9
    
     3. k     = k.9
        m     = m.10
        r0    = zero
        z     = (k.9⊕m.10)
    
     4. k     = k.9
        m     = m.10
        r0    = (k.9⊕m.10)
        z     = zero
    
     5. k     = k.10
        m     = k.10
        r0    = r0.12
        z     = r0.12
    
     6. k     = k.10
        m     = m.11
        r0    = r0.12
        z     = (k.10⊕m.11⊕r0.12)
    
     7. k     = k.10
        m     = zero
        r0    = r0.12
        z     = (k.10⊕r0.12)
    
     8. k     = k.10
        m     = (k.10⊕r0.12)
        r0    = r0.12
        z     = zero
    
     9. k     = k.11
        m     = m.12
        r0    = (k.11⊕m.12⊕z.14)
        z     = z.14
    
    10. k     = k.11
        m     = zero
        r0    = (k.11⊕z.14)
        z     = z.14
    
    11. k     = k.11
        m     = (k.11⊕r0.13⊕z.14)
        r0    = r0.13
        z     = z.14
    
    12. k     = k.11
        m     = (k.11⊕z.14)
        r0    = zero
        z     = z.14
    
    13. k     = k.15
        m     = m.16
        r0    = (k.15⊕x.26)
        z     = (m.16⊕x.26)
    
    14. k     = k.15
        m     = m.16
        r0    = (m.16⊕x.26)
        z     = (k.15⊕x.26)
    
    15. k     = k.15
        m     = (k.15⊕x.26)
        r0    = r0.17
        z     = (r0.17⊕x.26)
    
    16. k     = k.15
        m     = (k.15⊕x.26)
        r0    = (z.18⊕x.26)
        z     = z.18
    
    17. k     = k.15
        m     = (r0.17⊕x.26)
        r0    = r0.17
        z     = (k.15⊕x.26)
    
    18. k     = k.16
        m     = (z.19⊕x.28)
        r0    = (k.16⊕x.28)
        z     = z.19
    
    19. k     = k.16
        m     = (x.26⊕x.27)
        r0    = (x.27⊕x.28)
        z     = (k.16⊕x.26⊕x.28)
    
    20. k     = k.17
        m     = (k.17⊕x.28⊕x.29)
        r0    = (x.29⊕x.30)
        z     = (x.28⊕x.30)
    
    21. k     = k.17
        m     = (x.28⊕x.29)
        r0    = (k.17⊕x.29⊕x.30)
        z     = (x.28⊕x.30)
    
    22. k     = zero
        m     = m.9
        r0    = r0.10
        z     = (m.9⊕r0.10)
    
    23. k     = zero
        m     = m.10
        r0    = (m.10⊕z.12)
        z     = z.12
    
    24. k     = zero
        m     = (r0.9⊕z.10)
        r0    = r0.9
        z     = z.10
    
    25. k     = zero
        m     = (x.10⊕x.11)
        r0    = (x.11⊕x.12)
        z     = (x.10⊕x.12)
    
    26. k     = (m.9⊕r0.10)
        m     = m.9
        r0    = r0.10
        z     = zero
    
    27. k     = (r0.9⊕z.10)
        m     = zero
        r0    = r0.9
        z     = z.10
    
    28. k     = (m.10⊕r0.11⊕z.12)
        m     = m.10
        r0    = r0.11
        z     = z.12
    
    29. k     = (m.10⊕z.12)
        m     = m.10
        r0    = zero
        z     = z.12
    
    30. k     = (x.10⊕x.11)
        m     = zero
        r0    = (x.11⊕x.12)
        z     = (x.10⊕x.12)
    
    31. k     = (x.10⊕x.11)
        m     = (x.10⊕x.12)
        r0    = (x.11⊕x.12)
        z     = zero
    
    32. k     = (x.10⊕x.11)
        m     = (x.11⊕x.12)
        r0    = zero
        z     = (x.10⊕x.12)
    
    33. k     = (x.11⊕x.12)
        m     = (x.11⊕x.13)
        r0    = (x.12⊕x.14)
        z     = (x.13⊕x.14)
    
    34. k     = (x.11⊕x.12)
        m     = (x.12⊕x.13)
        r0    = (x.13⊕x.14)
        z     = (x.11⊕x.14)
    
    35. k     = (x.11⊕x.12)
        m     = (x.13⊕x.14)
        r0    = (x.12⊕x.14)
        z     = (x.11⊕x.13)
    
    36. k     = (x.12⊕x.13)
        m     = (x.12⊕x.14⊕x.15)
        r0    = (x.13⊕x.15⊕x.16)
        z     = (x.14⊕x.16)
    
    37. k     = (x.12⊕x.13)
        m     = (x.13⊕x.14⊕x.15)
        r0    = (x.15⊕x.16)
        z     = (x.12⊕x.14⊕x.16)
    
    38. k     = (x.12⊕x.13)
        m     = (x.14⊕x.15)
        r0    = (x.13⊕x.15⊕x.16)
        z     = (x.12⊕x.14⊕x.16)
    
    39. k     = (x.12⊕x.13⊕x.14)
        m     = (x.13⊕x.15)
        r0    = (x.14⊕x.15⊕x.16)
        z     = (x.12⊕x.16)
    
    40. k     = (x.12⊕x.13⊕x.14)
        m     = (x.13⊕x.15)
        r0    = (x.14⊕x.16)
        z     = (x.12⊕x.15⊕x.16)
    
    41. k     = (x.12⊕x.13⊕x.14)
        m     = (x.13⊕x.15⊕x.16)
        r0    = (x.14⊕x.16)
        z     = (x.12⊕x.15)
    
    42. k     = (r0.13⊕x.20)
        m     = (z.14⊕x.20)
        r0    = r0.13
        z     = z.14
    
    43. k     = (x.13⊕x.14⊕x.15)
        m     = (x.14⊕x.16⊕x.17)
        r0    = (x.15⊕x.17⊕x.18)
        z     = (x.13⊕x.16⊕x.18)
    
    44. k     = (m.14⊕x.23)
        m     = m.14
        r0    = r0.15
        z     = (r0.15⊕x.23)
    
    45. k     = (m.14⊕x.23)
        m     = m.14
        r0    = (z.16⊕x.23)
        z     = z.16
    
    46. k     = (z.14⊕x.19⊕x.20)
        m     = (x.19⊕x.21)
        r0    = (x.20⊕x.21)
        z     = z.14
    
    47. k     = (r0.15⊕x.22⊕x.23)
        m     = (x.23⊕x.24)
        r0    = r0.15
        z     = (x.22⊕x.24)
    
    48. k     = (r0.15⊕x.23)
        m     = m.14
        r0    = r0.15
        z     = (m.14⊕x.23)
    
    49. k     = (z.15⊕x.22)
        m     = (r0.14⊕x.22)
        r0    = r0.14
        z     = z.15
    
    50. k     = (m.16⊕x.25⊕x.26)
        m     = m.16
        r0    = (x.26⊕x.27)
        z     = (x.25⊕x.27)
    
    51. k     = (x.17⊕x.18)
        m     = (x.17⊕x.19)
        r0    = (z.13⊕x.18⊕x.19)
        z     = z.13
    
    52. k     = (z.17⊕x.25)
        m     = m.15
        r0    = (m.15⊕x.25)
        z     = z.17
    
    53. k     = (x.18⊕x.19)
        m     = (z.14⊕x.18⊕x.21)
        r0    = (x.19⊕x.21)
        z     = z.14
    
    54. k     = (x.20⊕x.21)
        m     = (x.21⊕x.22)
        r0    = r0.14
        z     = (r0.14⊕x.20⊕x.22)
    
    55. k     = (x.22⊕x.23)
        m     = (r0.15⊕x.23⊕x.24)
        r0    = r0.15
        z     = (x.22⊕x.24)
    
    56. k     = (x.23⊕x.24)
        m     = m.15
        r0    = (x.24⊕x.25)
        z     = (m.15⊕x.23⊕x.25)
    
    57. k     = (x.25⊕x.26)
        m     = m.16
        r0    = (m.16⊕x.26⊕x.27)
        z     = (x.25⊕x.27)
    // loop breaker: [2]
  */

restriction onylOnce:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

lemma helpingUpdateKey [use_induction, reuse]:
  all-traces
  "∀ k r #i.
    (Key( k, r ) @ #i) ⇒ (∃ #j. (Update( k, r ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ k r #i.
  (Key( k, r ) @ #i) ∧ ∀ #j. (Update( k, r ) @ #j) ⇒ ¬(#j < #i)"
*/
by sorry

lemma helpingStackHash [use_induction, reuse]:
  all-traces
  "(∀ k r #i. (Key( k, r ) @ #i) ⇒ (∃ k0. k = h(k0))) ∧
   (∀ k r #i. (Update( k, r ) @ #i) ⇒ (∃ k0. k = h(k0)))"
/*
guarded formula characterizing all counter-examples:
"((∃ k r #i. (Key( k, r ) @ #i) ∧ ∀ k0. (k = h(k0)) ⇒ ⊥) ∨
  (∃ k r #i. (Update( k, r ) @ #i) ∧ ∀ k0. (k = h(k0)) ⇒ ⊥))"
*/
by sorry

lemma helpingSecrecy [use_induction, reuse]:
  all-traces
  "∀ k r #i. (Key( k, r ) @ #i) ⇒ (¬(∃ #j. !KU( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k r #i. (Key( k, r ) @ #i) ∧ ∃ #j. (!KU( k ) @ #j)"
*/
by sorry

lemma executable:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2.
   (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
by sorry

lemma noninjectiveagreementTAG [use_induction]:
  all-traces
  "∀ t #i.
    (Commit( <'T', 'R', t> ) @ #i) ⇒
    (∃ #j. Running( <'T', 'R', t> ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (Commit( <'T', 'R', t> ) @ #i)
 ∧
  ∀ #j. (Running( <'T', 'R', t> ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Running( <'T', 'R', t> ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( Commit( <'T', 'R', t> ) @ #i )
      case accepttag
      solve( TagState1( ~id, h(k0), ~r1, r0, m ) ▶₀ #i )
        case tag1
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(r0) ) @ #vk )
            case acceptreaderNew
            by solve( Update( h(k0), 'T' ) @ #j )
          next
            case acceptreaderOld
            by solve( Update( h(k0), 'T' ) @ #j )
          next
            case c_h
            solve( splitEqs(1) )
              case split_case_01
              by contradiction /* from formulas */
            next
              case split_case_02
              by solve( Update( h(zero), 'T' ) @ #j )
            next
              case split_case_03
              by contradiction /* from formulas */
            next
              case split_case_04
              solve( !KD( (~r1⊕k0⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_05
              solve( !KD( (k0⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_06
              solve( !KD( (~r1⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_07
              by contradiction /* from formulas */
            next
              case split_case_08
              by contradiction /* from formulas */
            next
              case split_case_09
              solve( !KD( (x⊕h((~r1⊕x))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_10
              by contradiction /* from formulas */
            qed
          next
            case tag1
            solve( splitEqs(1) )
              case split_case_01
              by contradiction /* from formulas */
            next
              case split_case_02
              solve( !KD( (~r1⊕k0⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_03
              solve( !KD( (k0⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_04
              solve( !KD( (~r1⊕h(k0)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_05
              by contradiction /* from formulas */
            next
              case split_case_06
              by contradiction /* from formulas */
            next
              case split_case_07
              solve( !KD( (~r1⊕h(zero)) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_08
              by contradiction /* from formulas */
            next
              case split_case_09
              solve( !KD( (x⊕h((~r1⊕x))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_10
              by contradiction /* from formulas */
            qed
          qed
        next
          case split_case_2
          solve( !KU( h((r0⊕h(k0)⊕h(z))) ) @ #vk )
            case acceptreaderNew
            solve( splitEqs(1) )
              case split
              solve( splitEqs(3) )
                case split_case_01
                by contradiction /* from formulas */
              next
                case split_case_02
                by contradiction /* from formulas */
              next
                case split_case_03
                by contradiction /* from formulas */
              next
                case split_case_04
                by contradiction /* from formulas */
              next
                case split_case_05
                by contradiction /* from formulas */
              next
                case split_case_06
                by contradiction /* from formulas */
              next
                case split_case_07
                by contradiction /* from formulas */
              next
                case split_case_08
                by contradiction /* from formulas */
              next
                case split_case_09
                by contradiction /* from formulas */
              next
                case split_case_10
                by contradiction /* from formulas */
              next
                case split_case_11
                by contradiction /* from formulas */
              qed
            qed
          next
            case acceptreaderOld
            solve( splitEqs(1) )
              case split
              solve( splitEqs(3) )
                case split_case_01
                by contradiction /* from formulas */
              next
                case split_case_02
                by contradiction /* from formulas */
              next
                case split_case_03
                by contradiction /* from formulas */
              next
                case split_case_04
                by contradiction /* from formulas */
              next
                case split_case_05
                by contradiction /* from formulas */
              next
                case split_case_06
                by contradiction /* from formulas */
              next
                case split_case_07
                by contradiction /* from formulas */
              next
                case split_case_08
                by contradiction /* from formulas */
              next
                case split_case_09
                by contradiction /* from formulas */
              next
                case split_case_10
                by contradiction /* from formulas */
              next
                case split_case_11
                by contradiction /* from formulas */
              qed
            qed
          next
            case c_h_case_1
            solve( splitEqs(1) )
              case split_case_1
              solve( !KD( (~r1⊕h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_2
              solve( !KD( (r0⊕h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_3
              solve( !KD( (~r1⊕x⊕h(k0)⊕h((x⊕h(k0)))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_4
              solve( !KD( (~r1⊕x⊕h(k0)⊕h((x⊕h(k0)))) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
                qed
              qed
            qed
          next
            case c_h_case_2
            solve( !KD( (h(k0)⊕h(z)) ) ▶₀ #vk.1 )
              case acceptreaderNew
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case acceptreaderOld
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.1, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
              qed
            qed
          next
            case c_h_case_3
            by contradiction /* from formulas */
          next
            case c_h_case_4
            solve( !KD( (r0⊕h(k0)) ) ▶₀ #vk.1 )
              case acceptreaderNew
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case acceptreaderOld
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.1, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
              qed
            qed
          next
            case c_h_case_5
            by contradiction /* from formulas */
          next
            case tag1
            solve( splitEqs(1) )
              case split_case_1
              solve( splitEqs(3) )
                case split_case_01
                solve( !KD( (~r1⊕~r1.1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_02
                solve( !KD( (~r1.1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_03
                solve( !KD( (~r1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_04
                solve( !KU( h(h(k0)) ) @ #vk.4 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_05
                solve( !KU( h(h(k0)) ) @ #vk.3 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KU( ~r1 ) @ #vk.2 )
                    case tag1
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case split_case_06
                solve( !KD( (~r1⊕~r1.1⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_07
                solve( !KD( (~r1.1⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_08
                solve( !KD( (~r1⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_09
                by contradiction /* from formulas */
              next
                case split_case_10
                by contradiction /* from formulas */
              next
                case split_case_11
                solve( !KD( (~r1⊕~r1.1⊕h(k0)⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_12
                solve( !KD( (~r1.1⊕h(k0)⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_13
                solve( !KD( (~r1⊕h(k0)⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_14
                solve( !KD( (h(k0)⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_15
                solve( !KD( (h(k0)⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_16
                by contradiction /* from formulas */
              next
                case split_case_17
                solve( !KD( (~r1.1⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_18
                by contradiction /* from formulas */
              next
                case split_case_19
                solve( !KD( (~r1⊕h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_20
                solve( !KD( (h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_21
                solve( !KD( (h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_22
                by contradiction /* from formulas */
              next
                case split_case_23
                solve( !KD( (h(k0.1)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_24
                by contradiction /* from formulas */
              next
                case split_case_25
                by contradiction /* from formulas */
              next
                case split_case_26
                by contradiction /* from formulas */
              next
                case split_case_27
                solve( !KD( (~r1.1⊕h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_28
                by contradiction /* from formulas */
              next
                case split_case_29
                solve( !KD( (~r1⊕h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_30
                solve( !KD( (h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_31
                solve( !KD( (h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_32
                by contradiction /* from formulas */
              next
                case split_case_33
                solve( !KD( (h(k0)⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_34
                by contradiction /* from formulas */
              next
                case split_case_35
                by contradiction /* from formulas */
              next
                case split_case_36
                solve( !KD( (~r1⊕~r1.1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_37
                solve( !KD( (~r1.1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_38
                solve( !KD( (~r1.1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_39
                solve( !KD( (~r1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_40
                solve( !KU( h(h(k0)) ) @ #vk.4 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1⊕~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_41
                solve( !KU( h(h(k0)) ) @ #vk.4 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_42
                solve( !KD( (~r1⊕h(h(k0))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_43
                solve( !KU( h(h(k0)) ) @ #vk.4 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_44
                solve( !KU( h(h(k0)) ) @ #vk.5 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_45
                solve( !KU( h(h(k0)) ) @ #vk.4 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_46
                by contradiction /* from formulas */
              next
                case split_case_47
                by contradiction /* from formulas */
              next
                case split_case_48
                by contradiction /* from formulas */
              next
                case split_case_49
                by contradiction /* from formulas */
              next
                case split_case_50
                by contradiction /* from formulas */
              next
                case split_case_51
                by contradiction /* from formulas */
              next
                case split_case_52
                solve( !KU( h(h(k0)) ) @ #vk.5 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_53
                by contradiction /* from formulas */
              next
                case split_case_54
                by contradiction /* from formulas */
              next
                case split_case_55
                solve( !KU( h(h(k0)) ) @ #vk.5 )
                  case c_h
                  by contradiction /* from formulas */
                next
                  case tag1
                  solve( !KD( (~r1⊕h(k0.1)) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                qed
              next
                case split_case_56
                by contradiction /* from formulas */
              next
                case split_case_57
                by contradiction /* from formulas */
              next
                case split_case_58
                by contradiction /* from formulas */
              next
                case split_case_59
                by contradiction /* from formulas */
              next
                case split_case_60
                by contradiction /* from formulas */
              next
                case split_case_61
                by contradiction /* from formulas */
              next
                case split_case_62
                by contradiction /* from formulas */
              qed
            next
              case split_case_2
              solve( splitEqs(3) )
                case split_case_001
                solve( !KU( ~r0 ) @ #vk.1 )
                  case tag1
                  solve( !KU( h((~r0⊕~r1⊕h(k0))) ) @ #vk.2 )
                    case c_h_case_1
                    solve( !KD( (~r0⊕~r1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_2
                    by contradiction /* cyclic */
                  next
                    case c_h_case_3
                    solve( !KD( (~r0⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_4
                    by contradiction /* from formulas */
                  next
                    case c_h_case_5
                    by contradiction /* cyclic */
                  next
                    case tag1
                    solve( splitEqs(7) )
                      case split_case_01
                      by contradiction /* cyclic */
                    next
                      case split_case_02
                      solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_03
                      by contradiction /* cyclic */
                    next
                      case split_case_04
                      solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_05
                      solve( !KD( (~r0⊕~r1) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_06
                      by contradiction /* cyclic */
                    next
                      case split_case_07
                      solve( !KD( (~r0⊕~r1⊕~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_08
                      by contradiction /* cyclic */
                    next
                      case split_case_09
                      solve( !KD( (~r0⊕~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_10
                      solve( !KD( (~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_11
                      by contradiction /* cyclic */
                    next
                      case split_case_12
                      solve( !KD( (~r0⊕~r1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_13
                      solve( !KD( (~r1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_14
                      by contradiction /* cyclic */
                    next
                      case split_case_15
                      solve( !KD( (~r0⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_16
                      solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_17
                      by contradiction /* cyclic */
                    next
                      case split_case_18
                      solve( !KD( (~r0⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_19
                      solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_20
                      solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_21
                      by contradiction /* cyclic */
                    next
                      case split_case_22
                      by contradiction /* from formulas */
                    next
                      case split_case_23
                      solve( !KD( (~r1⊕~r1.1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_24
                      by contradiction /* cyclic */
                    next
                      case split_case_25
                      solve( !KD( (~r0⊕~r1.1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_26
                      solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_27
                      by contradiction /* cyclic */
                    next
                      case split_case_28
                      by contradiction /* from formulas */
                    next
                      case split_case_29
                      solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_30
                      by contradiction /* from formulas */
                    next
                      case split_case_31
                      by contradiction /* cyclic */
                    next
                      case split_case_32
                      solve( !KD( (~r0⊕~r1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_33
                      solve( !KD( (~r1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_34
                      by contradiction /* cyclic */
                    next
                      case split_case_35
                      solve( !KD( (~r0⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_36
                      by contradiction /* from formulas */
                    next
                      case split_case_37
                      by contradiction /* cyclic */
                    next
                      case split_case_38
                      solve( !KD( (~r0⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_39
                      by contradiction /* from formulas */
                    next
                      case split_case_40
                      by contradiction /* from formulas */
                    next
                      case split_case_41
                      by contradiction /* cyclic */
                    next
                      case split_case_42
                      by contradiction /* from formulas */
                    next
                      case split_case_43
                      solve( !KD( (~r1⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_44
                      by contradiction /* from formulas */
                    next
                      case split_case_45
                      by contradiction /* cyclic */
                    next
                      case split_case_46
                      solve( !KD( (~r0⊕h(k0.1)) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case split_case_47
                      by contradiction /* from formulas */
                    next
                      case split_case_48
                      by contradiction /* from formulas */
                    next
                      case split_case_49
                      by contradiction /* cyclic */
                    next
                      case split_case_50
                      by contradiction /* from formulas */
                    next
                      case split_case_51
                      by contradiction /* from formulas */
                    next
                      case split_case_52
                      by contradiction /* from formulas */
                    next
                      case split_case_53
                      by contradiction /* cyclic */
                    next
                      case split_case_54
                      by contradiction /* from formulas */
                    next
                      case split_case_55
                      by contradiction /* from formulas */
                    next
                      case split_case_56
                      by contradiction /* from formulas */
                    next
                      case split_case_57
                      by contradiction /* from formulas */
                    next
                      case split_case_58
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case split_case_002
                solve( !KD( (r0⊕~r1.1⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_003
                solve( !KD( (~r1.1⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_004
                solve( !KD( (r0⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_005
                solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_006
                solve( !KU( ~r1.1 ) @ #vk.4 )
                  case tag1_case_1
                  by contradiction /* cyclic */
                next
                  case tag1_case_2
                  by contradiction /* cyclic */
                next
                  case tag1_case_3
                  by contradiction /* cyclic */
                next
                  case tag1_case_4
                  by contradiction /* cyclic */
                next
                  case tag1_case_5
                  by contradiction /* cyclic */
                qed
              next
                case split_case_007
                by contradiction /* from formulas */
              next
                case split_case_008
                solve( !KD( (r0⊕~r1.1⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_009
                solve( !KD( (~r1.1⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_010
                solve( !KU( ~r1.1 ) @ #vk.4 )
                  case tag1_case_1
                  by contradiction /* cyclic */
                next
                  case tag1_case_2
                  by contradiction /* cyclic */
                next
                  case tag1_case_3
                  by contradiction /* cyclic */
                next
                  case tag1_case_4
                  by contradiction /* cyclic */
                next
                  case tag1_case_5
                  by contradiction /* cyclic */
                qed
              next
                case split_case_011
                by contradiction /* from formulas */
              next
                case split_case_012
                by contradiction /* from formulas */
              next
                case split_case_013
                solve( !KD( (h(k0)⊕h(k0.1)⊕h((~r0⊕~r1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_014
                by contradiction /* from formulas */
              next
                case split_case_015
                by contradiction /* from formulas */
              next
                case split_case_016
                solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_017
                by contradiction /* from formulas */
              next
                case split_case_018
                solve( !KD( (r0⊕~r1.1⊕h(k0)⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_019
                solve( !KD( (~r1.1⊕h(k0)⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_020
                solve( !KD( (r0⊕h(k0)⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_021
                solve( !KD( (h(k0)⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_022
                solve( !KD( (h(k0)⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_023
                by contradiction /* from formulas */
              next
                case split_case_024
                solve( !KD( (~r1.1⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_025
                by contradiction /* from formulas */
              next
                case split_case_026
                solve( !KD( (r0⊕h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_027
                solve( !KD( (h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_028
                solve( !KD( (h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_029
                by contradiction /* from formulas */
              next
                case split_case_030
                solve( !KD( (h(k0.1)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_031
                by contradiction /* from formulas */
              next
                case split_case_032
                by contradiction /* from formulas */
              next
                case split_case_033
                by contradiction /* from formulas */
              next
                case split_case_034
                solve( !KD( (~r1.1⊕h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_035
                by contradiction /* from formulas */
              next
                case split_case_036
                solve( !KD( (r0⊕h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_037
                solve( !KD( (h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_038
                solve( !KD( (h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_039
                by contradiction /* from formulas */
              next
                case split_case_040
                solve( !KD( (h(k0)⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_041
                by contradiction /* from formulas */
              next
                case split_case_042
                by contradiction /* from formulas */
              next
                case split_case_043
                solve( !KD( (r0⊕~r1.1⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_044
                solve( !KD( (~r1.1⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_045
                solve( !KD( (~r1.1⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_046
                solve( !KD( (r0⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_047
                solve( !KD( (r0⊕~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_048
                solve( !KD( (~r1.1⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_049
                solve( !KD( (r0⊕h((~r1⊕r0⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_050
                solve( !KU( ~r1.1 ) @ #vk.5 )
                  case tag1_case_01
                  by contradiction /* cyclic */
                next
                  case tag1_case_02
                  by contradiction /* cyclic */
                next
                  case tag1_case_03
                  by contradiction /* cyclic */
                next
                  case tag1_case_04
                  by contradiction /* cyclic */
                next
                  case tag1_case_05
                  by contradiction /* cyclic */
                next
                  case tag1_case_06
                  by contradiction /* cyclic */
                next
                  case tag1_case_07
                  by contradiction /* cyclic */
                next
                  case tag1_case_08
                  by contradiction /* cyclic */
                next
                  case tag1_case_09
                  by contradiction /* cyclic */
                next
                  case tag1_case_10
                  by contradiction /* cyclic */
                next
                  case tag1_case_11
                  by contradiction /* cyclic */
                next
                  case tag1_case_12
                  by contradiction /* cyclic */
                next
                  case tag1_case_13
                  by contradiction /* cyclic */
                next
                  case tag1_case_14
                  by contradiction /* cyclic */
                next
                  case tag1_case_15
                  by contradiction /* cyclic */
                next
                  case tag1_case_16
                  by contradiction /* cyclic */
                next
                  case tag1_case_17
                  by contradiction /* cyclic */
                next
                  case tag1_case_18
                  by contradiction /* cyclic */
                next
                  case tag1_case_19
                  by contradiction /* cyclic */
                next
                  case tag1_case_20
                  by contradiction /* cyclic */
                next
                  case tag1_case_21
                  by contradiction /* cyclic */
                next
                  case tag1_case_22
                  by contradiction /* cyclic */
                next
                  case tag1_case_23
                  by contradiction /* cyclic */
                next
                  case tag1_case_24
                  by contradiction /* cyclic */
                next
                  case tag1_case_25
                  by contradiction /* cyclic */
                next
                  case tag1_case_26
                  by contradiction /* cyclic */
                next
                  case tag1_case_27
                  by contradiction /* cyclic */
                next
                  case tag1_case_28
                  by contradiction /* cyclic */
                next
                  case tag1_case_29
                  by contradiction /* cyclic */
                next
                  case tag1_case_30
                  by contradiction /* cyclic */
                next
                  case tag1_case_31
                  by contradiction /* cyclic */
                next
                  case tag1_case_32
                  by contradiction /* cyclic */
                next
                  case tag1_case_33
                  by contradiction /* cyclic */
                next
                  case tag1_case_34
                  by contradiction /* cyclic */
                next
                  case tag1_case_35
                  by contradiction /* cyclic */
                next
                  case tag1_case_36
                  by contradiction /* cyclic */
                next
                  case tag1_case_37
                  by contradiction /* cyclic */
                next
                  case tag1_case_38
                  by contradiction /* cyclic */
                next
                  case tag1_case_39
                  by contradiction /* cyclic */
                next
                  case tag1_case_40
                  by contradiction /* cyclic */
                next
                  case tag1_case_41
                  by contradiction /* cyclic */
                next
                  case tag1_case_42
                  by contradiction /* cyclic */
                next
                  case tag1_case_43
                  by contradiction /* cyclic */
                next
                  case tag1_case_44
                  by contradiction /* cyclic */
                next
                  case tag1_case_45
                  by contradiction /* cyclic */
                next
                  case tag1_case_46
                  by contradiction /* cyclic */
                next
                  case tag1_case_47
                  by contradiction /* cyclic */
                next
                  case tag1_case_48
                  by contradiction /* cyclic */
                next
                  case tag1_case_49
                  by contradiction /* cyclic */
                next
                  case tag1_case_50
                  by contradiction /* cyclic */
                next
                  case tag1_case_51
                  by contradiction /* cyclic */
                next
                  case tag1_case_52
                  by contradiction /* cyclic */
                qed
              next
                case split_case_051
                solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_052
                solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_053
                by contradiction /* from formulas */
              next
                case split_case_054
                by contradiction /* from formulas */
              next
                case split_case_055
                by contradiction /* from formulas */
              next
                case split_case_056
                by contradiction /* from formulas */
              next
                case split_case_057
                by contradiction /* from formulas */
              next
                case split_case_058
                by contradiction /* from formulas */
              next
                case split_case_059
                solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_060
                by contradiction /* from formulas */
              next
                case split_case_061
                by contradiction /* from formulas */
              next
                case split_case_062
                solve( !KD( (~r1.1⊕h(k0)) ) ▶₀ #vk.2 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                  qed
                qed
              next
                case split_case_063
                by contradiction /* from formulas */
              next
                case split_case_064
                by contradiction /* from formulas */
              next
                case split_case_065
                by contradiction /* from formulas */
              next
                case split_case_066
                by contradiction /* from formulas */
              next
                case split_case_067
                by contradiction /* from formulas */
              next
                case split_case_068
                by contradiction /* from formulas */
              next
                case split_case_069
                by contradiction /* from formulas */
              next
                case split_case_070
                by contradiction /* from formulas */
              next
                case split_case_071
                by contradiction /* from formulas */
              next
                case split_case_072
                by contradiction /* from formulas */
              next
                case split_case_073
                by contradiction /* from formulas */
              next
                case split_case_074
                by contradiction /* from formulas */
              next
                case split_case_075
                solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_076
                by contradiction /* from formulas */
              next
                case split_case_077
                by contradiction /* from formulas */
              next
                case split_case_078
                by contradiction /* from formulas */
              next
                case split_case_079
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_080
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_081
                solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_082
                solve( !KU( ~r1.1 ) @ #vk.4 )
                  case tag1_case_1
                  solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                    case acceptreaderNew
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case acceptreaderOld
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                    qed
                  qed
                next
                  case tag1_case_2
                  solve( !KU( h((~r1⊕x⊕~r1.1⊕h(k0))) ) @ #vk.5 )
                    case c_h_case_01
                    solve( !KD( (~r1⊕x⊕~r1.1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_02
                    solve( !KD( (x⊕~r1.1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_03
                    solve( !KD( (~r1⊕~r1.1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_04
                    solve( !KD( (~r1.1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_05
                    solve( !KD( (~r1.1⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_06
                    by contradiction /* cyclic */
                  next
                    case c_h_case_07
                    solve( !KD( (x⊕h(k0)) ) ▶₀ #vk.3 )
                      case acceptreaderNew
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case acceptreaderOld
                      by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                      qed
                    qed
                  next
                    case c_h_case_08
                    by contradiction /* cyclic */
                  next
                    case c_h_case_09
                    by contradiction /* cyclic */
                  next
                    case c_h_case_10
                    by contradiction /* from formulas */
                  next
                    case c_h_case_11
                    by contradiction /* cyclic */
                  next
                    case c_h_case_12
                    by contradiction /* cyclic */
                  next
                    case c_h_case_13
                    by contradiction /* from formulas */
                  next
                    case c_h_case_14
                    by contradiction /* cyclic */
                  next
                    case c_h_case_15
                    by contradiction /* cyclic */
                  next
                    case tag1_case_1
                    solve( Update( h(k0), 'T' ) @ #j )
                      case accepttag_case_1
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(k0))))) ) ▶₀ #vk.4 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case accepttag_case_2
                      solve( TagState1( ~id.1, h(k0), ~r1.2, r0, m ) ▶₀ #j )
                        case tag1
                        solve( Running( <'T', 'R', h(k0), r0, ~r1.2> ) @ #j.6 )
                          case acceptreaderNew
                          solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.3 )
                            case acceptreaderNew
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case acceptreaderOld
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case initiatereader
                            by contradiction /* impossible chain */
                          next
                            case tag1
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.9, 0) ~~> (#vk.3, 0) )
                            qed
                          qed
                        next
                          case acceptreaderOld
                          solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.3 )
                            case acceptreaderNew
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case acceptreaderOld
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case initiatereader
                            by contradiction /* impossible chain */
                          next
                            case tag1
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.9, 0) ~~> (#vk.3, 0) )
                            qed
                          qed
                        qed
                      qed
                    next
                      case setup_case_1
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(~k))))) ) ▶₀ #vk.4 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case setup_case_2
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(~k))))) ) ▶₀ #vk.4 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                        qed
                      qed
                    next
                      case setup_case_3
                      solve( Update( h(h(~k)), 'T' ) @ #j.1 )
                        case accepttag
                        solve( Running( <'T', 'R', h(~k), r0, ~r1.2> ) @ #j.6 )
                          case acceptreaderNew
                          solve( !KU( ~r1.2 ) @ #vk.9 )
                            case fresh
                            by solve( TagState1( ~id.1, h(~k), ~r1.2, ~r0, m ) ▶₀ #j.1 )
                          next
                            case initiatereader
                            by solve( TagState1( ~id.1, h(~k), ~r1.2, ~r0, m ) ▶₀ #j.1 )
                          next
                            case tag1
                            solve( TagState1( ~id.1, h(~k), ~r1.2, ~r0, m ) ▶₀ #j.1 )
                              case tag1
                              solve( !KU( ~r0 ) @ #vk.11 )
                                case fresh
                                by solve( ReaderState1( ~id.1, ~r0 ) ▶₀ #j.2 )
                              next
                                case initiatereader
                                solve( ReaderState1( ~id.1, ~r0 ) ▶₀ #j.2 )
                                  case initiatereader
                                  solve( Update( h(h(~k)), 'T' ) @ #j.3 )
                                    case accepttag
                                    solve( TagState1( ~id.1, h(~k), ~r1.4, r0.1, m ) ▶₀ #j.3 )
                                      case tag1
                                      solve( Update( h(h(~k)), 'T' ) @ #j.4 )
                                        case accepttag
                                        solve( TagState1( ~id.1, h(~k), ~r1.5, r0.2, m ) ▶₀ #j.4 )
                                          case tag1
                                          solve( Update( h(k0.1), 'T' ) @ #j.5 )
                                            case accepttag
                                            solve( TagState1( ~id.1, h(k0.1), ~r1.6, r0.3, m
                                                   ) ▶₀ #j.5 )
                                              case tag1
                                              by solve( Update( h(~k), 'T' ) @ #j.6 )
                                            qed
                                          next
                                            case setup
                                            by solve( Update( h(~k), 'T' ) @ #j.5 )
                                          qed
                                        qed
                                      next
                                        case setup
                                        solve( Update( h(k0.1), 'T' ) @ #j.4 )
                                          case accepttag
                                          solve( TagState1( ~id.1, h(k0.1), ~r1.5, r0.2, m
                                                 ) ▶₀ #j.4 )
                                            case tag1
                                            by solve( Update( h(~k), 'T' ) @ #j.5 )
                                          qed
                                        next
                                          case setup
                                          by solve( Update( h(~k), 'T' ) @ #j.4 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case setup
                                    solve( Update( h(h(~k)), 'T' ) @ #j.3 )
                                      case accepttag
                                      solve( TagState1( ~id.1, h(~k), ~r1.4, r0.1, m ) ▶₀ #j.3 )
                                        case tag1
                                        solve( Update( h(k0.1), 'T' ) @ #j.4 )
                                          case accepttag
                                          solve( TagState1( ~id.1, h(k0.1), ~r1.5, r0.2, m
                                                 ) ▶₀ #j.4 )
                                            case tag1
                                            by solve( Update( h(~k), 'T' ) @ #j.5 )
                                          qed
                                        next
                                          case setup
                                          by solve( Update( h(~k), 'T' ) @ #j.4 )
                                        qed
                                      qed
                                    next
                                      case setup
                                      solve( Update( h(k0.1), 'T' ) @ #j.3 )
                                        case accepttag
                                        solve( TagState1( ~id.1, h(k0.1), ~r1.4, r0.1, m ) ▶₀ #j.3 )
                                          case tag1
                                          by solve( Update( h(~k), 'T' ) @ #j.4 )
                                        qed
                                      next
                                        case setup
                                        by solve( Update( h(~k), 'T' ) @ #j.3 )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case tag1
                                by solve( ReaderState1( ~id.1, ~r0 ) ▶₀ #j.2 )
                              qed
                            qed
                          qed
                        next
                          case acceptreaderOld
                          solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.3 )
                            case acceptreaderNew
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case acceptreaderOld
                            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          next
                            case initiatereader
                            by contradiction /* impossible chain */
                          next
                            case tag1
                            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                              case d_0_fst
                              by contradiction /* impossible chain */
                            next
                              case d_0_snd
                              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                            qed
                          qed
                        qed
                      next
                        case setup
                        solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.3 )
                          case acceptreaderNew
                          by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        next
                          case acceptreaderOld
                          by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case tag1_case_2
                    solve( Update( h(k0), 'T' ) @ #j )
                      case accepttag_case_1
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(k0))))) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case accepttag_case_2
                      solve( TagState1( ~id.1, h(k0), ~r1.2, r0, m ) ▶₀ #j )
                        case tag1
                        solve( Running( <'T', 'R', h(k0), r0, ~r1.2> ) @ #j.6 )
                          case acceptreaderNew
                          by sorry
                        next
                          case acceptreaderOld
                          by sorry
                        qed
                      qed
                    next
                      case setup_case_1
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(~k))))) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case setup_case_2
                      solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(h(~k))))) ) ▶₀ #vk.3 )
                        case acceptreaderNew
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case acceptreaderOld
                        by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                        qed
                      qed
                    next
                      case setup_case_3
                      solve( Update( h(h(~k)), 'T' ) @ #j.1 )
                        case accepttag
                        by sorry /* bound 5 hit */
                      next
                        case setup
                        by sorry /* bound 5 hit */
                      qed
                    qed
                  qed
                qed
              next
                case split_case_083
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_084
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_085
                by contradiction /* from formulas */
              next
                case split_case_086
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_087
                by contradiction /* from formulas */
              next
                case split_case_088
                by contradiction /* from formulas */
              next
                case split_case_089
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_090
                by contradiction /* from formulas */
              next
                case split_case_091
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_092
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_093
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_094
                by contradiction /* from formulas */
              next
                case split_case_095
                by contradiction /* from formulas */
              next
                case split_case_096
                by contradiction /* from formulas */
              next
                case split_case_097
                by contradiction /* from formulas */
              next
                case split_case_098
                solve( !KD( (x⊕h(k0)⊕h(k0.1)⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_099
                solve( !KD( (h(k0)⊕h(k0.1)⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_100
                by contradiction /* from formulas */
              next
                case split_case_101
                solve( !KD( (h(k0.1)⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_102
                by contradiction /* from formulas */
              next
                case split_case_103
                by contradiction /* from formulas */
              next
                case split_case_104
                solve( !KD( (h(k0)⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_105
                by contradiction /* from formulas */
              next
                case split_case_106
                solve( !KD( (x⊕h((~r1⊕x⊕~r1.1⊕h(k0)))) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_107
                solve( !KD( (x⊕h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_108
                solve( !KD( (h(k0)⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_109
                by contradiction /* from formulas */
              next
                case split_case_110
                by contradiction /* from formulas */
              next
                case split_case_111
                by contradiction /* from formulas */
              next
                case split_case_112
                by contradiction /* from formulas */
              next
                case split_case_113
                solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_114
                by contradiction /* from formulas */
              next
                case split_case_115
                solve( !KD( (x⊕h(k0)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_116
                by contradiction /* from formulas */
              next
                case split_case_117
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_118
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_119
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_120
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_121
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_122
                by contradiction /* from formulas */
              next
                case split_case_123
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_124
                by contradiction /* from formulas */
              next
                case split_case_125
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_126
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_127
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_128
                by contradiction /* from formulas */
              next
                case split_case_129
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_130
                by contradiction /* from formulas */
              next
                case split_case_131
                by contradiction /* from formulas */
              next
                case split_case_132
                by contradiction /* from formulas */
              next
                case split_case_133
                by contradiction /* from formulas */
              next
                case split_case_134
                by contradiction /* from formulas */
              next
                case split_case_135
                by contradiction /* from formulas */
              next
                case split_case_136
                by contradiction /* from formulas */
              next
                case split_case_137
                by contradiction /* from formulas */
              next
                case split_case_138
                by contradiction /* from formulas */
              next
                case split_case_139
                by contradiction /* from formulas */
              next
                case split_case_140
                by contradiction /* from formulas */
              next
                case split_case_141
                by contradiction /* from formulas */
              next
                case split_case_142
                by contradiction /* from formulas */
              next
                case split_case_143
                by contradiction /* from formulas */
              next
                case split_case_144
                by contradiction /* from formulas */
              next
                case split_case_145
                by contradiction /* from formulas */
              next
                case split_case_146
                by contradiction /* from formulas */
              next
                case split_case_147
                solve( !KD( (x⊕~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_148
                solve( !KD( (x⊕~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_149
                by contradiction /* from formulas */
              next
                case split_case_150
                solve( !KD( (x⊕~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_151
                by contradiction /* from formulas */
              next
                case split_case_152
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.2 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                  qed
                qed
              next
                case split_case_153
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_154
                by contradiction /* from formulas */
              next
                case split_case_155
                solve( !KD( (x⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_156
                by contradiction /* from formulas */
              next
                case split_case_157
                solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.2 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                  qed
                qed
              next
                case split_case_158
                solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_159
                by contradiction /* from formulas */
              next
                case split_case_160
                solve( !KD( (~r1.1⊕h(k0.1)) ) ▶₀ #vk.1 )
                  case acceptreaderNew
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case acceptreaderOld
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  qed
                qed
              next
                case split_case_161
                by contradiction /* from formulas */
              next
                case split_case_162
                by contradiction /* from formulas */
              next
                case split_case_163
                by contradiction /* from formulas */
              next
                case split_case_164
                by contradiction /* from formulas */
              next
                case split_case_165
                by contradiction /* from formulas */
              next
                case split_case_166
                by contradiction /* from formulas */
              next
                case split_case_167
                by contradiction /* from formulas */
              next
                case split_case_168
                by contradiction /* from formulas */
              next
                case split_case_169
                by contradiction /* from formulas */
              next
                case split_case_170
                by contradiction /* from formulas */
              next
                case split_case_171
                by contradiction /* from formulas */
              qed
            next
              case split_case_3
              solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.2 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                qed
              qed
            next
              case split_case_4
              solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_5
              solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.1 )
                case acceptreaderNew
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case acceptreaderOld
                by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                qed
              qed
            next
              case split_case_6
              solve( !KU( ~r1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case split_case_3
          by contradiction /* from formulas */
        next
          case split_case_4
          by contradiction /* from formulas */
        next
          case split_case_5
          solve( !KU( h((h(k0)⊕h((~r1⊕h(k0))))) ) @ #vk )
            case c_h_case_1
            solve( !KD( (h(k0)⊕h((~r1⊕h(k0)))) ) ▶₀ #vk.1 )
              case acceptreaderNew
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case acceptreaderOld
              by solve( (#vl, 0) ~~> (#vk.1, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.1, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
              qed
            qed
          next
            case c_h_case_2
            by contradiction /* from formulas */
          next
            case tag1_case_1
            solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
              case acceptreaderNew
              by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            next
              case acceptreaderOld
              by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
              qed
            qed
          next
            case tag1_case_2
            solve( !KU( ~r1.1 ) @ #vk.4 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          qed
        next
          case split_case_6
          solve( !KD( (x⊕h(k0)) ) ▶₀ #vk )
            case acceptreaderNew
            by solve( (#vl, 0) ~~> (#vk, 0) )
          next
            case acceptreaderOld
            by solve( (#vl, 0) ~~> (#vk, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case split_case_7
          by contradiction /* from formulas */
        next
          case split_case_8
          solve( !KD( (x⊕h(k0)) ) ▶₀ #vk )
            case acceptreaderNew
            by solve( (#vl, 0) ~~> (#vk, 0) )
          next
            case acceptreaderOld
            by solve( (#vl, 0) ~~> (#vk, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk, 0) )
            qed
          qed
        next
          case split_case_9
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma noninjectiveagreementREADER [use_induction]:
  all-traces
  "∀ t #i.
    (Commit( <'R', 'T', t> ) @ #i) ⇒
    (∃ #j. Running( <'R', 'T', t> ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ t #i.
  (Commit( <'R', 'T', t> ) @ #i)
 ∧
  ∀ #j. (Running( <'R', 'T', t> ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (Running( <'R', 'T', t> ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( Commit( <'R', 'T', t> ) @ #i )
      case acceptreaderNew
      by sorry
    next
      case acceptreaderOld
      by sorry
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

/* All well-formedness checks were successful. */

end