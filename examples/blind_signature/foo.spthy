theory Blind_Signature
begin

/*
 * Protocol: Foo	
 * Modeler: 	
 * Date: 	
 * Source:	
 *
 * Status: Working	
 */

functions: blind/2, sign/2, unblind/2, open/2, commit/2, checksign/2, pk/1

equations: open(commit(m,r),r)=m, checksign( sign(m,sk),pk(sk) ) = m, unblind(sign(blind(m,r),sk),r)=sign(m,sk)

// Public key infrastructure
rule Register_Voter_pk:
  [ Fr(~ltkV) ] --[ ]-> [ !Ltk($V, ~ltkV), !Pk($V, pk(~ltkV)), Out(pk(~ltkV)) ]

rule Register_Collect_pk:
  [ Fr(~ltkC) ] --[ ]-> [ !CollectLtk($C, ~ltkC), !CollectPk($C, pk(~ltkC)), Out(pk(~ltkC)) ]

rule Register_Admin_pk:
  [ Fr(~ltkA) ] --[ Admin($A) ]-> [ !AdminLtk($A, ~ltkA), !AdminPk($A, pk(~ltkA)), Out(pk(~ltkA)) ]

rule Reveal_Voter_ltk:
  [ !Ltk(A, ltkA) ] --[ RevLtk(A) ]-> [ Out(ltkA) ]

rule Reveal_Collect_ltk:
  [ !CollectLtk(A, ltkA) ] --[ RevLtk(A) ]-> [ Out(ltkA) ]

rule Reveal_Adminltk:
  [ !AdminLtk(A, ltkA) ] --[ RevLtk(A) ]-> [ Out(ltkA) ]


/* We formalize the following protocol

  protocol FOO {
    Phase 1:
    1. V -> A: sign(blind(commit(v,r),b),skV)
    2. A -> V: sign(blind(commit(v,r),b),skA)
    Phase 2:
    3. V -> C: <l, sign(commit(v,r),skA)>
    Phase 3
    5. V -> C: <l, r> 
    6. C -> Pub: v
  }
*/

//Rules

rule V_1:
  let m1 = sign (blind( commit(~vote, ~r), ~b), ltkV)
  in
    [ Fr( ~r ), Fr( ~b ), Fr( ~vote ), !Ltk( $V, ltkV ) ]
  --[ OUT_A(m1)]->
    [ Out( m1 ), St_V_1( $V, ~vote, ~r, ~b ) ]

rule A_1:
  let rm = sign( blind( commit(vote, r), b), ltkV)
      sm = sign( blind( commit(vote, r), b), ltkA )
  in
    [ In( rm ), !AdminLtk( $A, ltkA ), !Pk( $V, pk(ltkV) ) ]
  --[ Signature (vote), IN_A_v(vote, rm) ]->
    [ Out( sm ) ]

rule V_2:
  let m = blind( commit(vote, r), b)
  in
    [ In( sign( m, ltkA ) ), St_V_1( V, vote, r, b), Fr( ~l ), !CollectPk( $C, pkC ), !AdminPk( $A, pk(ltkA) ) ]
  --[ ]->
    [ P_Ch_1( V, ~l, sign( commit( vote, r ), ltkA ) ), St_V_2( V, $A, vote, r, b, ~l ) ]

rule C_1:
  let m = sign(commit(vote,r),ltkA)
  in
    [ P_Ch_1( V, l, m ), !AdminPk( A, pk(ltkA) ), !CollectLtk( $C, skC )]
  --[ ]->
    [ St_C_1($C, V, A, l, m ) ]

rule V_3:
    [ St_V_2( V, A, vote, r, b, l ), !CollectPk( $C, pkC ) ]
  --[ ]->
    [ P_Ch_2( l, r) ]

rule C_2:
  let m = sign(commit(vote,r),ltkA)
  in
    [ P_Ch_2( l, r), !CollectLtk( $C, skC ), St_C_1($C, $V, A, l, m ),!AdminPk( A, pk(ltkA) ) ]
  --[ Voted (vote) ]->
    [ Out( vote ) ]


// Avoid cycling with A_1
lemma types [typing]:
  " (All v m #i.
       IN_A_v( v, m) @ i
       ==>
       ( (Ex #j. KU(v) @ j & j < i)
       | (Ex #j V. RevLtk(V) @ j)
       | (Ex #j. OUT_A( m) @ j)
       )
    )"


lemma elligibility:
  " 
  All vote #j.
  Voted(vote) @ j
  ==> 
  ( ( Ex #i.  Signature(vote) @ i & #i < #j )  | (Ex #k A. RevLtk( A ) @ k ) )"

lemma test1:
  exists-trace
  " Ex k #i #j. Voted (k) @ #i & Signature(k) @ j "


end

