theory NAXOS_broken_eCK_variant 
begin

builtin: hashing, diffie-hellman

section{* The NAXOS Key-Exchange Protocol *}

/* Protocol rules */

rule generate_ltk:
   [ Fr(~lk) ] -->
   [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

rule Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
   --[ SidI_1(~ekI,$I,$R, 'g'^h(~lkI, ~ekI )) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(~lkI, ~ekI ) ),
     !EphkI(~ekI),
     Out( 'g'^h(~lkI, ~ekI ) ) ]

rule Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI , hkI), In( Y ), !Pk( $R,'g'^~lkR ) ]
   --[SidI_2( ~ekI, $I, $R, hkI, Y,
       h( <Y^~lkI, ('g'^~lkR)^h(~lkI, ~ekI), Y^h(~lkI, ~ekI ), $I, $R> ) ) ]->
   [ !SesskOfI( ~ekI, 
       h( <Y^~lkI, ('g'^~lkR)^h(~lkI, ~ekI), Y^h(~lkI, ~ekI ), $I, $R> ) ) ]


rule Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk($R, ~lkR), !Pk($I, 'g'^~lkI) ]
   --[ SidR_1( ~ekR, $I, $R, X, 'g'^h(~lkR, ~ekR ),
       h( <('g'^~lkI)^h(~lkR, ~ekR) ,X^~lkR, X^h(~lkR, ~ekR ), $I, $R> ) ) ]->
   [ Out( 'g'^h(~lkR, ~ekR ) ),
     !EphkR(~ekR),
     !SesskOfR( ~ekR, 
       h( <('g'^~lkI)^h(~lkR, ~ekR) ,X^~lkR, X^h(~lkR, ~ekR ), $I, $R> ) ) ]

/* Copy rules to get case distinctions, otherwise no split on solving Sessk(~tid,k) fact
   if it is generated by both roles */
rule Sessk_revealI: 
   [ !SesskOfI(~tid, k) ]
   --[ SesskRev(~tid) ]->
   [ Out(k) ]

rule Sessk_revealR: 
   [ !SesskOfR(~tid, k) ]
   --[ SesskRev(~tid) ]->
   [ Out(k) ]

rule Ephk_revealI:
   [ !EphkI(~ekI) ]
   --[ EphkRev(~ekI) ]->
   [ Out(~ekI) ]

rule Ephk_revealR: 
   [ !EphkR(~ekR) ]
   --[ EphkRev(~ekR) ]->
   [ Out(~ekR) ]

rule Ltk_reveal:
   [ !Ltk($A, k) ]
   --[ LtkRev($A) ]->
   [ Out(k) ]


/* Security properties */

/*
lemma key_agreement_reachable:
  "not (Ex #i1 #i2 ekI ekR I R k hkI hkR.
          SidI_2(ekI, I, R, hkI, hkR, k) @ i1 & SidR_1(ekR, I, R, hkI, hkR, k) @ i2)"
*/

/* An attack is valid in eCK if the session key of the test session is deduced and
   the test session is clean.
*/
lemma eCK_initiator_key:
  "not (Ex #i1 #i2 ttest I R k hkI hkR.
            SidI_2(ttest, I, R, hkI, hkR, k) @ i1 & K( k ) @ i2

            /* Not longterm-key-reveal _and_ ephemeral-key-reveal of actor . */
            & (All #i3 #i4. LtkRev( I ) @ i3 & EphkRev( ttest ) @ i4 ==> F)

            /* Not session-key-reveal of test thread. */
            & (All #i3. SesskRev( ttest ) @ i3 ==> F)

            /* Not session-key-reveal of partner thread. */
            & (All #i3 #i4 tpartner kpartner.
                   SidR_1( tpartner,I,R,hkI,hkR,kpartner ) @i3
		   & SesskRev( tpartner ) @ i4 ==> F)

	    /* If there is no partner thread, then there is no longterm-key-reveal for
	       the intended partner.
	       (We model eCK-wpfs, for eCK-pfs, add i1 < i3 to conclusion) */
            & (All #i3. LtkRev( R ) @ i3 ==>
	          (Ex #i4 tpartner kpartner.
                      (* (i1 < i3) | *)
                      SidR_1( tpartner,I,R,hkI,hkR,kpartner ) @i4)))"

/* An attack is valid in eCK if the session key of the test session is deduced and
   the test session is clean.
*/
lemma eCK_responder_key:
  "not (Ex #i1 #i2 ttest I R k hkI hkR.
            SidR_1(ttest, I, R, hkI, hkR, k) @ i1 & K( k ) @ i2

            /* Not session-key-reveal of test thread. */
            & (All #i3. SesskRev( ttest ) @ i3 ==> F)

            /* Not session-key-reveal of partner thread. Note that we use SidI_2 here.
	       A session key reveal can only happen after SidI_2 is logged anyways.
	    */
            & (All #i3 #i4 tpartner kpartner.
                   SidI_2( tpartner,I,R,hkI,hkR,kpartner ) @i3
		   & SesskRev( tpartner ) @ i4 ==> F)

            /* If there is a partner thread, then not long-term-key-reveal and ephemeral-key-reveal. */
            & (All #i4 #i5 #i6 tpartner.
                  SidI_1( tpartner,I,R,hkI ) @i4
		  & LtkRev( I ) @ i5
		  & EphkRev( tpartner ) @ i6 ==> F)

	    /* If there is no partner thread, then there is no longterm-key-reveal for
	       the intended partner.
	       (We model eCK-wpfs, for eCK-pfs, add i1 < i3 to conclusion)
	       */
            & (All #i3. LtkRev( I ) @ i3 ==>
	          (Ex #i4 tpartner.
                       (* (i1 < i3) | *)
                       SidI_1( tpartner,I,R,hkI ) @i4)))"

end
