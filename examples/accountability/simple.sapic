theory SimpleAccountabilityOne
begin

section{* Simple Accountability Mechanism *}

/*
 * Protocol:    ??
 * Modeler:     Robert Kunnemann 
 * Date:        Jul 2017
 *
 * Status:  wip 
 */

functions: 
    pk/1,sk/1[private],
    aenc/2, adec/2,
    sign/2, verify/2,
    /* extrmsg/1, */
    true/0

equations: 
    adec(aenc(m,pk(i)),sk(i))=m,
    verify(sign(m, sk(i)), pk(i)) = m

options: progress

let A = 0
let B = 0
let TTP = 0
let Judge = 0

let TTPID=<'TTP',$TTP> in
let text=<$A,$B,$TEXT,TTPID> in
!(
in('c',<$A,$B,<'TTP',$TTP>,$TEXT>);
event TTP(TTPID);
 ( A || B || TTP || Judge)
)
|| !(   in('c',<'corrupt',$x>); 
        event Corrupt($x);
        out('c',sk($x));
        (  !(in('r',<$x,sid,m>);0) 
        )
   )

lemma timelinessA [reuse]:
    "All #i a b t sida. StartA(a, b, t, sida)@i
    	    ==>  ( Ex #j .  ContractA(a, b, t, sida)@j)
             | ( Ex #j .  AbortA(a, b, t, sida)@j )
             | ( Ex #j. Corrupt(a)@j)"

end
