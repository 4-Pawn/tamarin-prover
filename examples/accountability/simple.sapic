theory SimpleAccountabilityOne
begin

section{* Simple Accountability Mechanism *}

/* Protocol:    ??
 * Modeler:     Robert Kunnemann 
 * Date:        Jul 2017
 *
 * Status:  wip */

functions: 
    pk/1,sk/1[private],
    aenc/2, adec/2,
    sign/2, verify/2,
    true/0

equations: 
    adec(aenc(m,pk(i)),sk(i))=m,
    verify(sign(m, sk(i)), pk(i)) = m

options: progress

let A = 0
let B = 0
let TTP = 0
let Judge = 0

let TTPID=<'TTP',$TTP> in
let text=<$A,$B,$TEXT,TTPID> in
!(
in('c',<$A,$B,<'TTP',$TTP>,$TEXT>);
insert $A,$B;
lookup $A as v in
event FallA();
event BadThing();
event TTP(TTPID);
 ( A || B || TTP || Judge)
)
|| !(   in('c',<'corrupt',$x>); 
        event Corrupted($x);
        out('c',sk($x));
        (  !(in('r',<$x,sid,m>);0) 
        )
   )

verdictfunction v1:
    "Ex #i. FallA()@i" -> <'A','B'> | <'B','C'> | <'C','A'>,
    otherwise -> <> 

lemma acc:
    v1 accounts for "Ex #i. BadThing()@i" for parties <'A','B','C'>

end
