/*
 * Protocol: Centralized monitor protocol - Fixed
             - using unbounded accountability implementation
             - unbounded set of parties
 * Modeler:  Robert KÃ¼nnemann, Ilkan Esiyok, Kevin Morio
 * Date:
 * Source:
 * Status:
 * Note:
 * */

theory CentralizedMonitor_Fixed_NewImpl
begin

functions:
    pk/1,sk/1[private],
    sign/2, verify/3,
    true/0,
    NormalAct/0, SpecialAct/0, UnusualAct/0, isAct/1

equations:
    verify(sign(m, sk(i)),m, pk(sk(i))) = true,
    isAct(NormalAct) = true,
    isAct(SpecialAct) = true,
    isAct(UnusualAct) = true

// predicates:
// isSpecial(a) <=> a=SpecialAct(),
// isNormal(a) <=> a=NormalAct()



/*
 * Processes
 */

let D =
    let m1 = <'Do',a>
        m2 = <'Permit',a>
    in
  ( in(a);
    if a = NormalAct() then
        out(<m1,sign(m1,sk('D'))>)
    else if a = SpecialAct() then
        out(<m2,sign(m2,sk('D'))>)
  )

let C =
    let m2x = <'Permit',a>
        m3 = <m2x,m2xsign>
    in
  ( in(<m2x,m2xsign>);
    if verify( m2xsign, m2x, pk(sk('D'))) = true() then
       if a = SpecialAct() then
           out(<m3,sign(m3,sk('C'))>)
  )

let M =
    let m1 = <'Do',a>
        m2 = <'Permit',a>
        m3 = <m2,m2sign>
    in
  ( in(<m1,m1sign>);
    if verify(m1sign, m1, pk(sk('D'))) = true() then
        new id;
        event Control(id, '0');
        event Log('D', a, id);
        event Execute(a, id)
  )
  +
  ( in(<m3,m3sign>);
    if verify(m3sign, m3, pk(sk('C'))) = true() then
        if verify(m2sign, m2, pk(sk('D'))) = true() then
            new id;
            event Control(id, '1');
            event Log('D', a, id);
            event Log('C', a, id);
            event Execute(a, id)
  )

// The trusted party can only run once during each run of the protocol
let Proto = out(pk(sk('D')));
            out(pk(sk('C')));
            M || !D || !C

Proto
|| !( in('c',<'corrupt',$x>);
      event Corrupted($x);
      out('c',sk($x))
    )



/*
 * Lemmas
 */

lemma sanity_logD_not_misbehaving:
    exists-trace
    "Ex a id #i #j. (a = NormalAct()) & Log('D', a, id)@i & Execute(a, id)@j"

lemma sanity_logDC_not_misbehaving:
    exists-trace
    "Ex a id #i #j #k. (a = SpecialAct()) & Log('D', a, id)@i & Log('C', a, id)@j & Execute(a, id)@k"

lemma sanity_logD:
    exists-trace
    "Ex a id #i #j. Log('D', a, id)@i & Execute(a, id)@j"

lemma sanity_logDC:
    exists-trace
    "Ex a id #i #j #k. Log('D', a, id)@i & Log('C', a, id)@j & Execute(a, id)@k"



/*
 * Case Tests & Accountability Lemma
 */

 test specialAct_D:
   "Ex a id #i #j #k. Control(id, '0')@i & Log(x, a, id)@j & Execute(a, id)@k & #i < #j & #j < #k & not(a=NormalAct() | a=SpecialAct())"

test specialAct_DC:
  "Ex a id #i #j #k #l. Control(id, '1')@i & Log(x, a, id)@j & Log(y, a, id)@k & Execute(a, id)@l & not(x = y) & #i < #j & #j < #k & #k < #l & not(a=NormalAct() | a=SpecialAct())"

lemma acc:
    specialAct_D, specialAct_DC accounts for "All a id #i. Execute(a, id)@i ==> (a=SpecialAct()) | (a=NormalAct())"



/*
 * Results
 */

/*=============================================================================

  sanity_logD_not_misbehaving (exists-trace): verified (8 steps)
  sanity_logDC_not_misbehaving (exists-trace): verified (12 steps)
  sanity_logD (exists-trace): verified (8 steps)
  sanity_logDC (exists-trace): verified (12 steps)
  acc_specialAct_D_suff (exists-trace): verified (10 steps)
  acc_specialAct_DC_suff (exists-trace): verified (14 steps)
  acc_verif_empty (all-traces): verified (10 steps)
  acc_specialAct_D_verif_nonempty (all-traces): verified (4 steps)
  acc_specialAct_DC_verif_nonempty (all-traces): verified (4 steps)
  acc_specialAct_D_min (all-traces): verified (3 steps)
  acc_specialAct_DC_min (all-traces): verified (9 steps)
  acc_specialAct_D_uniq (all-traces): verified (14 steps)
  acc_specialAct_DC_uniq (all-traces): verified (49 steps)
  acc_specialAct_D_inj (all-traces): verified (1 steps)
  acc_specialAct_DC_inj (all-traces): verified (4 steps)
  acc_specialAct_D_rel_ter (exists-trace): verified (10 steps)
  acc_specialAct_DC_rel_ter (exists-trace): verified (14 steps)

==============================================================================*/



end