/*
 * Protocol:    Centralised monitor protocol - Faulty
 * Modeler:   Robert KÃ¼nnemann
 * Date:  
 * Source:  
 * Status:  
 * Note:  execute with --heuristic=p 
 * */


theory CentralisedMonitor_Faulty
begin

/* builtins: signing */
functions: 
    pk/1,sk/1[private],
    /* aenc/2, adec/2, */
    sign/2, verify/3,
    true/0,
    NormalAct/0, SpecialAct/0, UnusualAct/0, isAct/1

equations: 
    /* adec(aenc(m,pk(i)),sk(i))=m, */
    // only accept signatures from corresponding public keys
    verify(sign(m, sk(i)),m, pk(sk(i))) = true,
    isAct(NormalAct) = true,
    isAct(SpecialAct) = true,
    isAct(UnusualAct) = true

let D = 
  ( in(a);
     if a = NormalAct()
       then out(<a, sign( sk('D'), a)>)
       else if a = SpecialAct()
              then new na; out(<na, sign(<a,na>, sk('D'))>);
                   in(r); if verify( r, na, pk(sk('C'))) = true()
                           then out(<a, na, sign( <a, na>, sk('D')), r>)
  ) 

let C = 
  ( in(m);
     if verify( snd(m), <fst(m), SpecialAct()>, pk(sk('D'))) = true()
       then out(sign( fst(m), sk('C')))
  )

let M = 
  ( in(m); 
     if verify( snd(m), fst(m), pk(sk('D'))) = true()
       then event Control('0','1'); event LogD(fst(m)); event Execute(fst(m))
       else if verify( fst(snd(snd(m))), <fst(m), fst(snd(m))>, pk(sk('D'))) = true()
              then if verify( snd(snd(snd(m))), fst(snd(m)), pk(sk('C'))) = true()
                     then event Control('0','2'); event LogDC(fst(m)); event Execute(fst(m))
  )

// let I = 
//   ( out(SpecialAct()); out(<pk(sk('A')), pk(sk('B'))>)
//   )

// The trusted party can only run once during each run of the protocol
(! (D || C )) || M ||
    out(<pk(sk('D')), pk(sk('C'))>)
|| !(   in('c',<'corrupt',$x>); 
        event Corrupted($x);
        out('c',sk($x))
        /* (  !(in('r',<$x,sid,m>);0) ) */
   )


lemma sanity_logD_not_misbehaving:
    exists-trace
    "Ex a #i #j. (a = NormalAct()) & LogD(a)@i & Execute(a)@j"

lemma sanity_logDC_not_misbehaving:
    exists-trace
    "Ex a #i #j. (a = SpecialAct()) & LogDC(a)@i & Execute(a)@j"

lemma sanity_logD:
    exists-trace
    "Ex a #i #j. LogD(a)@i & Execute(a)@j" 

lemma sanity_logDC:
    exists-trace
    "Ex a #i #j. LogDC(a)@i & Execute(a)@j" 

verdictfunction v1:
    "Ex a #i #j. Execute(a)@i & LogD(a)@j & not(a=NormalAct() | a=SpecialAct())"   -> let verdict1 = <'D'>,
    "Ex a #i #j. Execute(a)@i & LogDC(a)@j & not(a=NormalAct() | a=SpecialAct())" -> let verdict2 = <'D','C'> ,
    otherwise -> empty 

lemma acc:
    v1 accounts [control] 
    for "All a #i.  Execute(a)@i ==> (a=SpecialAct()) | (a=NormalAct())" 
    for parties <'D','C'>

end
