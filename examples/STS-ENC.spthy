theory STS_ENC
begin

section{* The Station-To-Station Protocol (ENC version) *}


// Public key infrastructure
rule Register_pk:
  [ Fr(~ltk) ] 
  --> 
  [ !Ltk($A, ~ltk), !Pk($A, pk(~ltk)) ]

rule Get_pk:
  [ !Pk($A, k) ] 
  --> 
  [ Out(k) ]

rule Reveal_ltk:
    [ !Ltk($A, ~ltk) ]
  --[ LtkReveal($A) ]->
    [ Out(~ltk) ]

// Protocol
rule Init_1:
  [ Fr(~ekI), !Ltk($I, ~ltkI) ]
  -->
  [ Init_1( $I, $R, ~ltkI, ~ekI )
  , Out( <$I, $R, 'g' ^ ~ekI> ) ]

rule Init_2:
    [ Init_1( $I, $R, ~ltkI, ~ekI )
    , !Pk($R, pk(~ltkR))
    , In( <$R, $I, Y, senc{
          sign{h(< Y, 'g'^~ekI >) }~ltkR
	}(Y^~ekI)
      > ) ]
  --[ SessionKey(~ekI,$I,$R, h(Y ^ ~ekI)), 
      AcceptedI(~ekI,$I,$R,'g'^~ekI,Y) ]->
    [ Out( <$I, $R, senc{
          sign{h(< 'g' ^ ~ekI, Y >) }~ltkI
	}(Y^~ekI)
      > ) ]

rule Resp_1:
    [ !Pk($I, pk(~ltkI))
    , !Ltk($R, ~ltkR)
    , Fr(~ekR)
    , In( <$I, $R, X > ) ]
  -->
    [ Resp_1( $I, $R, ~ltkI, ~ltkR, ~ekR, X )
    , Out( <$R, $I, 'g' ^ ~ekR, senc{
          sign{h(< 'g' ^ ~ekR, X >) }~ltkR
        }(X^~ekR)
      > ) ]

rule Resp_2:
    [ Resp_1( $I, $R, ~ltkI, ~ltkR, ~ekR, X )
    , In( <$I, $R, senc{
          sign{h(< X, 'g'^~ekR >) }~ltkI
	}(X^~ekR)
      > ) ]
  --[ SessionKey(~ekR,$I,$R, h(X ^ ~ekR) ),
      AcceptedR(~ekR,$I,$R,X,'g'^~ekR) ]->
    []

rule Sessionkey_Reveal:
    [ SessionKey(~tid, $I,$R,k) ]
  --[ SesskRev(~tid,k) ]->
    [ Out(k) ]

lemma KI_Perfect_Forward_Secrecy_I:
  "not (Ex ttest I R sessKey #i1 #i2 #k hki hkr.
     AcceptedI(ttest,I,R,hki,hkr) @ i1 &
     SessionKey(ttest,I,R,sessKey) @ i2 &
     K(sessKey) @ k
     &
     // No session key reveal of test
     not (Ex #i3. SesskRev(ttest, sessKey) @ i3)
     &
     // No session key reveal of partner
     not (Ex #i3 #i4 tpartner kpartner. SesskRev(tpartner, kpartner) @ i3
       & AcceptedR(tpartner,I,R,hki,hkr) @ i4
     )
     &
     not (Ex #r. LtkReveal(I) @ r & r < i1)
     & 
     not (Ex #r. LtkReveal(R) @ r & r < i1)
     )
  "

lemma KI_Perfect_Forward_Secrecy_R:
  "not (Ex ttest I R sessKey #i1 #i2 #k hki hkr.
     AcceptedR(ttest,I,R,hki,hkr) @ i1 &
     SessionKey(ttest,I,R,sessKey) @ i2 &
     K(sessKey) @ k
     &
     // No session key reveal of test
     not (Ex #i3. SesskRev(ttest, sessKey) @ i3)
     &
     // No session key reveal of partner
     not (Ex #i3 #i4 tpartner kpartner. SesskRev(tpartner, kpartner) @ i3
       & AcceptedI(tpartner,I,R,hki,hkr) @ i4
     )
     &
     not (Ex #r. LtkReveal(I) @ r & r < i1)
     & 
     not (Ex #r. LtkReveal(R) @ r & r < i1)
     )
  "



end
