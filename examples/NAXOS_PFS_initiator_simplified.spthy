theory NAXOS_PFS_initiator_simplified
begin

section{* The NAXOS Key-Exchange Protocol *}

/* Protocol rules */

rule generate_ltk:
   [ Fr(~lk) ] -->
   [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

rule Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
   --[ SidI_1(~ekI,$I,$R, 'g'^h(~lkI, ~ekI )) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(~lkI, ~ekI ) ),
     !EphkI(~ekI),
     Out( 'g'^h(~lkI, ~ekI ) ) ]

rule Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI , hkI), In( Y ), !Pk( $R,'g'^~lkR ) ]
   --[SidI_2( ~ekI, $I, $R, hkI, Y,
       h( <Y^~lkI, ('g'^~lkR)^h(~lkI, ~ekI), Y^h(~lkI, ~ekI ), $I, $R> ) ) ]->
   [ !SesskOfI( ~ekI, 
       h( <Y^~lkI, ('g'^~lkR)^h(~lkI, ~ekI), Y^h(~lkI, ~ekI ), $I, $R> ) ) ]


/* Copy rules to get case distinctions, otherwise no split on solving Sessk(~tid,k) fact
   if it is generated by both roles */

rule Ltk_reveal:
   [ !Ltk($A, k) ]
   --[ LtkRev($A) ]->
   [ Out(k) ]

/* Security properties */

/* An attack is valid in eCK if the session key of the test session is deduced and
   the test session is clean.
*/
lemma eCK_initiator_key:
  "not (Ex #i1 #i2 ttest I R k hkI hkR.
            SidI_2(ttest, I, R, hkI, hkR, k) @ i1 & K( k ) @ i2

	    /* If there is no partner thread, then there is no longterm-key-reveal for
	       the intended partner.
	       (We model eCK-wpfs, for eCK-pfs, add i1 < i3 to conclusion) */
            & (All #i3. LtkRev( R ) @ i3 ==>
                      (i1 < i3) ))"

end
