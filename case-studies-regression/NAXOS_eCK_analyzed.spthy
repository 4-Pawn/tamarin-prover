theory NAXOS_eCK begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* NAXOS *}

rule (modulo E) generate_ltk:
   [ Fr( ~lkA ) ]
  -->
   [ !Ltk( $A, ~lkA ), !Pk( $A, 'g'^~lkA ), Out( 'g'^~lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^h(<'1', ~ekI, ~lkI>) ) ]->
   [
   Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(<'1', ~ekI, ~lkI>) ), !Ephk( ~ekI ),
   Out( 'g'^h(<'1', ~ekI, ~lkI>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y,
          h(<'2', Y^~lkI, 'g'^~lkR^h(<'1', ~ekI, ~lkI>), Y^h(<'1', ~ekI, ~lkI>), 
             $I, $R>)
  )
  ]->
   [
   !Sessk( ~ekI,
           h(<'2', Y^~lkI, 'g'^~lkR^h(<'1', ~ekI, ~lkI>), Y^h(<'1', ~ekI, ~lkI>), 
              $I, $R>)
   )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI.3, $I.1, $R.2, ~lkI.4, hkI.7 ), In( Y.6 ),
     !Pk( $R.2, 'g'^~x.15 )
     ]
    --[
    SidI_2( ~ekI.3, $I.1, $R.2, hkI.7, Y.6,
            h(<'2', z.10, 'g'^(~x.15*h(<'1', ~ekI.3, ~lkI.4>)), z.12, $I.1, $R.2>)
    )
    ]->
     [
     !Sessk( ~ekI.3,
             h(<'2', z.10, 'g'^(~x.15*h(<'1', ~ekI.3, ~lkI.4>)), z.12, $I.1, $R.2>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekI.3
              = ~ekI.446
        ~lkI.4
              = ~lkI.447
        Y.6   = Y.448
        z.10  = Y.448^~lkI.447
        z.12  = Y.448^h(<'1', ~ekI.446, ~lkI.447>)
    
     2. ~ekI.3
              = ~ekI.447
        ~lkI.4
              = ~lkI.448
        Y.6   = z.449^inv(~lkI.448)
        z.10  = z.449
        z.12  = z.449^(h(<'1', ~ekI.447, ~lkI.448>)*inv(~lkI.448))
    
     3. ~ekI.3
              = ~ekI.447
        ~lkI.4
              = ~lkI.448
        Y.6   = z.449^inv(h(<'1', ~ekI.447, ~lkI.448>))
        z.10  = z.449^(~lkI.448*inv(h(<'1', ~ekI.447, ~lkI.448>)))
        z.12  = z.449
    
     4. ~ekI.3
              = ~ekI.448
        ~lkI.4
              = ~lkI.449
        Y.6   = x.450^inv((~lkI.449*h(<'1', ~ekI.448, ~lkI.449>)))
        z.10  = x.450^inv(h(<'1', ~ekI.448, ~lkI.449>))
        z.12  = x.450^inv(~lkI.449)
    
     5. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^x.468
        z.10  = x.467^(~lkI.466*x.468)
        z.12  = x.467^(x.468*h(<'1', ~ekI.465, ~lkI.466>))
    
     6. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^inv((~lkI.466*x.468))
        z.10  = x.467^inv(x.468)
        z.12  = x.467^(h(<'1', ~ekI.465, ~lkI.466>)*inv((~lkI.466*x.468)))
    
     7. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^inv((~lkI.466*x.468*h(<'1', ~ekI.465, ~lkI.466>)))
        z.10  = x.467^inv((x.468*h(<'1', ~ekI.465, ~lkI.466>)))
        z.12  = x.467^inv((~lkI.466*x.468))
    
     8. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^inv((x.468*h(<'1', ~ekI.465, ~lkI.466>)))
        z.10  = x.467^(~lkI.466*inv((x.468*h(<'1', ~ekI.465, ~lkI.466>))))
        z.12  = x.467^inv(x.468)
    
     9. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^(x.468*inv(~lkI.466))
        z.10  = x.467^x.468
        z.12  = x.467^(x.468*h(<'1', ~ekI.465, ~lkI.466>)*inv(~lkI.466))
    
    10. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^(x.468*inv(h(<'1', ~ekI.465, ~lkI.466>)))
        z.10  = x.467^(~lkI.466*x.468*inv(h(<'1', ~ekI.465, ~lkI.466>)))
        z.12  = x.467^x.468
    
    11. ~ekI.3
              = ~ekI.465
        ~lkI.4
              = ~lkI.466
        Y.6   = x.467^(x.468*inv((~lkI.466*h(<'1', ~ekI.465, ~lkI.466>))))
        z.10  = x.467^(x.468*inv(h(<'1', ~ekI.465, ~lkI.466>)))
        z.12  = x.467^(x.468*inv(~lkI.466))
    
    12. ~ekI.3
              = ~ekI.482
        ~lkI.4
              = ~lkI.483
        Y.6   = x.484^(x.485*inv((~lkI.483*x.486)))
        z.10  = x.484^(x.485*inv(x.486))
        z.12  = x.484^(x.485*h(<'1', ~ekI.482, ~lkI.483>)*inv((~lkI.483*x.486)))
    
    13. ~ekI.3
              = ~ekI.482
        ~lkI.4
              = ~lkI.483
        Y.6   = x.484^(x.485*inv((~lkI.483*x.486*h(<'1', ~ekI.482, ~lkI.483>))))
        z.10  = x.484^(x.485*inv((x.486*h(<'1', ~ekI.482, ~lkI.483>))))
        z.12  = x.484^(x.485*inv((~lkI.483*x.486)))
    
    14. ~ekI.3
              = ~ekI.482
        ~lkI.4
              = ~lkI.483
        Y.6   = x.484^(x.485*inv((x.486*h(<'1', ~ekI.482, ~lkI.483>))))
        z.10  = x.484^(~lkI.483*x.485*inv((x.486*h(<'1', ~ekI.482, ~lkI.483>))))
        z.12  = x.484^(x.485*inv(x.486))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^h(<'1', ~ekR, ~lkR>),
          h(<'2', 'g'^~lkI^h(<'1', ~ekR, ~lkR>), X^~lkR, X^h(<'1', ~ekR, ~lkR>), 
             $I, $R>)
  )
  ]->
   [
   Out( 'g'^h(<'1', ~ekR, ~lkR>) ), !Ephk( ~ekR ),
   !Sessk( ~ekR,
           h(<'2', 'g'^~lkI^h(<'1', ~ekR, ~lkR>), X^~lkR, X^h(<'1', ~ekR, ~lkR>), 
              $I, $R>)
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X.6 ), Fr( ~ekR.3 ), !Ltk( $R.2, ~lkR.5 ), !Pk( $I.1, 'g'^~x.15 ) ]
    --[
    SidR_1( ~ekR.3, $I.1, $R.2, X.6, 'g'^h(<'1', ~ekR.3, ~lkR.5>),
            h(<'2', 'g'^(~x.15*h(<'1', ~ekR.3, ~lkR.5>)), z.11, z.12, $I.1, $R.2>)
    )
    ]->
     [
     Out( 'g'^h(<'1', ~ekR.3, ~lkR.5>) ), !Ephk( ~ekR.3 ),
     !Sessk( ~ekR.3,
             h(<'2', 'g'^(~x.15*h(<'1', ~ekR.3, ~lkR.5>)), z.11, z.12, $I.1, $R.2>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekR.3
              = ~ekR.824
        ~lkR.5
              = ~lkR.825
        X.6   = X.826
        z.11  = X.826^~lkR.825
        z.12  = X.826^h(<'1', ~ekR.824, ~lkR.825>)
    
     2. ~ekR.3
              = ~ekR.824
        ~lkR.5
              = ~lkR.825
        X.6   = z.826^inv(~lkR.825)
        z.11  = z.826
        z.12  = z.826^(h(<'1', ~ekR.824, ~lkR.825>)*inv(~lkR.825))
    
     3. ~ekR.3
              = ~ekR.824
        ~lkR.5
              = ~lkR.825
        X.6   = z.826^inv(h(<'1', ~ekR.824, ~lkR.825>))
        z.11  = z.826^(~lkR.825*inv(h(<'1', ~ekR.824, ~lkR.825>)))
        z.12  = z.826
    
     4. ~ekR.3
              = ~ekR.825
        ~lkR.5
              = ~lkR.826
        X.6   = x.827^inv((~lkR.826*h(<'1', ~ekR.825, ~lkR.826>)))
        z.11  = x.827^inv(h(<'1', ~ekR.825, ~lkR.826>))
        z.12  = x.827^inv(~lkR.826)
    
     5. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^x.855
        z.11  = x.854^(~lkR.853*x.855)
        z.12  = x.854^(x.855*h(<'1', ~ekR.852, ~lkR.853>))
    
     6. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^inv((~lkR.853*x.855))
        z.11  = x.854^inv(x.855)
        z.12  = x.854^(h(<'1', ~ekR.852, ~lkR.853>)*inv((~lkR.853*x.855)))
    
     7. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^inv((~lkR.853*x.855*h(<'1', ~ekR.852, ~lkR.853>)))
        z.11  = x.854^inv((x.855*h(<'1', ~ekR.852, ~lkR.853>)))
        z.12  = x.854^inv((~lkR.853*x.855))
    
     8. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^inv((x.855*h(<'1', ~ekR.852, ~lkR.853>)))
        z.11  = x.854^(~lkR.853*inv((x.855*h(<'1', ~ekR.852, ~lkR.853>))))
        z.12  = x.854^inv(x.855)
    
     9. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^(x.855*inv(~lkR.853))
        z.11  = x.854^x.855
        z.12  = x.854^(x.855*h(<'1', ~ekR.852, ~lkR.853>)*inv(~lkR.853))
    
    10. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^(x.855*inv(h(<'1', ~ekR.852, ~lkR.853>)))
        z.11  = x.854^(~lkR.853*x.855*inv(h(<'1', ~ekR.852, ~lkR.853>)))
        z.12  = x.854^x.855
    
    11. ~ekR.3
              = ~ekR.852
        ~lkR.5
              = ~lkR.853
        X.6   = x.854^(x.855*inv((~lkR.853*h(<'1', ~ekR.852, ~lkR.853>))))
        z.11  = x.854^(x.855*inv(h(<'1', ~ekR.852, ~lkR.853>)))
        z.12  = x.854^(x.855*inv(~lkR.853))
    
    12. ~ekR.3
              = ~ekR.879
        ~lkR.5
              = ~lkR.880
        X.6   = x.881^(x.882*inv((~lkR.880*x.883)))
        z.11  = x.881^(x.882*inv(x.883))
        z.12  = x.881^(x.882*h(<'1', ~ekR.879, ~lkR.880>)*inv((~lkR.880*x.883)))
    
    13. ~ekR.3
              = ~ekR.879
        ~lkR.5
              = ~lkR.880
        X.6   = x.881^(x.882*inv((~lkR.880*x.883*h(<'1', ~ekR.879, ~lkR.880>))))
        z.11  = x.881^(x.882*inv((x.883*h(<'1', ~ekR.879, ~lkR.880>))))
        z.12  = x.881^(x.882*inv((~lkR.880*x.883)))
    
    14. ~ekR.3
              = ~ekR.879
        ~lkR.5
              = ~lkR.880
        X.6   = x.881^(x.882*inv((x.883*h(<'1', ~ekR.879, ~lkR.880>))))
        z.11  = x.881^(~lkR.880*x.882*inv((x.883*h(<'1', ~ekR.879, ~lkR.880>))))
        z.12  = x.881^(x.882*inv(x.883))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekA ) ] --[ EphkRev( ~ekA ) ]-> [ Out( ~ekA ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ekI.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ekI.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ekI.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ekI.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 ekR.13 kpartner.14.
                (SidR_1( ekR.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( ekR.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 ekR.18 kpartner.19.
               ((SidR_1( ekR.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
                (LtkRev( R.4 ) @ #i4.16)) &
               (EphkRev( ekR.18 ) @ #i5.17)))) &
        (All #i3.20.
          (LtkRev( R.4 ) @ #i3.20) ==>
          (Ex #i4.21 ekR.22 kpartner.23.
            SidR_1( ekR.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ekI.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ekI.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ekI.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ekI.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 ekR.13 kpartner.14.
    (SidR_1( ekR.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( ekR.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 ekR.18 kpartner.19.
    (SidR_1( ekR.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
    (LtkRev( R.4 ) @ #i4.16) &
    (EphkRev( ekR.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.20.
    (LtkRev( R.4 ) @ #i3.20)
   ==>
    Ex #i4.21 ekR.22 kpartner.23.
     (SidR_1( ekR.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)
    &
     T)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.11, $I.9, $R.10, ~lkI.12, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.10, 'g'^~x.23 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.26,
                           h(<'2', z.18, 'g'^(~x.23*h(<'1', ~ekI.11, ~lkI.12>)), z.20, $I.9, $R.10>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      solve( splitEqs(1) )
        case split_case_1
        by contradiction // from formulas
      next
        case split_case_2
        solve( (#vf.24, 0)[!KU( f_.25,
                                'g'^(~x.133*h(<'1', ~tid.127, ~lkI.135>)*inv(~lkI.135))
                           )] /* may loop */ )
          case Resp_1
          by solve( KU((#vr.180, 1), ~x.162) )
        next
          case cexp
          by solve( KU((#vr.140, 1), ~x.133) )
        next
          case generate_ltk
          by solve( KU((#vr.153, 1), ~lkI.188) )
        qed
      qed
    next
      case ch
      solve( KU((#vr.65, 0), 'g'^(~x.23*h(<'1', ~ekI.11, ~lkI.12>))) )
        case Init_1
        solve( (#vr.95, 1)[!KU( f_.98, ~x.120 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.166, 2)[!Ltk( $R.10, ~lkR.208 )] )
            case generate_ltk
            solve( (#i4.166, 3)[!Pk( $I.9, 'g'^~x.184 )] )
              case generate_ltk
              solve( KU((#vr.65, 0), 'g'^(~lkI.206*h(<'1', ~ekR.207, ~lkR.208>))) )
                case Resp_1
                solve( (#vr.275, 1)[!KU( f_.278, ~lkI.281 )] /* may loop */ )
                  case Ltk_reveal
                  solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.205, ~lkI.281>)*
                                              h(<'1', ~ekR.282, ~lkR.283>))) )
                    case Init_1
                    solve( (#vr.333, 1)[!KU( f_.336, h(<'1', ~ekR.365, ~lkR.366>)
                                        )] /* may loop */ )
                      case ch
                      solve( KU((#vr.370, 0), ~ekR.365) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case Resp_1
                    solve( (#vr.350, 1)[!KU( f_.353, h(<'1', ~ekI.363, ~lkI.364>)
                                        )] /* may loop */ )
                      case ch
                      solve( KU((#vr.370, 0), ~ekI.363) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case cexp
                    solve( KU((#vr.310, 1), h(<'1', ~ekI.205, ~lkI.281>)) )
                      case ch
                      solve( KU((#vr.317, 0), ~ekI.205) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              next
                case cexp
                solve( KU((#vr.235, 1), ~lkI.206) )
                  case Ltk_reveal
                  solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.205, ~lkI.206>)*
                                              h(<'1', ~ekR.207, ~lkR.208>))) )
                    case Init_1
                    solve( KU((#vr.235, 1), h(<'1', ~ekR.317, ~lkR.318>)) )
                      case ch
                      solve( KU((#vr.322, 0), ~ekR.317) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case Resp_1
                    solve( KU((#vr.235, 1), h(<'1', ~ekR.317, ~lkR.318>)) )
                      case ch
                      solve( KU((#vr.325, 0), ~ekR.317) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case cexp
                    solve( KU((#vr.235, 1), h(<'1', ~ekR.207, ~lkR.208>)) )
                      case ch
                      solve( KU((#vr.269, 0), ~ekR.207) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              next
                case generate_ltk
                solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.205, ~lkI.281>)*
                                            h(<'1', ~ekR.282, ~lkR.283>))) )
                  case Init_1
                  solve( (#vr.248, 1)[!KU( f_.251, h(<'1', ~ekR.343, ~lkR.344>)
                                      )] /* may loop */ )
                    case ch
                    solve( KU((#vr.348, 0), ~ekR.343) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case Resp_1
                  solve( (#vr.248, 1)[!KU( f_.251, h(<'1', ~ekR.343, ~lkR.344>)
                                      )] /* may loop */ )
                    case ch
                    solve( KU((#vr.351, 0), ~ekR.343) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case cexp
                  solve( (#vr.248, 1)[!KU( f_.251, h(<'1', ~ekR.282, ~lkR.283>)
                                      )] /* may loop */ )
                    case ch
                    solve( KU((#vr.295, 0), ~ekR.282) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case cexp
        solve( KU((#vr.72, 1), ~x.23) )
          case Ltk_reveal
          solve( (#i4.121, 2)[!Ltk( $R.10, ~lkR.129 )] )
            case generate_ltk
            solve( (#i4.121, 3)[!Pk( $I.9, 'g'^~x.139 )] )
              case generate_ltk
              solve( KU((#vr.65, 0), 'g'^(~lkI.169*h(<'1', ~ekR.170, ~lkA.160>))) )
                case Resp_1
                solve( (#vr.227, 1)[!KU( f_.230, ~lkI.234 )] /* may loop */ )
                  case Ltk_reveal
                  solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.168, ~lkI.234>)*
                                              h(<'1', ~ekR.235, ~lkA.233>))) )
                    case Init_1
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.315, ~lkI.317>)) )
                      case ch
                      solve( KU((#vr.325, 0), ~ekI.315) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case Resp_1
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.315, ~lkI.317>)) )
                      case ch
                      solve( KU((#vr.322, 0), ~ekI.315) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case cexp
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.168, ~lkI.234>)) )
                      case ch
                      solve( KU((#vr.269, 0), ~ekI.168) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              next
                case cexp
                solve( KU((#vr.187, 1), ~lkI.169) )
                  case Ltk_reveal
                  solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.168, ~lkI.169>)*
                                              h(<'1', ~ekR.170, ~lkA.160>))) )
                    case Init_1
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.268, ~lkI.269>)) )
                      case ch
                      solve( KU((#vr.277, 0), ~ekI.268) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case Resp_1
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.268, ~lkI.269>)) )
                      case ch
                      solve( KU((#vr.277, 0), ~ekI.268) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case cexp
                    solve( KU((#vr.72, 1), h(<'1', ~ekI.168, ~lkI.169>)) )
                      case ch
                      solve( KU((#vr.221, 0), ~ekI.168) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              next
                case generate_ltk
                solve( KU((#vr.65, 0), 'g'^(h(<'1', ~ekI.168, ~lkI.234>)*
                                            h(<'1', ~ekR.235, ~lkA.233>))) )
                  case Init_1
                  solve( KU((#vr.72, 1), h(<'1', ~ekI.293, ~lkI.295>)) )
                    case ch
                    solve( KU((#vr.303, 0), ~ekI.293) )
                      case Ephk_reveal
                      solve( KU((#vr.303, 0), ~lkI.295) )
                        case Ltk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                next
                  case Resp_1
                  solve( KU((#vr.72, 1), h(<'1', ~ekI.293, ~lkI.295>)) )
                    case ch
                    solve( KU((#vr.303, 0), ~ekI.293) )
                      case Ephk_reveal
                      solve( KU((#vr.303, 0), ~lkI.295) )
                        case Ltk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                next
                  case cexp
                  solve( KU((#vr.72, 1), h(<'1', ~ekI.168, ~lkI.234>)) )
                    case ch
                    solve( KU((#vr.247, 0), ~ekI.168) )
                      case Ephk_reveal
                      solve( KU((#vr.247, 0), ~lkI.234) )
                        case Ltk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk
        solve( (#vr.85, 1)[!KU( f_.88, h(<'1', ~ekI.118, ~lkI.119>)
                           )] /* may loop */ )
          case ch
          solve( KU((#vr.124, 0), ~ekI.118) )
            case Ephk_reveal
            solve( KU((#vr.124, 0), ~lkI.119) )
              case Ltk_reveal
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i1 #i2.1 ekR.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ekR.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ekR.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ekR.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 ekI.13 kpartner.14.
                (SidI_2( ekI.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( ekI.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 ekI.18.
               ((SidI_1( ekI.18, I.3, R.4, hkI.6 ) @ #i3.15) &
                (LtkRev( I.3 ) @ #i4.16)) &
               (EphkRev( ekI.18 ) @ #i5.17)))) &
        (All #i3.19.
          (LtkRev( I.3 ) @ #i3.19) ==>
          (Ex #i4.20 ekI.21. SidI_1( ekI.21, I.3, R.4, hkI.6 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ekR.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ekR.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ekR.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ekR.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 ekI.13 kpartner.14.
    (SidI_2( ekI.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( ekI.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 ekI.18.
    (SidI_1( ekI.18, I.3, R.4, hkI.6 ) @ #i3.15) &
    (LtkRev( I.3 ) @ #i4.16) &
    (EphkRev( ekI.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( I.3 ) @ #i3.19)
   ==>
    Ex #i4.20 ekI.21. (SidI_1( ekI.21, I.3, R.4, hkI.6 ) @ #i4.20) & T)"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.10, ~lkR.13 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.9, 'g'^~x.23 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.27,
                           h(<'2', 'g'^(~x.23*h(<'1', ~ekR.11, ~lkR.13>)), z.19, z.20, $I.9, $R.10>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      solve( splitEqs(1) )
        case split_case_1
        by contradiction // from formulas
      next
        case split_case_2
        solve( (#vf.24, 0)[!KU( f_.25,
                                'g'^(~x.121*h(<'1', ~tid.115, ~lkR.123>)*inv(~lkR.123))
                           )] /* may loop */ )
          case Init_1
          by solve( KU((#vr.151, 1), ~x.175) )
        next
          case cexp
          by solve( KU((#vr.128, 1), ~x.121) )
        next
          case generate_ltk
          by solve( KU((#vr.141, 1), ~lkR.176) )
        qed
      qed
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.53, 0), 'g'^(~x.23*h(<'1', ~ekR.11, ~lkR.13>))) )
        case Resp_1
        solve( (#vr.100, 1)[!KU( f_.103, ~x.82 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.154, 1)[!Ltk( $I.9, ~lkI.163 )] )
            case generate_ltk
            solve( KU((#vr.53, 0), 'g'^(~lkR.181*h(<'1', ~ekI.182, ~lkA.178>))) )
              case Init_1
              solve( (#vr.211, 1)[!KU( f_.214, ~lkR.235 )] /* may loop */ )
                case Ltk_reveal
                solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.180, ~lkR.235>)*
                                            h(<'1', ~ekI.236, ~lkA.234>))) )
                  case Init_1
                  solve( (#vr.286, 1)[!KU( f_.289, h(<'1', ~ekR.316, ~lkR.318>)
                                      )] /* may loop */ )
                    case ch
                    solve( KU((#vr.323, 0), ~ekR.316) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case Resp_1
                  solve( (#vr.303, 1)[!KU( f_.306, h(<'1', ~ekI.319, ~lkA.317>)
                                      )] /* may loop */ )
                    case ch
                    solve( KU((#vr.323, 0), ~lkA.317) )
                      case Ltk_reveal
                      solve( KU((#vr.323, 0), ~ekI.319) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                next
                  case cexp
                  solve( KU((#vr.263, 1), h(<'1', ~ekR.180, ~lkR.235>)) )
                    case ch
                    solve( KU((#vr.270, 0), ~ekR.180) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            next
              case cexp
              solve( KU((#vr.188, 1), ~lkR.181) )
                case Ltk_reveal
                solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.180, ~lkR.181>)*
                                            h(<'1', ~ekI.182, ~lkA.178>))) )
                  case Init_1
                  solve( KU((#vr.188, 1), h(<'1', ~ekI.271, ~lkA.268>)) )
                    case ch
                    solve( KU((#vr.278, 0), ~lkA.268) )
                      case Ltk_reveal
                      solve( KU((#vr.278, 0), ~ekI.271) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                next
                  case Resp_1
                  solve( KU((#vr.188, 1), h(<'1', ~ekI.271, ~lkA.268>)) )
                    case ch
                    solve( KU((#vr.275, 0), ~lkA.268) )
                      case Ltk_reveal
                      solve( KU((#vr.275, 0), ~ekI.271) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                next
                  case cexp
                  solve( KU((#vr.188, 1), h(<'1', ~ekI.182, ~lkA.178>)) )
                    case ch
                    solve( KU((#vr.222, 0), ~lkA.178) )
                      case Ltk_reveal
                      solve( KU((#vr.222, 0), ~ekI.182) )
                        case Ephk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  qed
                qed
              qed
            next
              case generate_ltk
              solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.180, ~lkR.235>)*
                                          h(<'1', ~ekI.236, ~lkA.234>))) )
                case Init_1
                solve( (#vr.201, 1)[!KU( f_.204, h(<'1', ~ekI.297, ~lkA.295>)
                                    )] /* may loop */ )
                  case ch
                  solve( KU((#vr.304, 0), ~lkA.295) )
                    case Ltk_reveal
                    solve( KU((#vr.304, 0), ~ekI.297) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              next
                case Resp_1
                solve( (#vr.201, 1)[!KU( f_.204, h(<'1', ~ekI.297, ~lkA.295>)
                                    )] /* may loop */ )
                  case ch
                  solve( KU((#vr.301, 0), ~lkA.295) )
                    case Ltk_reveal
                    solve( KU((#vr.301, 0), ~ekI.297) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              next
                case cexp
                solve( (#vr.201, 1)[!KU( f_.204, h(<'1', ~ekI.236, ~lkA.234>)
                                    )] /* may loop */ )
                  case ch
                  solve( KU((#vr.248, 0), ~lkA.234) )
                    case Ltk_reveal
                    solve( KU((#vr.248, 0), ~ekI.236) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case cexp
        solve( KU((#vr.60, 1), ~x.23) )
          case Ltk_reveal
          solve( (#i4.109, 1)[!Ltk( $I.9, ~lkI.118 )] )
            case generate_ltk
            solve( KU((#vr.53, 0), 'g'^(~lkR.136*h(<'1', ~ekI.137, ~lkA.133>))) )
              case Init_1
              solve( (#vr.166, 1)[!KU( f_.169, ~lkR.190 )] /* may loop */ )
                case Ltk_reveal
                solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.135, ~lkR.190>)*
                                            h(<'1', ~ekI.191, ~lkA.189>))) )
                  case Init_1
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.271, ~lkR.273>)) )
                    case ch
                    solve( KU((#vr.278, 0), ~ekR.271) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case Resp_1
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.271, ~lkR.273>)) )
                    case ch
                    solve( KU((#vr.278, 0), ~ekR.271) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case cexp
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.135, ~lkR.190>)) )
                    case ch
                    solve( KU((#vr.225, 0), ~ekR.135) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            next
              case cexp
              solve( KU((#vr.143, 1), ~lkR.136) )
                case Ltk_reveal
                solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.135, ~lkR.136>)*
                                            h(<'1', ~ekI.137, ~lkA.133>))) )
                  case Init_1
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.224, ~lkR.225>)) )
                    case ch
                    solve( KU((#vr.233, 0), ~ekR.224) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case Resp_1
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.224, ~lkR.225>)) )
                    case ch
                    solve( KU((#vr.230, 0), ~ekR.224) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case cexp
                  solve( KU((#vr.60, 1), h(<'1', ~ekR.135, ~lkR.136>)) )
                    case ch
                    solve( KU((#vr.177, 0), ~ekR.135) )
                      case Ephk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            next
              case generate_ltk
              solve( KU((#vr.53, 0), 'g'^(h(<'1', ~ekR.135, ~lkR.190>)*
                                          h(<'1', ~ekI.191, ~lkA.189>))) )
                case Init_1
                solve( KU((#vr.60, 1), h(<'1', ~ekR.249, ~lkR.251>)) )
                  case ch
                  solve( KU((#vr.259, 0), ~ekR.249) )
                    case Ephk_reveal
                    solve( KU((#vr.259, 0), ~lkR.251) )
                      case Ltk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              next
                case Resp_1
                solve( KU((#vr.60, 1), h(<'1', ~ekR.249, ~lkR.251>)) )
                  case ch
                  solve( KU((#vr.256, 0), ~ekR.249) )
                    case Ephk_reveal
                    solve( KU((#vr.256, 0), ~lkR.251) )
                      case Ltk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              next
                case cexp
                solve( KU((#vr.60, 1), h(<'1', ~ekR.135, ~lkR.190>)) )
                  case ch
                  solve( KU((#vr.203, 0), ~ekR.135) )
                    case Ephk_reveal
                    solve( KU((#vr.203, 0), ~lkR.190) )
                      case Ltk_reveal
                      by contradiction // from formulas
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk
        solve( (#vr.73, 1)[!KU( f_.76, h(<'1', ~ekR.106, ~lkR.107>)
                           )] /* may loop */ )
          case ch
          solve( KU((#vr.112, 0), ~ekR.106) )
            case Ephk_reveal
            solve( KU((#vr.112, 0), ~lkR.107) )
              case Ltk_reveal
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/NAXOS_eCK.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/NAXOS_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.743147s
  eCK_initiator_key: complete proof (91 steps)
  eCK_responder_key: complete proof (96 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/NAXOS_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.743147s
  eCK_initiator_key: complete proof (91 steps)
  eCK_responder_key: complete proof (96 steps)

==============================================================================
*/
