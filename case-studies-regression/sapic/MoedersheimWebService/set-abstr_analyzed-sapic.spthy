theory SetAbst begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, check_rep/2, fst/1, get_rep/1, pair/2, pk/1,
           rep/2 [private], sign/2, snd/1, true/0, verify/3
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

section{* The PKI-example *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1:
   [ State_1( ) ] --> [ State_11( ), State_12( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_pki_11:
   [ State_11( ), Fr( pki ) ] --> [ State_111( pki ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111:
   [ State_111( pki ) ] --> [ !Semistate_1111( pki ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111:
   [ !Semistate_1111( pki ) ] --> [ State_1111( pki ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111:
   [ State_1111( pki ) ] --> [ State_11111( pki ), State_11112( pki ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111:
   [ State_11111( pki ) ] --> [ State_111111( pki ), State_111112( pki ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_new_user__111111:
   [ State_111111( pki ), In( <'new', user> ) ]
  -->
   [ State_1111111( pki, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_sk_1111111:
   [ State_1111111( pki, user ), Fr( ~sk ) ]
  -->
   [ State_11111111( ~sk, pki, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MSR_11111111:
   [ State_11111111( ~sk, pki, user ) ]
  --[ Event( ), HonestKey( ~sk ) ]->
   [
   State_111111111( ~sk, pki, user ), ServerDB( pki, user, pk(~sk) ),
   ClientKey( user, ~sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_pksk_111111111:
   [ State_111111111( ~sk, pki, user ) ]
  -->
   [ State_1111111111( ~sk, pki, user ), Out( pk(~sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111:
   [ State_1111111111( ~sk, pki, user ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_user_sk__111112:
   [ State_111112( pki ), In( <user, sk> ) ]
  -->
   [ State_1111121( pki, sk, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MSR_1111121:
   [ State_1111121( pki, sk, user ) ]
  --[ Event( ) ]->
   [ State_11111211( pki, sk, user ), ServerDB( pki, user, pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111211:
   [ State_11111211( pki, sk, user ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_renew_user_pknsk__11112:
   [ State_11112( pki ), In( <'renew', user, pk(nsk)> ) ]
  -->
   [ State_111121( nsk, pki, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_sign_renew_user_pknsk_sk_111121:
   [
   State_111121( nsk, pki, user ), In( sign(<'renew', user, pk(nsk)>, sk) )
   ]
  -->
   [ State_1111211( nsk, pki, sk, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MSR_1111211:
   [ State_1111211( nsk, pki, sk, user ), ServerDB( pki, user, pk(sk) ) ]
  --[ Event( ) ]->
   [ State_11112111( nsk, pki, sk, user ), ServerDB( pki, user, pk(nsk) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) out_sign_confirm_sign_renew_user_pknsk_sk_pki_11112111:
   [ State_11112111( nsk, pki, sk, user ) ]
  -->
   [
   State_111121111( nsk, pki, sk, user ),
   Out( sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111121111:
   [ State_111121111( nsk, pki, sk, user ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_user_12:
   [ State_12( ), Fr( user ) ] --> [ State_121( user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_121:
   [ State_121( user ) ] --> [ !Semistate_1211( user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_121:
   [ !Semistate_1211( user ) ] --> [ State_1211( user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_nsk_1211:
   [ State_1211( user ), Fr( ~nsk ) ] --> [ State_12111( ~nsk, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MSR_12111:
   [ State_12111( ~nsk, user ), ClientKey( user, ~sk ) ]
  --[ Event( ), HonestKey( ~nsk ) ]->
   [ State_121111( ~nsk, ~sk, user ), ClientKey( user, ~nsk ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) out_renew_user_pknsk__121111:
   [ State_121111( ~nsk, ~sk, user ) ]
  -->
   [ State_1211111( ~nsk, ~sk, user ), Out( <'renew', user, pk(~nsk)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_sign_renew_user_pknsk_sk_1211111:
   [ State_1211111( ~nsk, ~sk, user ) ]
  -->
   [
   State_12111111( ~nsk, ~sk, user ),
   Out( sign(<'renew', user, pk(~nsk)>, ~sk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_sign_confirm_sign_renew_user_pknsk_sk_pki_12111111:
   [
   State_12111111( ~nsk, ~sk, user ),
   In( sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) )
   ]
  -->
   [ State_121111111( ~nsk, ~sk, pki, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Revokedsk_121111111:
   [ State_121111111( ~nsk, ~sk, pki, user ) ]
  --[ Event( ), Revoked( ~sk ) ]->
   [ State_1211111111( ~nsk, ~sk, pki, user ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_sk_1211111111:
   [ State_1211111111( ~nsk, ~sk, pki, user ) ]
  -->
   [ State_12111111111( ~nsk, ~sk, pki, user ), Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_12111111111:
   [ State_12111111111( ~nsk, ~sk, pki, user ) ] --> [ ]

  /* has exactly the trivial AC variant */

axiom single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma Knows_Honest_Key_imp_Revoked:
  all-traces
  "∀ sk #i #d.
    ((HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d)) ⇒ (∃ #r. Revoked( sk ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sk #i #d.
  (HonestKey( sk ) @ #i) ∧ (K( sk ) @ #d) ∧ ∀ #r. (Revoked( sk ) @ #r) ⇒ ⊥"
*/
simplify
solve( HonestKey( sk ) @ #i )
  case MSR_11111111
  solve( State_11111111( ~sk, pki, user ) ▶₀ #i )
    case new_sk_1111111
    solve( !KU( ~sk ) @ #vk )
      case out_sk_1211111111
      by contradiction /* from formulas */
    qed
  qed
next
  case MSR_12111
  solve( State_12111( ~nsk, user ) ▶₀ #i )
    case new_nsk_1211
    solve( !KU( ~nsk ) @ #vk )
      case out_sk_1211111111
      by contradiction /* from formulas */
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7. OK.
 checking installation: OK.


analyzing: case-studies-sapic-regression/MoedersheimWebService/set-abstr.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/MoedersheimWebService/set-abstr.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.57205s
  Knows_Honest_Key_imp_Revoked (all-traces): verified (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/MoedersheimWebService/set-abstr.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.57205s
  Knows_Honest_Key_imp_Revoked (all-traces): verified (8 steps)

==============================================================================
*/
