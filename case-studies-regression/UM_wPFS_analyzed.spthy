theory UM_wPFS begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* The Unified Model (UM) Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]->
   [ !Sessk( ~ekI, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<z, 'g'^(~lkI*~x)>) ) ]->
     [ !Sessk( ~ekI, h(<z, 'g'^(~lkI*~x)>) ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.31
       Y     = Y.34
       z     = Y.34^~ekI.31
    
    2. ~ekI  = ~ekI.31
       Y     = z.37^inv(~ekI.31)
       z     = z.37
    
    3. ~ekI  = ~ekI.143
       Y     = x.281^x.282
       z     = x.281^(~ekI.143*x.282)
    
    4. ~ekI  = ~ekI.143
       Y     = x.281^inv((~ekI.143*x.282))
       z     = x.281^inv(x.282)
    
    5. ~ekI  = ~ekI.143
       Y     = x.281^(x.282*inv(~ekI.143))
       z     = x.281^x.282
    
    6. ~ekI  = ~ekI.144
       Y     = x.282^(x.284*inv((~ekI.144*x.283)))
       z     = x.282^(x.284*inv(x.283))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) ) ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<z, 'g'^(~lkR*~x)>) ) ]->
     [ Out( 'g'^~ekR ), !Ephk( ~ekR ), !Sessk( ~ekR, h(<z, 'g'^(~lkR*~x)>) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.34
       X     = X.37
       z     = X.37^~ekR.34
    
    2. ~ekR  = ~ekR.34
       X     = z.40^inv(~ekR.34)
       z     = z.40
    
    3. ~ekR  = ~ekR.218
       X     = x.431^x.432
       z     = x.431^(~ekR.218*x.432)
    
    4. ~ekR  = ~ekR.218
       X     = x.431^inv((~ekR.218*x.432))
       z     = x.431^inv(x.432)
    
    5. ~ekR  = ~ekR.218
       X     = x.431^(x.432*inv(~ekR.218))
       z     = x.431^x.432
    
    6. ~ekR  = ~ekR.219
       X     = x.432^(x.434*inv((~ekR.219*x.433)))
       z     = x.432^(x.434*inv(x.433))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) wPFS_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12.
           (LtkRev( I.3 ) @ #i3.12) ==>
           ((#i1 < #i3.12) &
            (Ex #i4.13 tpartner.14 kpartner.15.
              SidR_1( tpartner.14, I.3, R.4, hkI.6, hkR.7, kpartner.15 ) @ #i4.13)))) &
        (All #i3.16.
          (LtkRev( R.4 ) @ #i3.16) ==>
          ((#i1 < #i3.16) &
           (Ex #i4.17 tpartner.18 kpartner.19.
             SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i4.17))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> F) &
  (All #i3.12.
    (LtkRev( I.3 ) @ #i3.12)
   ==>
    (#i1 < #i3.12) &
    (Ex #i4.13 tpartner.14 kpartner.15.
      (SidR_1( tpartner.14, I.3, R.4, hkI.6, hkR.7, kpartner.15 ) @ #i4.13)
     &
      T)) &
  (All #i3.16.
    (LtkRev( R.4 ) @ #i3.16)
   ==>
    (#i1 < #i3.16) &
    (Ex #i4.17 tpartner.18 kpartner.19.
      (SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i4.17)
     &
      T))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( !KU( f_.12, h(<z.8, 'g'^(~lkI.8*~x.8)>) ) @ #vk.13 )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( !KU( f_.58, 'g'^(~lkI.8*~x.8) ) @ #vk.57 )
        case cexp
        solve( !KU( f_.88, ~lkI.8 ) @ #vk.87 )
          case Ltk_reveal
          solve( (#i4.111, 2)[!Ltk( $R.8, ~lkR.114 )] )
            case generate_ltk
            solve( (#i4.111, 3)[!Pk( $I.8, 'g'^~x.114 )] )
              case generate_ltk
              solve( !KU( f_.90, ~x.8 ) @ #vk.89 )
                case Ltk_reveal
                solve( !KU( f_.56, 'g'^(~ekI.133*~ekR.134) ) @ #vk.55 )
                  case Init_1
                  solve( !KU( f_.170, ~ekR.134 ) @ #vk.173 )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                next
                  case Resp_1
                  solve( !KU( f_.176, ~ekI.133 ) @ #vk.179 )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                next
                  case cexp
                  solve( !KU( f_.181, ~ekI.133 ) @ #vk.180 )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_1
        solve( !KU( f_.74, ~x.8 ) @ #vk.77 )
          case Ltk_reveal
          solve( (#i4.110, 2)[!Ltk( $R.8, ~lkR.113 )] )
            case generate_ltk
            solve( (#i4.110, 3)[!Pk( $I.8, 'g'^~x.113 )] )
              case generate_ltk
              solve( !KU( f_.56, 'g'^(~ekI.132*~ekR.133) ) @ #vk.55 )
                case Init_1
                solve( !KU( f_.158, ~ekR.133 ) @ #vk.161 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( !KU( f_.164, ~ekI.132 ) @ #vk.167 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( !KU( f_.169, ~ekI.132 ) @ #vk.168 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_2
        solve( !KU( f_.74, ~lkI.8 ) @ #vk.77 )
          case Ltk_reveal
          solve( (#i4.110, 2)[!Ltk( $R.8, ~lkR.113 )] )
            case generate_ltk
            solve( (#i4.110, 3)[!Pk( $I.8, 'g'^~x.113 )] )
              case generate_ltk
              solve( !KU( f_.56, 'g'^(~ekI.132*~ekR.133) ) @ #vk.55 )
                case Init_1
                solve( !KU( f_.158, ~ekR.133 ) @ #vk.161 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( !KU( f_.164, ~ekI.132 ) @ #vk.167 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( !KU( f_.169, ~ekI.132 ) @ #vk.168 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) wPFS_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12.
           (LtkRev( I.3 ) @ #i3.12) ==>
           ((#i1 < #i3.12) &
            (Ex #i4.13 tpartner.14.
              SidI_1( tpartner.14, I.3, R.4, hkI.6 ) @ #i4.13)))) &
        (All #i3.15.
          (LtkRev( R.4 ) @ #i3.15) ==>
          ((#i1 < #i3.15) &
           (Ex #i4.16 tpartner.17.
             SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> F) &
  (All #i3.12.
    (LtkRev( I.3 ) @ #i3.12)
   ==>
    (#i1 < #i3.12) &
    (Ex #i4.13 tpartner.14.
      (SidI_1( tpartner.14, I.3, R.4, hkI.6 ) @ #i4.13)
     &
      T)) &
  (All #i3.15.
    (LtkRev( R.4 ) @ #i3.15)
   ==>
    (#i1 < #i3.15) &
    (Ex #i4.16 tpartner.17.
      (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16)
     &
      T))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.8, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( !KU( f_.13, h(<z.8, 'g'^(~lkR.8*~x.8)>) ) @ #vk.14 )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( !KU( f_.53, 'g'^(~lkR.8*~x.8) ) @ #vk.52 )
        case cexp
        solve( !KU( f_.83, ~lkR.8 ) @ #vk.82 )
          case Ltk_reveal
          solve( (#i4.106, 1)[!Ltk( $I.8, ~lkI.108 )] )
            case generate_ltk
            solve( !KU( f_.85, ~x.8 ) @ #vk.84 )
              case Ltk_reveal
              solve( !KU( f_.51, 'g'^(~ekR.118*~ekI.119) ) @ #vk.50 )
                case Init_1
                solve( !KU( f_.149, ~ekR.118 ) @ #vk.152 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( !KU( f_.155, ~ekI.119 ) @ #vk.158 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( !KU( f_.160, ~ekR.118 ) @ #vk.159 )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_1
        solve( !KU( f_.69, ~x.8 ) @ #vk.72 )
          case Ltk_reveal
          solve( (#i4.105, 1)[!Ltk( $I.8, ~lkI.107 )] )
            case generate_ltk
            solve( !KU( f_.51, 'g'^(~ekR.117*~ekI.118) ) @ #vk.50 )
              case Init_1
              solve( !KU( f_.137, ~ekR.117 ) @ #vk.140 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case Resp_1
              solve( !KU( f_.143, ~ekI.118 ) @ #vk.146 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case cexp
              solve( !KU( f_.148, ~ekR.117 ) @ #vk.147 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_2
        solve( !KU( f_.69, ~lkR.8 ) @ #vk.72 )
          case Ltk_reveal
          solve( (#i4.105, 1)[!Ltk( $I.8, ~lkI.107 )] )
            case generate_ltk
            solve( !KU( f_.51, 'g'^(~ekR.117*~ekI.118) ) @ #vk.50 )
              case Init_1
              solve( !KU( f_.137, ~ekR.117 ) @ #vk.140 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case Resp_1
              solve( !KU( f_.143, ~ekI.118 ) @ #vk.146 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case cexp
              solve( !KU( f_.148, ~ekR.117 ) @ #vk.147 )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/UM_wPFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/UM_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.193848s
  wPFS_initiator_key (all-traces): verified (40 steps)
  wPFS_responder_key (all-traces): verified (37 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/UM_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.193848s
  wPFS_initiator_key (all-traces): verified (40 steps)
  wPFS_responder_key (all-traces): verified (37 steps)

==============================================================================
*/
