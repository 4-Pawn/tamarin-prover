theory KEA_plus_KCI begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* KEA+ *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ]
  --[ RegKey( $A ) ]->
   [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) )
  ]->
   [ !Sessk( ~ekI, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI.3, $I.1, $R.2, ~lkI.4, hkI.7 ), In( Y.6 ),
     !Pk( $R.2, 'g'^~x.13 )
     ]
    --[
    SidI_2( ~ekI.3, $I.1, $R.2, hkI.7, Y.6,
            h(<z.9, 'g'^(~ekI.3*~x.13), $I.1, $R.2>)
    )
    ]->
     [ !Sessk( ~ekI.3, h(<z.9, 'g'^(~ekI.3*~x.13), $I.1, $R.2>) ) ]
  
    variants (modulo AC)
    1. ~lkI.4
             = ~lkI.220
       Y.6   = Y.221
       z.9   = Y.221^~lkI.220
    
    2. ~lkI.4
             = ~lkI.221
       Y.6   = z.222^inv(~lkI.221)
       z.9   = z.222
    
    3. ~lkI.4
             = ~lkI.231
       Y.6   = x.233^x.234
       z.9   = x.233^(~lkI.231*x.234)
    
    4. ~lkI.4
             = ~lkI.231
       Y.6   = x.233^inv((~lkI.231*x.234))
       z.9   = x.233^inv(x.234)
    
    5. ~lkI.4
             = ~lkI.231
       Y.6   = x.233^(x.234*inv(~lkI.231))
       z.9   = x.233^x.234
    
    6. ~lkI.4
             = ~lkI.241
       Y.6   = x.243^(x.244*inv((~lkI.241*x.245)))
       z.9   = x.243^(x.244*inv(x.245))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X.6 ), Fr( ~ekR.3 ), !Ltk( $R.2, ~lkR.5 ), !Pk( $I.1, 'g'^~x.13 ) ]
    --[
    SidR_1( ~ekR.3, $I.1, $R.2, X.6, 'g'^~ekR.3,
            h(<'g'^(~ekR.3*~x.13), z.10, $I.1, $R.2>)
    )
    ]->
     [
     Out( 'g'^~ekR.3 ), !Ephk( ~ekR.3 ),
     !Sessk( ~ekR.3, h(<'g'^(~ekR.3*~x.13), z.10, $I.1, $R.2>) )
     ]
  
    variants (modulo AC)
    1. ~lkR.5
             = ~lkR.323
       X.6   = X.324
       z.10  = X.324^~lkR.323
    
    2. ~lkR.5
             = ~lkR.323
       X.6   = z.324^inv(~lkR.323)
       z.10  = z.324
    
    3. ~lkR.5
             = ~lkR.337
       X.6   = x.339^x.340
       z.10  = x.339^(~lkR.337*x.340)
    
    4. ~lkR.5
             = ~lkR.337
       X.6   = x.339^inv((~lkR.337*x.340))
       z.10  = x.339^inv(x.340)
    
    5. ~lkR.5
             = ~lkR.337
       X.6   = x.339^(x.340*inv(~lkR.337))
       z.10  = x.339^x.340
    
    6. ~lkR.5
             = ~lkR.351
       X.6   = x.353^(x.354*inv((~lkR.351*x.355)))
       z.10  = x.353^(x.354*inv(x.355))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) keaplus_initiator_key:
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         ((((((SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
              (K( k.8 ) @ #i2.4)) &
             (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
            (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
           (All #i3.13 #i4.14 tpartner.15 kpartner.16.
             ((SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
              (EphkRev( tpartner.15 ) @ #i4.14)) ==>
             (F))) &
          (All #i3.17 #i4.18 tpartner.19 kpartner.20.
            ((SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
             (SesskRev( tpartner.19 ) @ #i4.18)) ==>
            (F))) &
         (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 kpartner.16.
     (SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (SesskRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> F))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.11, $I.9, $R.10, ~lkI.12, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.10, 'g'^~x.21 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.24, h(<z.17, 'g'^(~ekI.11*~x.21), $I.9, $R.10>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.62, 0), 'g'^(~ekI.11*~x.21)) )
        case Init_1
        solve( (#vr.91, 1)[!KU( f_.94, ~x.115 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case cexp
        solve( KU((#vr.69, 1), ~ekI.11) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.82, 1)[!KU( f_.85, ~ekI.114 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

lemma (modulo E) keaplus_responder_key:
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         (((((((SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
               (K( k.8 ) @ #i2.4)) &
              (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
             (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
            (All #i3.13 #i4.14 tpartner.15 lki.16.
              ((SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
               (EphkRev( tpartner.15 ) @ #i4.14)) ==>
              (F))) &
           (All #i3.17 #i4.18 tpartner.19 kpartner.20.
             ((SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
              (EphkRev( tpartner.19 ) @ #i4.18)) ==>
             (F))) &
          (All #i3.21 #i4.22 tpartner.23 kpartner.24.
            ((SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
             (SesskRev( tpartner.23 ) @ #i4.22)) ==>
            (F))) &
         (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 lki.16.
     (SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (EphkRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21 #i4.22 tpartner.23 kpartner.24.
     (SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
     (SesskRev( tpartner.23 ) @ #i4.22)
    ==>
     F) &
   (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> F))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.10, ~lkR.13 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.9, 'g'^~x.21 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.25, h(<'g'^(~ekR.11*~x.21), z.18, $I.9, $R.10>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.51, 0), 'g'^(~ekR.11*~x.21)) )
        case Resp_1
        solve( (#vr.96, 1)[!KU( f_.99, ~x.78 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case cexp
        solve( KU((#vr.58, 1), ~ekR.11) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.71, 1)[!KU( f_.74, ~ekR.103 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/KEA_plus_KI_KCI.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.79015s
  keaplus_initiator_key: complete proof (13 steps)
  keaplus_responder_key: complete proof (13 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.79015s
  keaplus_initiator_key: complete proof (13 steps)
  keaplus_responder_key: complete proof (13 steps)

==============================================================================
*/
