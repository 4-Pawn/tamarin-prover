theory KEA_plus_KCI begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* KEA+ *}

rule (modulo E) generate_ltk:
   [ Fr( ~lkA ) ]
  --[ RegKey( $A ) ]->
   [ !Ltk( $A, ~lkA ), !Pk( $A, 'g'^~lkA ), Out( 'g'^~lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) )
  ]->
   [ !Sessk( ~ekI, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<z, 'g'^(~ekI*~x), $I, $R>) ) ]->
     [ !Sessk( ~ekI, h(<z, 'g'^(~ekI*~x), $I, $R>) ) ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.370
       Y     = Y.372
       z     = Y.372^~lkI.370
    
    2. ~lkI  = ~lkI.382
       Y     = z.387^inv(~lkI.382)
       z     = z.387
    
    3. ~lkI  = ~lkI.21508
       Y     = x.43006^x.43007
       z     = x.43006^(~lkI.21508*x.43007)
    
    4. ~lkI  = ~lkI.21956
       Y     = x.43902^inv((~lkI.21956*x.43903))
       z     = x.43902^inv(x.43903)
    
    5. ~lkI  = ~lkI.21956
       Y     = x.43902^(x.43903*inv(~lkI.21956))
       z     = x.43902^x.43903
    
    6. ~lkI  = ~lkI.22468
       Y     = x.44925^(x.44927*inv((~lkI.22468*x.44926)))
       z     = x.44925^(x.44927*inv(x.44926))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^(~ekR*~x), z, $I, $R>) )
    ]->
     [
     Out( 'g'^~ekR ), !Ephk( ~ekR ),
     !Sessk( ~ekR, h(<'g'^(~ekR*~x), z, $I, $R>) )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.514
       X     = X.515
       z     = X.515^~lkR.514
    
    2. ~lkR  = ~lkR.526
       X     = z.531^inv(~lkR.526)
       z     = z.531
    
    3. ~lkR  = ~lkR.343874
       X     = x.687736^x.687737
       z     = x.687736^(~lkR.343874*x.687737)
    
    4. ~lkR  = ~lkR.351042
       X     = x.702072^inv((~lkR.351042*x.702073))
       z     = x.702072^inv(x.702073)
    
    5. ~lkR  = ~lkR.351042
       X     = x.702072^(x.702073*inv(~lkR.351042))
       z     = x.702072^x.702073
    
    6. ~lkR  = ~lkR.359234
       X     = x.718455^(x.718457*inv((~lkR.359234*x.718456)))
       z     = x.718455^(x.718457*inv(x.718456))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) keaplus_initiator_key:
  all-traces
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         ((((((SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
              (K( k.8 ) @ #i2.4)) &
             (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
            (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
           (All #i3.13 #i4.14 tpartner.15 kpartner.16.
             ((SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
              (EphkRev( tpartner.15 ) @ #i4.14)) ==>
             (F))) &
          (All #i3.17 #i4.18 tpartner.19 kpartner.20.
            ((SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
             (SesskRev( tpartner.19 ) @ #i4.18)) ==>
            (F))) &
         (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 kpartner.16.
     (SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (SesskRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> F))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.11, h(<z.8, 'g'^(~ekI.8*~x.8), $I.8, $R.8>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.35, 0), 'g'^(~ekI.8*~x.8)) )
        case Init_1
        solve( (#vr.54, 1)[!KU( f_.57, ~x.67 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case cexp
        solve( KU((#vr.42, 1), ~ekI.8) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.51, 1)[!KU( f_.54, ~ekI.66 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

lemma (modulo E) keaplus_responder_key:
  all-traces
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         (((((((SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
               (K( k.8 ) @ #i2.4)) &
              (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
             (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
            (All #i3.13 #i4.14 tpartner.15 lki.16.
              ((SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
               (EphkRev( tpartner.15 ) @ #i4.14)) ==>
              (F))) &
           (All #i3.17 #i4.18 tpartner.19 kpartner.20.
             ((SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
              (EphkRev( tpartner.19 ) @ #i4.18)) ==>
             (F))) &
          (All #i3.21 #i4.22 tpartner.23 kpartner.24.
            ((SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
             (SesskRev( tpartner.23 ) @ #i4.22)) ==>
            (F))) &
         (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 lki.16.
     (SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (EphkRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21 #i4.22 tpartner.23 kpartner.24.
     (SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
     (SesskRev( tpartner.23 ) @ #i4.22)
    ==>
     F) &
   (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> F))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.8, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.12, h(<'g'^(~ekR.8*~x.8), z.8, $I.8, $R.8>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.30, 0), 'g'^(~ekR.8*~x.8)) )
        case Resp_1
        solve( (#vr.54, 1)[!KU( f_.57, ~x.44 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case cexp
        solve( KU((#vr.37, 1), ~ekR.8) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.46, 1)[!KU( f_.49, ~ekR.61 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/KEA_plus_KI_KCI.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.686344s
  keaplus_initiator_key (all-traces): verified (13 steps)
  keaplus_responder_key (all-traces): verified (13 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.686344s
  keaplus_initiator_key (all-traces): verified (13 steps)
  keaplus_responder_key (all-traces): verified (13 steps)

==============================================================================
*/
