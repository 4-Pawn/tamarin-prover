theory KEA_plus_KCI begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* KEA+ *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ]
  --[ RegKey( $A ) ]->
   [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) )
  ]->
   [ !Sessk( ~ekI, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI.3, $I.4, $R.5, ~lkI, hkI.6 ), In( Y.1 ),
     !Pk( $R.5, 'g'^~x.7 )
     ]
    --[
    SidI_2( ~ekI.3, $I.4, $R.5, hkI.6, Y.1,
            h(<x.2, 'g'^(~ekI.3*~x.7), $I.4, $R.5>)
    )
    ]->
     [ !Sessk( ~ekI.3, h(<x.2, 'g'^(~ekI.3*~x.7), $I.4, $R.5>) ) ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.31
       Y.1   = Y.32
       x.2   = Y.32^~lkI.31
    
    2. ~lkI  = ~lkI.31
       Y.1   = x.33^inv(~lkI.31)
       x.2   = x.33
    
    3. ~lkI  = ~lkI.32
       Y.1   = x.34^x.35
       x.2   = x.34^(~lkI.32*x.35)
    
    4. ~lkI  = ~lkI.32
       Y.1   = x.34^inv((~lkI.32*x.35))
       x.2   = x.34^inv(x.35)
    
    5. ~lkI  = ~lkI.32
       Y.1   = x.34^(x.35*inv(~lkI.32))
       x.2   = x.34^x.35
    
    6. ~lkI  = ~lkI.33
       Y.1   = x.35^(x.36*inv((~lkI.33*x.37)))
       x.2   = x.35^(x.36*inv(x.37))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X.1 ), Fr( ~ekR.3 ), !Ltk( $R.4, ~lkR ), !Pk( $I.5, 'g'^~x.6 ) ]
    --[
    SidR_1( ~ekR.3, $I.5, $R.4, X.1, 'g'^~ekR.3,
            h(<'g'^(~ekR.3*~x.6), x.2, $I.5, $R.4>)
    )
    ]->
     [
     Out( 'g'^~ekR.3 ), !Ephk( ~ekR.3 ),
     !Sessk( ~ekR.3, h(<'g'^(~ekR.3*~x.6), x.2, $I.5, $R.4>) )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.32
       X.1   = X.33
       x.2   = X.33^~lkR.32
    
    2. ~lkR  = ~lkR.32
       X.1   = x.34^inv(~lkR.32)
       x.2   = x.34
    
    3. ~lkR  = ~lkR.33
       X.1   = x.35^x.36
       x.2   = x.35^(~lkR.33*x.36)
    
    4. ~lkR  = ~lkR.33
       X.1   = x.35^inv((~lkR.33*x.36))
       x.2   = x.35^inv(x.36)
    
    5. ~lkR  = ~lkR.33
       X.1   = x.35^(x.36*inv(~lkR.33))
       x.2   = x.35^x.36
    
    6. ~lkR  = ~lkR.34
       X.1   = x.36^(x.37*inv((~lkR.34*x.38)))
       x.2   = x.36^(x.37*inv(x.38))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) keaplus_initiator_key:
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         ((((((SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
              (K( k.8 ) @ #i2.4)) &
             (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
            (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
           (All #i3.13 #i4.14 tpartner.15 kpartner.16.
             ((SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
              (EphkRev( tpartner.15 ) @ #i4.14)) ==>
             (F))) &
          (All #i3.17 #i4.18 tpartner.19 kpartner.20.
            ((SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
             (SesskRev( tpartner.19 ) @ #i4.18)) ==>
            (F))) &
         (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidI_2( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 kpartner.16.
     (SidR_1( tpartner.15, I.6, R.7, hkI.9, hkR.10, kpartner.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidR_1( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (SesskRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21. (LtkRev( R.7 ) @ #i3.21) ==> F))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.11, $I.12, $R.13, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.13, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<x.10, 'g'^(~ekI.11*~x.15), $I.12, $R.13>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      solve( splitEqs(1) )
        case split_case_1
        by contradiction // non-normal terms
      next
        case split_case_2
        by contradiction // non-normal terms
      next
        case split_case_3
        solve( splitEqs(1) )
          case split_case_1
          by contradiction // from formulas
        next
          case split_case_2
          by contradiction // non-normal terms
        next
          case split_case_3
          by contradiction // non-normal terms
        qed
      qed
    next
      case h
      solve( KU((#vr.43, 0), 'g'^(~ekI.11*~x.15)) )
        case Init_1
        solve( (#vr.58, 1)[!KU( f_.59, ~x.71 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case exp
        solve( KU((#vr.49, 1), ~ekI.11) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.56, 1)[!KU( f_.57, ~ekI.64 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

lemma (modulo E) keaplus_responder_key:
  "(All A #i.1 #j.2.
     ((RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)) ==> (#i.1 = #j.2)) ==>
   (not(Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
         (((((((SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
               (K( k.8 ) @ #i2.4)) &
              (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> (F))) &
             (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> (F))) &
            (All #i3.13 #i4.14 tpartner.15 lki.16.
              ((SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
               (EphkRev( tpartner.15 ) @ #i4.14)) ==>
              (F))) &
           (All #i3.17 #i4.18 tpartner.19 kpartner.20.
             ((SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
              (EphkRev( tpartner.19 ) @ #i4.18)) ==>
             (F))) &
          (All #i3.21 #i4.22 tpartner.23 kpartner.24.
            ((SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
             (SesskRev( tpartner.23 ) @ #i4.22)) ==>
            (F))) &
         (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> (F))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"(All A #i.1 #j.2.
   (RegKey( A ) @ #i.1) & (RegKey( A ) @ #j.2)
  ==>
   #i.1 = #j.2) &
 (Ex #i1.3 #i2.4 ttest.5 I.6 R.7 k.8 hkI.9 hkR.10.
   (SidR_1( ttest.5, I.6, R.7, hkI.9, hkR.10, k.8 ) @ #i1.3) &
   (K( k.8 ) @ #i2.4)
  &
   (All #i3.11. (EphkRev( ttest.5 ) @ #i3.11) ==> F) &
   (All #i3.12. (SesskRev( ttest.5 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 lki.16.
     (SidI_1( tpartner.15, I.6, R.7, lki.16 ) @ #i3.13) &
     (EphkRev( tpartner.15 ) @ #i4.14)
    ==>
     F) &
   (All #i3.17 #i4.18 tpartner.19 kpartner.20.
     (SidI_2( tpartner.19, I.6, R.7, hkI.9, hkR.10, kpartner.20 ) @ #i3.17) &
     (EphkRev( tpartner.19 ) @ #i4.18)
    ==>
     F) &
   (All #i3.21 #i4.22 tpartner.23 kpartner.24.
     (SidI_2( tpartner.23, I.6, R.7, hkI.9, hkR.10, kpartner.24 ) @ #i3.21) &
     (SesskRev( tpartner.23 ) @ #i4.22)
    ==>
     F) &
   (All #i3.25. (LtkRev( I.6 ) @ #i3.25) ==> F))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.12, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.13, 'g'^~x.14 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<'g'^(~ekR.11*~x.14), x.10, $I.13, $R.12>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      solve( splitEqs(1) )
        case split_case_1
        by contradiction // non-normal terms
      next
        case split_case_2
        by contradiction // non-normal terms
      next
        case split_case_3
        solve( splitEqs(1) )
          case split_case_1
          by contradiction // from formulas
        next
          case split_case_2
          by contradiction // non-normal terms
        next
          case split_case_3
          by contradiction // non-normal terms
        qed
      qed
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case h
      solve( KU((#vr.34, 0), 'g'^(~ekR.11*~x.14)) )
        case Resp_1
        solve( (#vr.54, 1)[!KU( f_.55, ~x.49 )] /* may loop */ )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case exp
        solve( KU((#vr.40, 1), ~ekR.11) )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.47, 1)[!KU( f_.48, ~ekR.55 )] /* may loop */ )
          case Ephk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/KEA_plus_KI_KCI.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.035432s
  keaplus_initiator_key: complete proof (19 steps)
  keaplus_responder_key: complete proof (19 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KEA_plus_KI_KCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.035432s
  keaplus_initiator_key: complete proof (19 steps)
  keaplus_responder_key: complete proof (19 steps)

==============================================================================
*/
