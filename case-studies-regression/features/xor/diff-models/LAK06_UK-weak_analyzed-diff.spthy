theory LAK06_UK_weak begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~k2 ) ]
  --[ OnlyOnce( 'setup' ), Create( ~k1 ), Create( ~k2 ) ]->
   [
   TagRun( ~k1, 'learning' ), TagRun( ~k2, 'learning' ),
   TagRun( diff(~k1, ~k2), 'guessing' )
   ]

rule (modulo E) initiatereader:
   [ ReaderRun( ~k, phase ), Fr( ~r0 ) ]
  --[ Phase( phase ) ]->
   [ ReaderState1( ~k, ~r0, phase ), Out( ~r0 ) ]

rule (modulo E) tag1:
   [ TagRun( ~k, phase ), Fr( ~r1 ), In( r0 ) ]
  --[ Running( <'R', 'T', ~k, r0, ~r1> ), Phase( phase ) ]->
   [ TagState1( ~k, ~r1, r0, phase ), Out( <~r1, h((~k⊕~r1⊕r0))> ) ]

rule (modulo E) acceptreader:
   [ ReaderState1( ~k, ~r0, phase ), In( <r1, h((~k⊕~r0⊕r1))> ) ]
  --[
  Commit( <'R', 'T', ~k, ~r0, r1> ), Running( <'T', 'R', ~k, ~r0, r1> ),
  Phase( phase )
  ]->
   [ Out( h((~k⊕~r0⊕h((~k⊕~r0⊕r1)))) ) ]

rule (modulo E) accepttag:
   [ TagState1( ~k, ~r1, r0, phase ), In( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) ]
  --[ Commit( <'T', 'R', ~k, r0, ~r1> ), FinTag( ), Phase( phase ) ]->
   [ ]

restriction onylOnce [right]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction onylOnce [left]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

lemma executable [right]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2. (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
simplify
solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i )
  case tag1_case_1
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    next
      case tag1_case_3
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k2 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k2 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k2) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k2 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k2) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k2 ) @ #vk.6 )
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k2) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k2 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k2) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k2 ) @ #vk.6 )
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
next
  case tag1_case_2
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~r1.1 ) @ #vk.3 )
        case tag1
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k1 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k1 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k1) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k1 ) @ #vk.6 )
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_01
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_02
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_03
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_04
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_05
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_06
        solve( !KU( ~r0 ) @ #vk.1 )
          case tag1
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
            case c_h_case_1
            solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
              case coerce
              solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_h_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_h_case_3
            by contradiction /* cyclic */
          next
            case c_h_case_4
            solve( !KU( ~r1 ) @ #vk.4 )
              case tag1
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_5
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case split_case_02
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case split_case_03
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_04
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_06
              by contradiction /* cyclic */
            next
              case split_case_07
              solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_08
              by contradiction /* cyclic */
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_11
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_12
              by contradiction /* cyclic */
            next
              case split_case_13
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_14
              by contradiction /* cyclic */
            next
              case split_case_15
              by contradiction /* cyclic */
            next
              case split_case_16
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_17
              solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_18
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_19
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_20
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_21
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_22
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_23
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_24
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_25
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_26
              solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_27
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_28
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_29
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_30
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_31
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_32
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_33
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_34
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_35
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_36
              by contradiction /* cyclic */
            next
              case split_case_37
              by contradiction /* cyclic */
            next
              case split_case_38
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_39
              by contradiction /* cyclic */
            next
              case split_case_40
              by contradiction /* cyclic */
            next
              case split_case_41
              by contradiction /* cyclic */
            next
              case split_case_42
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_43
              by contradiction /* cyclic */
            next
              case split_case_44
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_45
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_46
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_47
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_48
              by contradiction /* cyclic */
            next
              case split_case_49
              by contradiction /* cyclic */
            next
              case split_case_50
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_51
              by contradiction /* cyclic */
            next
              case split_case_52
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        qed
      next
        case split_case_07
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_08
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_09
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_10
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k1⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k1⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        next
          case tag1_case_2
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k1⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k1⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_3
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.4 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.5 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.6 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.7 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
next
  case tag1_case_3
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~r1.1 ) @ #vk.3 )
        case tag1
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k1 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    next
      case tag1_case_3
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k1 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k1) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k1 ) @ #vk.6 )
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_01
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_02
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_03
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_04
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_05
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_06
        solve( !KU( ~r0 ) @ #vk.1 )
          case tag1
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
            case c_h_case_1
            solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
              case coerce
              solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_h_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_h_case_3
            by contradiction /* cyclic */
          next
            case c_h_case_4
            solve( !KU( ~r1 ) @ #vk.4 )
              case tag1
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_5
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case split_case_02
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case split_case_03
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_04
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_06
              by contradiction /* cyclic */
            next
              case split_case_07
              solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_08
              by contradiction /* cyclic */
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_11
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_12
              by contradiction /* cyclic */
            next
              case split_case_13
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_14
              by contradiction /* cyclic */
            next
              case split_case_15
              by contradiction /* cyclic */
            next
              case split_case_16
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_17
              solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_18
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_19
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_20
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_21
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_22
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_23
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_24
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_25
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_26
              solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_27
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_28
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_29
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_30
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_31
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_32
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_33
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_34
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_35
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_36
              by contradiction /* cyclic */
            next
              case split_case_37
              by contradiction /* cyclic */
            next
              case split_case_38
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_39
              by contradiction /* cyclic */
            next
              case split_case_40
              by contradiction /* cyclic */
            next
              case split_case_41
              by contradiction /* cyclic */
            next
              case split_case_42
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_43
              by contradiction /* cyclic */
            next
              case split_case_44
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_45
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_46
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_47
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_48
              by contradiction /* cyclic */
            next
              case split_case_49
              by contradiction /* cyclic */
            next
              case split_case_50
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_51
              by contradiction /* cyclic */
            next
              case split_case_52
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        qed
      next
        case split_case_07
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_08
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_09
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_10
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k1⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k1⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        next
          case tag1_case_2
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k1⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k1⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k1⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k1 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k1 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k1 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_3
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.4 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.5 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.6 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.7 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
qed

lemma executable [left]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2. (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
simplify
solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i )
  case tag1_case_1
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~r1.1 ) @ #vk.3 )
        case tag1
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k2 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        by solve( splitEqs(3) )
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k2) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k2 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k2) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k2 ) @ #vk.6 )
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_01
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_02
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_03
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_04
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_05
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_06
        solve( !KU( ~r0 ) @ #vk.1 )
          case tag1
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
            case c_h_case_1
            solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
              case coerce
              solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_h_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_h_case_3
            by contradiction /* cyclic */
          next
            case c_h_case_4
            solve( !KU( ~r1 ) @ #vk.4 )
              case tag1
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_5
            by contradiction /* cyclic */
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_01
              solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case split_case_02
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case split_case_03
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_04
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_06
              by contradiction /* cyclic */
            next
              case split_case_07
              solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_08
              by contradiction /* cyclic */
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_11
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_12
              by contradiction /* cyclic */
            next
              case split_case_13
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_14
              by contradiction /* cyclic */
            next
              case split_case_15
              by contradiction /* cyclic */
            next
              case split_case_16
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_17
              solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_18
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_19
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_20
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_21
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_22
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_23
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_24
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_25
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_26
              solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_27
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_28
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_29
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_30
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_31
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_32
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_33
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_34
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_35
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_36
              by contradiction /* cyclic */
            next
              case split_case_37
              by contradiction /* cyclic */
            next
              case split_case_38
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_39
              by contradiction /* cyclic */
            next
              case split_case_40
              by contradiction /* cyclic */
            next
              case split_case_41
              by contradiction /* cyclic */
            next
              case split_case_42
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_43
              by contradiction /* cyclic */
            next
              case split_case_44
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_45
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_46
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_47
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_48
              by contradiction /* cyclic */
            next
              case split_case_49
              by contradiction /* cyclic */
            next
              case split_case_50
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_51
              by contradiction /* cyclic */
            next
              case split_case_52
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case split_case_07
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_08
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_09
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_10
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            by contradiction /* cyclic */
          next
            case tag1_case_3
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_4
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k2⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k2⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          qed
        next
          case tag1_case_2
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            by contradiction /* cyclic */
          next
            case tag1_case_3
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_4
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k2⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k2⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_3
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.4 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.5 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( ~x ) @ #vk.6 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( ~x ) @ #vk.7 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
next
  case tag1_case_2
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    next
      case tag1_case_3
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k1 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_2
        by contradiction /* cyclic */
      next
        case tag1_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k1 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k1 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k1) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k1 ) @ #vk.6 )
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k1 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k1⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k1⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k1 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k1 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k1 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k1 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k1) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k1 ) @ #vk.6 )
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
next
  case tag1_case_3
  solve( splitEqs(0) )
    case split_case_01
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_02
    solve( !KU( ~r1 ) @ #vk.1 )
      case tag1
      by contradiction /* cyclic */
    qed
  next
    case split_case_03
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~r1.1 ) @ #vk.3 )
        case tag1
        by contradiction /* cyclic */
      qed
    next
      case tag1_case_3
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        by solve( splitEqs(3) )
      qed
    qed
  next
    case split_case_04
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        by solve( splitEqs(3) )
      next
        case tag1_case_1
        by solve( splitEqs(3) )
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    next
      case tag1_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( ~x.1 ) @ #vk.3 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕~r1) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( splitEqs(3) )
          case split_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.3 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case split_case_2
          by solve( !KU( ~k2 ) @ #vk.6 )
        next
          case split_case_3
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        next
          case split_case_4
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
              case acceptreader
              by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.6, 0) ~~> (#vk.4, 0) )
              qed
            qed
          qed
        next
          case split_case_5
          solve( !KU( ~r1.1 ) @ #vk.6 )
            case tag1
            by contradiction /* cyclic */
          qed
        qed
      next
        case tag1_case_3
        by contradiction /* cyclic */
      qed
    qed
  next
    case split_case_05
    solve( !KU( ~r1 ) @ #vk.2 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_06
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_3
      solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕r0) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_01
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_02
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_03
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_04
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_05
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_06
        solve( !KU( ~r0 ) @ #vk.1 )
          case tag1
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
            case c_h_case_1
            solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
              case coerce
              solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_h_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_h_case_3
            by contradiction /* cyclic */
          next
            case c_h_case_4
            solve( !KU( ~r1 ) @ #vk.4 )
              case tag1
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_5
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case split_case_02
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case split_case_03
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_04
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_06
              by contradiction /* cyclic */
            next
              case split_case_07
              solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_08
              by contradiction /* cyclic */
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_11
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_12
              by contradiction /* cyclic */
            next
              case split_case_13
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_14
              by contradiction /* cyclic */
            next
              case split_case_15
              by contradiction /* cyclic */
            next
              case split_case_16
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_17
              solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_18
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_19
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_20
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_21
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_22
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_23
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_24
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_25
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_26
              solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_27
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_28
              by solve( !KU( ~k ) @ #vk.6 )
            next
              case split_case_29
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case split_case_30
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_31
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_32
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_33
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_34
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_35
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_36
              by contradiction /* cyclic */
            next
              case split_case_37
              by contradiction /* cyclic */
            next
              case split_case_38
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_39
              by contradiction /* cyclic */
            next
              case split_case_40
              by contradiction /* cyclic */
            next
              case split_case_41
              by contradiction /* cyclic */
            next
              case split_case_42
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_43
              by contradiction /* cyclic */
            next
              case split_case_44
              solve( !KU( ~r1 ) @ #vk.5 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_45
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_46
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_47
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_48
              by contradiction /* cyclic */
            next
              case split_case_49
              by contradiction /* cyclic */
            next
              case split_case_50
              solve( !KU( ~r1.1 ) @ #vk.4 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_51
              by contradiction /* cyclic */
            next
              case split_case_52
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        qed
      next
        case split_case_07
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_08
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_09
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_10
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k2⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k2⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        next
          case tag1_case_2
          solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
            case c_h_case_01
            solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
              case coerce
              solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.5, 0) )
                qed
              qed
            qed
          next
            case c_h_case_02
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_03
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_04
            by contradiction /* cyclic */
          next
            case c_h_case_05
            by contradiction /* cyclic */
          next
            case c_h_case_06
            solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_07
            solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_08
            by solve( !KU( ~k ) @ #vk.8 )
          next
            case c_h_case_09
            solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.6, 0) ~~> (#vk.6, 0) )
                qed
              qed
            qed
          next
            case c_h_case_10
            by contradiction /* cyclic */
          next
            case c_h_case_11
            by contradiction /* cyclic */
          next
            case c_h_case_12
            solve( !KU( ~r1 ) @ #vk.8 )
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case c_h_case_13
            by contradiction /* cyclic */
          next
            case c_h_case_14
            by contradiction /* cyclic */
          next
            case c_h_case_15
            by contradiction /* cyclic */
          next
            case tag1_case_1
            solve( splitEqs(6) )
              case split_case_01
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case split_case_02
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_03
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_04
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_05
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_06
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_07
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_08
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_09
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_10
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_11
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_12
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case split_case_13
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.5, 0) )
                  qed
                qed
              qed
            next
              case split_case_14
              solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            qed
          next
            case tag1_case_2
            solve( splitEqs(6) )
              case split_case_001
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case split_case_002
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_003
              by contradiction /* cyclic */
            next
              case split_case_004
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case split_case_005
              by contradiction /* cyclic */
            next
              case split_case_006
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_007
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_008
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_009
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_010
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_011
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_012
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_013
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_014
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_015
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_016
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_017
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_018
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_019
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_020
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_021
              by contradiction /* cyclic */
            next
              case split_case_022
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_023
              by contradiction /* cyclic */
            next
              case split_case_024
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_025
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_026
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_027
              by contradiction /* cyclic */
            next
              case split_case_028
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_029
              by contradiction /* cyclic */
            next
              case split_case_030
              by contradiction /* cyclic */
            next
              case split_case_031
              by contradiction /* cyclic */
            next
              case split_case_032
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_033
              by contradiction /* cyclic */
            next
              case split_case_034
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_035
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_036
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_037
              by contradiction /* cyclic */
            next
              case split_case_038
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_039
              by contradiction /* cyclic */
            next
              case split_case_040
              by contradiction /* cyclic */
            next
              case split_case_041
              by contradiction /* cyclic */
            next
              case split_case_042
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_043
              by contradiction /* cyclic */
            next
              case split_case_044
              by contradiction /* cyclic */
            next
              case split_case_045
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_046
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_047
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_048
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_049
              by contradiction /* cyclic */
            next
              case split_case_050
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_051
              by contradiction /* cyclic */
            next
              case split_case_052
              by contradiction /* cyclic */
            next
              case split_case_053
              by contradiction /* cyclic */
            next
              case split_case_054
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_055
              by contradiction /* cyclic */
            next
              case split_case_056
              by contradiction /* cyclic */
            next
              case split_case_057
              by contradiction /* cyclic */
            next
              case split_case_058
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_059
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_060
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1
                by contradiction /* cyclic */
              qed
            next
              case split_case_061
              by contradiction /* cyclic */
            next
              case split_case_062
              by contradiction /* cyclic */
            next
              case split_case_063
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case split_case_064
              by contradiction /* cyclic */
            next
              case split_case_065
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_066
              by contradiction /* cyclic */
            next
              case split_case_067
              solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_068
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_069
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_070
              by contradiction /* cyclic */
            next
              case split_case_071
              by contradiction /* cyclic */
            next
              case split_case_072
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_073
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_074
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_075
              by contradiction /* cyclic */
            next
              case split_case_076
              by contradiction /* cyclic */
            next
              case split_case_077
              solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 )
                case coerce
                solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_078
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_079
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_080
              by contradiction /* cyclic */
            next
              case split_case_081
              by contradiction /* cyclic */
            next
              case split_case_082
              solve( !KU( (~k2⊕x) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_083
              by solve( !KU( ~k ) @ #vk.12 )
            next
              case split_case_084
              solve( !KU( ~r1 ) @ #vk.12 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_085
              by contradiction /* cyclic */
            next
              case split_case_086
              by contradiction /* cyclic */
            next
              case split_case_087
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_088
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_089
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_090
              by contradiction /* cyclic */
            next
              case split_case_091
              by contradiction /* cyclic */
            next
              case split_case_092
              solve( !KU( (~k2⊕x) ) @ #vk.6 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_093
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_094
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_095
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_096
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case split_case_097
              by contradiction /* cyclic */
            next
              case split_case_098
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_099
              by contradiction /* cyclic */
            next
              case split_case_100
              solve( !KU( (~k2⊕x) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_101
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_102
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_103
              by contradiction /* cyclic */
            next
              case split_case_104
              solve( !KU( ~r1.2 ) @ #vk.9 )
                case tag1_case_01
                by contradiction /* cyclic */
              next
                case tag1_case_02
                by contradiction /* cyclic */
              next
                case tag1_case_03
                by contradiction /* cyclic */
              next
                case tag1_case_04
                by contradiction /* cyclic */
              next
                case tag1_case_05
                by contradiction /* cyclic */
              next
                case tag1_case_06
                by contradiction /* cyclic */
              next
                case tag1_case_07
                by contradiction /* cyclic */
              next
                case tag1_case_08
                by contradiction /* cyclic */
              next
                case tag1_case_09
                by contradiction /* cyclic */
              next
                case tag1_case_10
                by contradiction /* cyclic */
              next
                case tag1_case_11
                by contradiction /* cyclic */
              next
                case tag1_case_12
                by contradiction /* cyclic */
              next
                case tag1_case_13
                by contradiction /* cyclic */
              next
                case tag1_case_14
                by contradiction /* cyclic */
              next
                case tag1_case_15
                by contradiction /* cyclic */
              next
                case tag1_case_16
                by contradiction /* cyclic */
              qed
            next
              case split_case_105
              by contradiction /* cyclic */
            next
              case split_case_106
              by contradiction /* cyclic */
            next
              case split_case_107
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_108
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_109
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_110
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_111
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_112
              by contradiction /* cyclic */
            next
              case split_case_113
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_114
              by contradiction /* cyclic */
            next
              case split_case_115
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_116
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_117
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_118
              by contradiction /* cyclic */
            next
              case split_case_119
              by solve( !KU( ~k2 ) @ #vk.9 )
            next
              case split_case_120
              by contradiction /* cyclic */
            next
              case split_case_121
              by contradiction /* cyclic */
            next
              case split_case_122
              solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.6, 0) )
                  qed
                qed
              qed
            next
              case split_case_123
              by solve( !KU( ~k ) @ #vk.10 )
            next
              case split_case_124
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_125
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_126
              by solve( !KU( ~k2 ) @ #vk.10 )
            next
              case split_case_127
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_128
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_129
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_130
              solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                case coerce
                solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_131
              by contradiction /* cyclic */
            next
              case split_case_132
              by contradiction /* cyclic */
            next
              case split_case_133
              solve( !KU( ~r1 ) @ #vk.10 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_134
              by contradiction /* cyclic */
            next
              case split_case_135
              by contradiction /* cyclic */
            next
              case split_case_136
              by contradiction /* cyclic */
            next
              case split_case_137
              solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.7, 0) )
                  qed
                qed
              qed
            next
              case split_case_138
              by solve( !KU( ~k ) @ #vk.11 )
            next
              case split_case_139
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_140
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_141
              by solve( !KU( ~k2 ) @ #vk.11 )
            next
              case split_case_142
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_143
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_144
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_145
              solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.8, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.8, 0) ~~> (#vk.8, 0) )
                  qed
                qed
              qed
            next
              case split_case_146
              by contradiction /* cyclic */
            next
              case split_case_147
              by contradiction /* cyclic */
            next
              case split_case_148
              solve( !KU( ~r1 ) @ #vk.11 )
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                by contradiction /* cyclic */
              next
                case tag1_case_3
                by contradiction /* cyclic */
              qed
            next
              case split_case_149
              by contradiction /* cyclic */
            next
              case split_case_150
              by contradiction /* cyclic */
            next
              case split_case_151
              by contradiction /* cyclic */
            qed
          next
            case tag1_case_3
            by contradiction /* cyclic */
          next
            case tag1_case_4
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_001
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_002
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_003
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_004
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_005
        by solve( !KU( ~k2 ) @ #vk.2 )
      next
        case split_case_006
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_007
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_008
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_009
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_010
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_011
        solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_012
        solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_013
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_014
        solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_015
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_016
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_017
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_018
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_019
        solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_020
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_021
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_022
        solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_023
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_024
        solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_025
        solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_026
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_027
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_028
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_029
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        next
          case tag1_case_7
          by contradiction /* cyclic */
        qed
      next
        case split_case_030
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_031
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_032
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_033
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_034
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_035
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_036
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_037
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_038
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_039
        solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_040
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_041
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        next
          case tag1_case_5
          by contradiction /* cyclic */
        next
          case tag1_case_6
          by contradiction /* cyclic */
        qed
      next
        case split_case_042
        solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_043
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_044
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_045
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_046
        solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_047
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_048
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_049
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_050
        solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_051
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_052
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_053
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_054
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_055
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_056
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_057
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_058
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_059
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_060
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_061
        solve( !KU( (~k⊕~k2) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_062
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_063
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_064
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_065
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_066
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_067
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_068
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_069
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_070
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_071
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_072
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_073
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_074
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_075
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_076
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_077
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_078
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_079
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_080
        solve( !KU( (~k2⊕x) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_081
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_082
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_083
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_084
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_085
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_086
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_087
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_088
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_089
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_090
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_091
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_092
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_093
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_094
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        qed
      next
        case split_case_095
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_096
        solve( !KU( ~r1.1 ) @ #vk.4 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        next
          case tag1_case_3
          by contradiction /* cyclic */
        next
          case tag1_case_4
          by contradiction /* cyclic */
        qed
      next
        case split_case_097
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_098
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_099
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_100
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_101
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_102
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_103
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_104
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_105
        solve( !KU( (~k2⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_106
        solve( !KU( ~r1.1 ) @ #vk.5 )
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_107
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_108
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_109
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_110
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_111
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_112
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_113
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_114
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_115
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_116
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_117
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_118
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_119
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_120
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_121
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_122
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_123
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case split_case_124
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_125
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_126
        by solve( !KU( ~k2 ) @ #vk.4 )
      next
        case split_case_127
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_128
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_129
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_130
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_131
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_132
        by solve( !KU( ~k ) @ #vk.5 )
      next
        case split_case_133
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_134
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_135
        solve( !KU( (x⊕~r1.1) ) @ #vk.2 )
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_136
        by solve( !KU( ~k2 ) @ #vk.5 )
      next
        case split_case_137
        solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case split_case_138
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_139
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_140
        solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_141
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_142
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_143
        solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_144
        by solve( !KU( ~k ) @ #vk.6 )
      next
        case split_case_145
        solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_146
        solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_147
        by solve( !KU( ~k ) @ #vk.7 )
      next
        case split_case_148
        by solve( !KU( ~k2 ) @ #vk.6 )
      next
        case split_case_149
        by solve( !KU( ~k2 ) @ #vk.7 )
      next
        case split_case_150
        solve( !KU( (~k⊕~k2) ) @ #vk.6 )
          case coerce
          solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case split_case_151
        by solve( !KU( ~k2 ) @ #vk.6 )
      qed
    qed
  next
    case split_case_07
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case c_h_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.2 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case tag1_case_3
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_08
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_09
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h_case_01
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_02
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_03
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_04
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_05
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_06
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_07
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_08
      by solve( !KU( ~k ) @ #vk.5 )
    next
      case c_h_case_09
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_10
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_11
      by solve( !KU( ~k ) @ #vk.4 )
    next
      case c_h_case_12
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_13
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_14
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_15
      by solve( !KU( ~k ) @ #vk.6 )
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~r1⊕x) ) @ #vk.2 )
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_10
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_11
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x ) @ #vk.4 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( ~x ) @ #vk.5 )
        case fresh
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 )
          case coerce
          solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_12
    by solve( !KU( ~k ) @ #vk.3 )
  next
    case split_case_13
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  next
    case split_case_14
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk.1 )
      case c_h_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case c_h_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case c_h_case_5
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( ~x ) @ #vk.6 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_4
      solve( !KU( (~k⊕~r1) ) @ #vk.4 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
          qed
        qed
      qed
    next
      case tag1_case_5
      solve( !KU( ~x ) @ #vk.7 )
        case fresh
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      next
        case tag1
        solve( !KU( (~k⊕~r1) ) @ #vk.5 )
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
            case acceptreader
            by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_6
      solve( !KU( (~k⊕~r1) ) @ #vk.3 )
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_15
    solve( !KU( ~r1 ) @ #vk.3 )
      case tag1_case_1
      by contradiction /* cyclic */
    next
      case tag1_case_2
      by contradiction /* cyclic */
    qed
  qed
qed

lemma helpingSecrecy [right, reuse]:
  all-traces "∀ k #i. (Create( k ) @ #i) ⇒ (¬(∃ #j. K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i. (Create( k ) @ #i) ∧ ∃ #j. (K( k ) @ #j)"
*/
simplify
solve( Create( k ) @ #i )
  case setup_case_1
  by solve( !KU( ~k1 ) @ #vk )
next
  case setup_case_2
  by solve( !KU( ~k2 ) @ #vk )
qed

lemma helpingSecrecy [left, reuse]:
  all-traces "∀ k #i. (Create( k ) @ #i) ⇒ (¬(∃ #j. K( k ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i. (Create( k ) @ #i) ∧ ∃ #j. (K( k ) @ #j)"
*/
simplify
solve( Create( k ) @ #i )
  case setup_case_1
  by solve( !KU( ~k1 ) @ #vk )
next
  case setup_case_2
  by solve( !KU( ~k2 ) @ #vk )
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_01
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_02
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              MIRRORED
            qed
          next
            case split_case_03
            MIRRORED
          next
            case split_case_04
            step( solve( !KU( zero ) @ #vk ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_05
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1 ) @ #vk.1 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_09
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_10
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_11
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_12
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_13
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_14
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_15
            step( solve( !KU( ~r1 ) @ #vk.2 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  qed
next
  case Rule_Destrd_xor
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_3
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_3
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case acceptreader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #vr ) )
      qed
    next
      case initiatereader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r0
        by step( solve( ReaderRun( ~k, phase ) ▶₀ #vr ) )
      qed
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r1
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case h
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.1 ) )
                    case tag1
                    step( solve( !KU( ~r1 ) @ #vk.2 ) )
                      case tag1
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case tag1_case_2
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.1 ) )
                    case tag1
                    step( solve( !KU( ~r1 ) @ #vk.2 ) )
                      case tag1
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case tag1_case_2
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.3 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_06
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.3 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_06
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case acceptreader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #vr ) )
      qed
    next
      case initiatereader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r0
        by step( solve( ReaderRun( ~k, phase ) ▶₀ #vr ) )
      qed
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r1
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case h
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k2 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.1 ) )
                    case tag1
                    step( solve( !KU( ~r1 ) @ #vk.2 ) )
                      case tag1
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case tag1_case_2
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_23
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_24
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_001
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_002
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_008
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_010
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_014
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_017
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_018
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_020
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_021
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_023
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_024
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_027
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_028
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_030
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_033
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_035
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_044
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_050
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_056
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_057
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_059
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_060
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_061
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_069
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_070
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_072
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_073
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_074
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_075
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_077
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_078
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_079
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_080
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_083
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_085
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_086
                  by step( solve( !KU( ~k1 ) @ #vk.2 ) )
                next
                  case split_case_087
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_088
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_090
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_091
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_094
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_097
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_102
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_103
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_104
                  step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_105
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_106
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_118
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_120
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_127
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_132
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_133
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_134
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_135
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_142
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_148
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_149
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_150
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_151
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_03
                step( solve( splitEqs(1) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.1 ) )
                    case tag1
                    step( solve( !KU( ~r1 ) @ #vk.2 ) )
                      case tag1
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case tag1_case_2
                    step( solve( !KU( ~r1 ) @ #vk.5 ) )
                      case tag1_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_case_2
                      by step( contradiction /* cyclic */ )
                    qed
                  qed
                next
                  case split_case_06
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.3 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.4 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_02
                step( solve( !KU( ~r1 ) @ #vk.1 ) )
                  case tag1
                  MIRRORED
                qed
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( ~r1 ) @ #vk.2 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_09
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.3 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_06
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_04
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_05
                step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_07
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_08
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_09
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                by step( contradiction /* cyclic */ )
              next
                case split_case_15
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_16
                by step( contradiction /* cyclic */ )
              next
                case split_case_17
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_18
                step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_19
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_20
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_21
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_22
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_23
                by step( contradiction /* cyclic */ )
              next
                case split_case_24
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_003
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_005
                  by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                next
                  case split_case_006
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_007
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_008
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_009
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_010
                  step( solve( !KU( ~r0 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_014
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_015
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_016
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_017
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_018
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_020
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_021
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_022
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_023
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_024
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_025
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_026
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_027
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_028
                  step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_029
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_030
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_031
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_032
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_033
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_035
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_036
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_037
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_038
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_039
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_040
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_041
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_042
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_043
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_044
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_045
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_046
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_049
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_050
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_051
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_052
                  step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_053
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_054
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_056
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_057
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_058
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_060
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_061
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_062
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_063
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_064
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_066
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_067
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_068
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_069
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_070
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_071
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_073
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_075
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_076
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_077
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_078
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_079
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_080
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_081
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_082
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_083
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_084
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_085
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_086
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_088
                  step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_090
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_091
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_092
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_093
                  step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_094
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_095
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_096
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case split_case_098
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_099
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_100
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_102
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_103
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_104
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_105
                  step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_106
                  step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_107
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_108
                  step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_109
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_110
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_112
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_113
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_114
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_115
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_116
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_117
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_118
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_119
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_120
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_121
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_122
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_123
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_125
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_127
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case split_case_128
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_131
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_132
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_133
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_135
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_136
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_137
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_139
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_140
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_141
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_142
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_146
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_147
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_148
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_150
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_151
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                by step( contradiction /* cyclic */ )
              next
                case split_case_03
                step( solve( splitEqs(2) ) )
                  case split_case_01
                  step( solve( !KU( ~r0 ) @ #vk.3 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_02
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_03
                  step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_04
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_06
                  step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_07
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_09
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( ~r1.1 ) @ #vk.6 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                qed
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_01
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_02
                MIRRORED
              next
                case split_case_03
                MIRRORED
              next
                case split_case_04
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_05
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_06
                by step( contradiction /* cyclic */ )
              next
                case split_case_07
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_08
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_09
                by step( contradiction /* cyclic */ )
              next
                case split_case_10
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_11
                by step( contradiction /* cyclic */ )
              next
                case split_case_12
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_13
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case split_case_14
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_15
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_acceptreader
  backward-search
    case LHS
    step( simplify )
    by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #i ) )
  next
    case RHS
    step( simplify )
    by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #i ) )
  qed
next
  case Rule_accepttag
  backward-search
    case LHS
    step( simplify )
    step( solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i ) )
      case tag1_case_1
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k2 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_01
            step( solve( !KU( ~r0 ) @ #vk.1 ) )
              case tag1
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
                case c_h_case_1
                step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_h_case_3
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_4
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_5
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_01
                  step( solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_02
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_03
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_04
                  step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_06
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_07
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_09
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_11
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_12
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_13
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_14
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_15
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_16
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_17
                  step( solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_18
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_19
                  step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_20
                  step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_21
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_22
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_23
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_24
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_25
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_26
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_27
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_28
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_29
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_30
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_31
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_32
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_33
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_34
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_35
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_36
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_37
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_38
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_39
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_40
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_41
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_42
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_43
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_44
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_45
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_46
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_47
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_48
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_49
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_50
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_51
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_52
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          next
            case split_case_02
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_03
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_04
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_05
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_09
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_10
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_3
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_4
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k2⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_3
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_4
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k2⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              qed
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_5
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_6
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_12
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_13
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_14
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_15
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_17
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_18
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( ~x.2 ) @ #vk.4 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_20
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_21
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_22
          step( solve( !KU( ~x.2 ) @ #vk.5 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_23
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_28
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_29
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_30
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_31
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_32
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_33
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_34
          step( solve( !KU( ~x.2 ) @ #vk.6 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_35
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_37
          step( solve( !KU( ~x.2 ) @ #vk.7 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      qed
    next
      case tag1_case_2
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k1 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_2
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k1 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      qed
    next
      case tag1_case_3
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_01
            step( solve( !KU( ~r0 ) @ #vk.1 ) )
              case tag1
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
                case c_h_case_1
                step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_h_case_3
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_4
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_5
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( splitEqs(6) ) )
                  case split_case_01
                  step( solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_02
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_03
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_04
                  step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                next
                  case split_case_06
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_07
                  step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_09
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_11
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_12
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_13
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_14
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_15
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_16
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_17
                  step( solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_18
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_19
                  step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_20
                  step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_21
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_22
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_23
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_24
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_25
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_26
                  step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_27
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_28
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_29
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_30
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_31
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_32
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_33
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_34
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_35
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_36
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_37
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_38
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_39
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_40
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_41
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_42
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_43
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_44
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_45
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_46
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_47
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_48
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_49
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_50
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_51
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_52
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case split_case_02
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_03
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_04
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_05
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_09
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_10
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k2⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k2⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k2⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_5
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_6
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_12
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_13
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_14
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_15
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_17
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_18
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( ~x.2 ) @ #vk.4 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_21
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_22
          step( solve( !KU( ~x.2 ) @ #vk.5 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_23
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_28
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_29
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_30
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_31
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_32
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_33
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_34
          step( solve( !KU( ~x.2 ) @ #vk.6 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_35
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_37
          step( solve( !KU( ~x.2 ) @ #vk.7 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k2 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_3
        by step( solve( splitEqs(0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i ) )
      case tag1_case_1
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k2 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k2 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k2⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k2 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k2 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k2 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k2 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      qed
    next
      case tag1_case_2
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k1 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_2
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_01
            step( solve( !KU( ~r0 ) @ #vk.1 ) )
              case tag1
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
                case c_h_case_1
                step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_h_case_3
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_4
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_5
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( splitEqs(6) ) )
                  case split_case_01
                  step( solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_02
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_03
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_04
                  step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_06
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_07
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_09
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_11
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_12
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_13
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_14
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_15
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_16
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_17
                  step( solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_18
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_19
                  step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_20
                  step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_21
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_22
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_23
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_24
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_25
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_26
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_27
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_28
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_29
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_30
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_31
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_32
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_33
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_34
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_35
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_36
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_37
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_38
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_39
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_40
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_41
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_42
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_43
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_44
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_45
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_46
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_47
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_48
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_49
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_50
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_51
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_52
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case split_case_02
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_03
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_04
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_05
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_09
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_10
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k1⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k1⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_5
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_6
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_12
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_13
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_14
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_15
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_17
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_18
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( ~x.2 ) @ #vk.4 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_20
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_21
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_22
          step( solve( !KU( ~x.2 ) @ #vk.5 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_23
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_28
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_29
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_30
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_31
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_32
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_33
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_34
          step( solve( !KU( ~x.2 ) @ #vk.6 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_35
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_37
          step( solve( !KU( ~x.2 ) @ #vk.7 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      qed
    next
      case tag1_case_3
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_04
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_07
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_08
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_09
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_12
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_13
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_15
          step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_21
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_22
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_23
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_28
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_29
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_30
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_31
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_32
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_33
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_34
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_35
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          by step( solve( !KU( ~k ) @ #vk.5 ) )
        next
          case split_case_37
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_43
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_44
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_45
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_46
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_47
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_48
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_49
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_50
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_51
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_52
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_53
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_54
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_55
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_56
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_57
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_58
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_59
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_60
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_61
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_62
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_63
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_64
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_65
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_66
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_67
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_68
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_69
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_70
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_71
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_72
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_73
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_74
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_75
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_76
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_001
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_002
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_003
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_004
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_005
            by step( solve( !KU( ~k1 ) @ #vk.2 ) )
          next
            case split_case_006
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_007
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_008
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_009
            step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_010
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_011
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_012
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_013
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_014
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_015
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_016
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_017
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_018
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_019
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_020
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_021
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_022
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_023
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_024
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_025
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_026
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_027
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_028
            step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_029
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_030
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_031
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_032
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_033
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_034
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_035
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_036
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_037
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_038
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_039
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_040
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_041
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_042
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_043
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_044
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_045
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_046
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_047
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_048
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_049
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_050
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_051
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_052
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_053
            step( solve( !KU( (~k1⊕x) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_054
            step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_055
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_056
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_057
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_058
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_059
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_060
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_061
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_062
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_063
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_064
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_065
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_066
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_067
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_068
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_069
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_070
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_071
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_072
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_073
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_074
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_075
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_076
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_077
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_078
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_079
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_080
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_081
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_082
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_083
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_084
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_085
            step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_086
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_087
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_088
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_089
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_090
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_091
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_092
            by step( solve( !KU( ~k ) @ #vk.6 ) )
          next
            case split_case_093
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_094
            step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_095
            by step( solve( !KU( ~k ) @ #vk.7 ) )
          next
            case split_case_096
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_097
            by step( solve( !KU( ~k1 ) @ #vk.7 ) )
          next
            case split_case_098
            step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_099
            by step( solve( !KU( ~k1 ) @ #vk.6 ) )
          next
            case split_case_100
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_101
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_102
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_103
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_104
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_105
            step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_106
            step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_107
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case split_case_108
            step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_109
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_110
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_111
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_112
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_113
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_114
            by step( solve( !KU( ~k1 ) @ #vk.4 ) )
          next
            case split_case_115
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_116
            step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_117
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_118
            step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_119
            step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_120
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_121
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_122
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_123
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_7
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_124
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_125
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_126
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_127
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_128
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_129
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_130
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_131
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_132
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_133
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_134
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_135
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_4
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_5
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_6
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_136
            step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_137
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_138
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_139
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_140
            step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_141
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_142
            by step( solve( !KU( ~k ) @ #vk.5 ) )
          next
            case split_case_143
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_144
            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_145
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_146
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_147
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_148
            by step( solve( !KU( ~k1 ) @ #vk.5 ) )
          next
            case split_case_149
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_150
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_151
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            step( solve( !KU( zero ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_12
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_13
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_14
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_15
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_16
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_17
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_18
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_19
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_20
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_01
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_02
          step( solve( !KU( ~r1 ) @ #vk.1 ) )
            case tag1
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_03
          step( solve( splitEqs(2) ) )
            case split_case_01
            step( solve( !KU( ~r0 ) @ #vk.1 ) )
              case tag1
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
                case c_h_case_1
                step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_h_case_3
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_4
                step( solve( !KU( ~r1 ) @ #vk.4 ) )
                  case tag1
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_5
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( splitEqs(6) ) )
                  case split_case_01
                  step( solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_02
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case split_case_03
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_04
                  step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_05
                  by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                next
                  case split_case_06
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_07
                  step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_08
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_09
                  step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_10
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_11
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_12
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_13
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_14
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_15
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_16
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_17
                  step( solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_18
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_19
                  step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_20
                  step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_21
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_22
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_23
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_24
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_25
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_26
                  step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_27
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_28
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case split_case_29
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_30
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_31
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_32
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_33
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_34
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_35
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_36
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_37
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_38
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_39
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_40
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_41
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_42
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_43
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_44
                  step( solve( !KU( ~r1 ) @ #vk.5 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_45
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_46
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_47
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_48
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_49
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_50
                  step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_51
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_52
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            qed
          next
            case split_case_02
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_03
            step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_04
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_3
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_05
            step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
              case coerce
              step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_06
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_07
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_08
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_09
            step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
              case coerce
              step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_10
            step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
              case tag1_case_1
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k1⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            next
              case tag1_case_2
              step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                case c_h_case_01
                step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_02
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_03
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_04
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_05
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_06
                step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_07
                step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_08
                by step( solve( !KU( ~k ) @ #vk.8 ) )
              next
                case c_h_case_09
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.6, 0) ) )
                    qed
                  qed
                qed
              next
                case c_h_case_10
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_11
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_12
                step( solve( !KU( ~r1 ) @ #vk.8 ) )
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_h_case_13
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_14
                by step( contradiction /* cyclic */ )
              next
                case c_h_case_15
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_1
                step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                  case coerce
                  step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                step( solve( splitEqs(6) ) )
                  case split_case_001
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case split_case_002
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_003
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_004
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case split_case_005
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_006
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_007
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_008
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_009
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_010
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_011
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_012
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_013
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_014
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_015
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_016
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_017
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_018
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_019
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_020
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_021
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_022
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_023
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_024
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_025
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_026
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_027
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_028
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_029
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_030
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_031
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_032
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_033
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_034
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_035
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_036
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_037
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_038
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_039
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_040
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_041
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_042
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_043
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_044
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_045
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_046
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_047
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_048
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_049
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_050
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_051
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_052
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_053
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_054
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_055
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_056
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_057
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_058
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_059
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_060
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_061
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_062
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_063
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case split_case_064
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_065
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_066
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_067
                  step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_068
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_069
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_070
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_071
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_072
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_073
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_074
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_075
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_076
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_077
                  step( solve( !KU( (~k1⊕~r1.2) ) @ #vk.9 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_078
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_079
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_080
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_081
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_082
                  step( solve( !KU( (~k1⊕x) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_083
                  by step( solve( !KU( ~k ) @ #vk.12 ) )
                next
                  case split_case_084
                  step( solve( !KU( ~r1 ) @ #vk.12 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_085
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_086
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_087
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_088
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_089
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_090
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_091
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_092
                  step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_093
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_094
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_095
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_096
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_097
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_098
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_099
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_100
                  step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_101
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_102
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_103
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_104
                  step( solve( !KU( ~r1.2 ) @ #vk.9 ) )
                    case tag1_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_03
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_04
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_05
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_06
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_07
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_08
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_09
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_10
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_11
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_12
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_13
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_14
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_16
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_105
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_106
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_107
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_108
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_109
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_110
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_111
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_112
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_113
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_114
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_115
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_116
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_117
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_118
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_119
                  by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                next
                  case split_case_120
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_121
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_122
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_123
                  by step( solve( !KU( ~k ) @ #vk.10 ) )
                next
                  case split_case_124
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_125
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_126
                  by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                next
                  case split_case_127
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_128
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_129
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_130
                  step( solve( !KU( (x⊕~r1.2) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_131
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_132
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_133
                  step( solve( !KU( ~r1 ) @ #vk.10 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_134
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_135
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_136
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_137
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_138
                  by step( solve( !KU( ~k ) @ #vk.11 ) )
                next
                  case split_case_139
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_140
                  step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_141
                  by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                next
                  case split_case_142
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_143
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_144
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_145
                  step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                    case coerce
                    step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_146
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_147
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_148
                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_3
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_149
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_150
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_151
                  by step( contradiction /* cyclic */ )
                qed
              next
                case tag1_case_3
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_4
                by step( contradiction /* cyclic */ )
              qed
            qed
          qed
        next
          case split_case_04
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_05
          step( solve( !KU( ~r1.1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_06
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_07
          step( solve( !KU( ~x ) @ #vk.3 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_5
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_6
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_08
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_09
          step( solve( !KU( ~r1 ) @ #vk.3 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_10
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_11
          step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_12
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_13
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_14
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_15
          step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_16
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_17
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_18
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_19
          step( solve( !KU( ~x.2 ) @ #vk.4 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_20
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_21
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.2 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_22
          step( solve( !KU( ~x.2 ) @ #vk.5 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_23
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_24
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_25
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_26
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_27
          by step( solve( !KU( ~k ) @ #vk.4 ) )
        next
          case split_case_28
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_29
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_30
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_31
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_32
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_33
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case split_case_34
          step( solve( !KU( ~x.2 ) @ #vk.6 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_1
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_3
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_4
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_35
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_36
          step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case split_case_37
          step( solve( !KU( ~x.2 ) @ #vk.7 ) )
            case fresh
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_01
            step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                case acceptreader
                by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                qed
              qed
            qed
          next
            case tag1_case_02
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_03
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_04
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_05
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_06
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_07
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_08
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_09
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_10
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_11
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_12
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_13
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_14
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_15
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_16
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_38
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_39
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_40
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_41
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        next
          case split_case_42
          step( solve( !KU( ~r1 ) @ #vk.4 ) )
            case tag1_case_1
            by step( contradiction /* cyclic */ )
          next
            case tag1_case_2
            by step( contradiction /* cyclic */ )
          qed
        qed
      next
        case tag1_case_3
        by step( solve( splitEqs(0) ) )
      qed
    qed
  qed
next
  case Rule_initiatereader
  backward-search
    case LHS
    step( simplify )
    by step( solve( ReaderRun( ~k, phase ) ▶₀ #i ) )
  next
    case RHS
    step( simplify )
    by step( solve( ReaderRun( ~k, phase ) ▶₀ #i ) )
  qed
next
  case Rule_setup
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_tag1
  backward-search
    case LHS
    step( simplify )
    step( solve( TagRun( ~k, phase ) ▶₀ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    next
      case setup_case_3
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagRun( ~k, phase ) ▶₀ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    next
      case setup_case_3
      step( solve( splitEqs(0) ) )
        case split_case_01
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_02
        step( solve( !KU( ~r1 ) @ #vk ) )
          case tag1
          MIRRORED
        qed
      next
        case split_case_03
        step( solve( !KU( zero ) @ #vk ) )
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_04
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_05
        step( solve( !KU( ~r1 ) @ #vk.1 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_06
        MIRRORED
      next
        case split_case_07
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_08
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_09
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_10
        step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case split_case_11
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      next
        case split_case_12
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_13
        by step( solve( !KU( ~k ) @ #vk.2 ) )
      next
        case split_case_14
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_15
        step( solve( !KU( ~r1 ) @ #vk.2 ) )
          case tag1_case_1
          by step( contradiction /* cyclic */ )
        next
          case tag1_case_2
          by step( contradiction /* cyclic */ )
        qed
      qed
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: examples/features/xor/diff-models/LAK06_UK-weak.spthy

------------------------------------------------------------------------------
analyzed: examples/features/xor/diff-models/LAK06_UK-weak.spthy

  output:          examples/features/xor/diff-models/LAK06_UK-weak.spthy.tmp
  processing time: 298.992661s
  RHS :  executable (exists-trace): falsified - no trace found (5826 steps)
  LHS :  executable (exists-trace): falsified - no trace found (5826 steps)
  RHS :  helpingSecrecy (all-traces): verified (4 steps)
  LHS :  helpingSecrecy (all-traces): verified (4 steps)
  DiffLemma:  Observational_equivalence : verified (25404 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/features/xor/diff-models/LAK06_UK-weak.spthy

  output:          examples/features/xor/diff-models/LAK06_UK-weak.spthy.tmp
  processing time: 298.992661s
  RHS :  executable (exists-trace): falsified - no trace found (5826 steps)
  LHS :  executable (exists-trace): falsified - no trace found (5826 steps)
  RHS :  helpingSecrecy (all-traces): verified (4 steps)
  LHS :  helpingSecrecy (all-traces): verified (4 steps)
  DiffLemma:  Observational_equivalence : verified (25404 steps)

==============================================================================
*/
