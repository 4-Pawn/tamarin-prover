theory UM_PFS begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* The Unified Model (UM) Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]->
   [ !Sessk( ~ekI, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<z, 'g'^(~lkI*~x)>) ) ]->
     [ !Sessk( ~ekI, h(<z, 'g'^(~lkI*~x)>) ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.369
       Y     = Y.372
       z     = Y.372^~ekI.369
    
    2. ~ekI  = ~ekI.381
       Y     = z.387^inv(~ekI.381)
       z     = z.387
    
    3. ~ekI  = ~ekI.21507
       Y     = x.43006^x.43007
       z     = x.43006^(~ekI.21507*x.43007)
    
    4. ~ekI  = ~ekI.21955
       Y     = x.43902^inv((~ekI.21955*x.43903))
       z     = x.43902^inv(x.43903)
    
    5. ~ekI  = ~ekI.21955
       Y     = x.43902^(x.43903*inv(~ekI.21955))
       z     = x.43902^x.43903
    
    6. ~ekI  = ~ekI.22467
       Y     = x.44925^(x.44927*inv((~ekI.22467*x.44926)))
       z     = x.44925^(x.44927*inv(x.44926))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) ) ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<z, 'g'^(~lkR*~x)>) ) ]->
     [ Out( 'g'^~ekR ), !Ephk( ~ekR ), !Sessk( ~ekR, h(<z, 'g'^(~lkR*~x)>) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.512
       X     = X.515
       z     = X.515^~ekR.512
    
    2. ~ekR  = ~ekR.524
       X     = z.530^inv(~ekR.524)
       z     = z.530
    
    3. ~ekR  = ~ekR.343872
       X     = x.687736^x.687737
       z     = x.687736^(~ekR.343872*x.687737)
    
    4. ~ekR  = ~ekR.351040
       X     = x.702072^inv((~ekR.351040*x.702073))
       z     = x.702072^inv(x.702073)
    
    5. ~ekR  = ~ekR.351040
       X     = x.702072^(x.702073*inv(~ekR.351040))
       z     = x.702072^x.702073
    
    6. ~ekR  = ~ekR.359232
       X     = x.718455^(x.718457*inv((~ekR.359232*x.718456)))
       z     = x.718455^(x.718457*inv(x.718456))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) wPFS_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (LtkRev( I.3 ) @ #i3.12) ==> (#i1 < #i3.12))) &
        (All #i3.13. (LtkRev( R.4 ) @ #i3.13) ==> (#i1 < #i3.13)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (LtkRev( I.3 ) @ #i3.12) ==> #i1 < #i3.12) &
  (All #i3.13. (LtkRev( R.4 ) @ #i3.13) ==> #i1 < #i3.13)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.11, h(<z.8, 'g'^(~lkI.8*~x.8)>)
                      )] /* may loop */ )
      case ch
      solve( KU((#vr.35, 0), 'g'^(~lkI.8*~x.8)) )
        case cexp
        solve( KU((#vr.42, 1), ~lkI.8) )
          case Ltk_reveal
          solve( KU((#vr.42, 1), ~x.8) )
            case Ltk_reveal
            solve( splitEqs(1) )
              case split_case_1
              solve( KU((#vr.35, 0), hkR.72^~ekI.73) )
                case Init_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) wPFS_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (LtkRev( I.3 ) @ #i3.12) ==> (#i1 < #i3.12))) &
        (All #i3.13. (LtkRev( R.4 ) @ #i3.13) ==> (#i1 < #i3.13)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 t.11. (SesskRev( t.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (LtkRev( I.3 ) @ #i3.12) ==> #i1 < #i3.12) &
  (All #i3.13. (LtkRev( R.4 ) @ #i3.13) ==> #i1 < #i3.13)"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.8, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.12, h(<z.8, 'g'^(~lkR.8*~x.8)>)
                      )] /* may loop */ )
      case ch
      solve( KU((#vr.30, 0), 'g'^(~lkR.8*~x.8)) )
        case cexp
        solve( KU((#vr.37, 1), ~lkR.8) )
          case Ltk_reveal
          solve( KU((#vr.37, 1), ~x.8) )
            case Ltk_reveal
            solve( splitEqs(1) )
              case split_case_1
              solve( KU((#vr.30, 0), hkI.67^~ekR.68) )
                case Resp_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/UM_PFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/UM_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.716569s
  wPFS_initiator_key (all-traces): falsified - found trace (10 steps)
  wPFS_responder_key (all-traces): falsified - found trace (10 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/UM_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.716569s
  wPFS_initiator_key (all-traces): falsified - found trace (10 steps)
  wPFS_responder_key (all-traces): falsified - found trace (10 steps)

==============================================================================
*/
