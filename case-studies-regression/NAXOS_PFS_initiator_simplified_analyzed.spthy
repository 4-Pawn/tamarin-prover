theory NAXOS_PFS_initiator_simplified begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* The NAXOS Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^h(<~lkI, ~ekI>) ) ]->
   [
   Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(<~lkI, ~ekI>) ), !EphkI( ~ekI ),
   Out( 'g'^h(<~lkI, ~ekI>) )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y,
          h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
  )
  ]->
   [
   !SesskOfI( ~ekI,
              h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
   )
   ]
  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.5, $R.6, ~lkI.1, hkI.7 ), In( Y.2 ),
     !Pk( $R.6, 'g'^~x.8 )
     ]
    --[
    SidI_2( ~ekI, $I.5, $R.6, hkI.7, Y.2,
            h(<x.3, 'g'^(~x.8*h(<~lkI.1, ~ekI>)), x.4, $I.5, $R.6>)
    )
    ]->
     [
     !SesskOfI( ~ekI, h(<x.3, 'g'^(~x.8*h(<~lkI.1, ~ekI>)), x.4, $I.5, $R.6>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = Y.38
        x.3   = Y.38^~lkI.37
        x.4   = Y.38^h(<~lkI.37, ~ekI.36>)
    
     2. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv(~lkI.37)
        x.3   = x.38
        x.4   = x.38^(h(<~lkI.37, ~ekI.36>)*inv(~lkI.37))
    
     3. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv(h(<~lkI.37, ~ekI.36>))
        x.3   = x.38^(~lkI.37*inv(h(<~lkI.37, ~ekI.36>)))
        x.4   = x.38
    
     4. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv((~lkI.37*h(<~lkI.37, ~ekI.36>)))
        x.3   = x.38^inv(h(<~lkI.37, ~ekI.36>))
        x.4   = x.38^inv(~lkI.37)
    
     5. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^x.40
        x.3   = x.39^(~lkI.38*x.40)
        x.4   = x.39^(x.40*h(<~lkI.38, ~ekI.37>))
    
     6. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((~lkI.38*x.40))
        x.3   = x.39^inv(x.40)
        x.4   = x.39^(h(<~lkI.38, ~ekI.37>)*inv((~lkI.38*x.40)))
    
     7. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((~lkI.38*x.40*h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^inv((x.40*h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^inv((~lkI.38*x.40))
    
     8. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((x.40*h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^(~lkI.38*inv((x.40*h(<~lkI.38, ~ekI.37>))))
        x.4   = x.39^inv(x.40)
    
     9. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv(~lkI.38))
        x.3   = x.39^x.40
        x.4   = x.39^(x.40*h(<~lkI.38, ~ekI.37>)*inv(~lkI.38))
    
    10. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^(~lkI.38*x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^x.40
    
    11. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv((~lkI.38*h(<~lkI.38, ~ekI.37>))))
        x.3   = x.39^(x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^(x.40*inv(~lkI.38))
    
    12. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((~lkI.39*x.42)))
        x.3   = x.40^(x.41*inv(x.42))
        x.4   = x.40^(x.41*h(<~lkI.39, ~ekI.38>)*inv((~lkI.39*x.42)))
    
    13. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((~lkI.39*x.42*h(<~lkI.39, ~ekI.38>))))
        x.3   = x.40^(x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.4   = x.40^(x.41*inv((~lkI.39*x.42)))
    
    14. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.3   = x.40^(~lkI.39*x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.4   = x.40^(x.41*inv(x.42))
  */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
         (K( k.5 ) @ #i2.1)) &
        (All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> (#i1 < #i3.8)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> #i1 < #i3.8"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> #i1 < #i3.8) &
 (All #i1.9 #i2.10 ttest.11 I.12 R.13 k.14 hkI.15 hkR.16.
   (SidI_2( ttest.11, I.12, R.13, hkI.15, hkR.16, k.14 ) @ #i1.9) &
   (K( k.14 ) @ #i2.10)
  ==>
   (Last(#i2.10)) |
   (Last(#i1.9)) |
   (Ex #i3.17.
     (LtkRev( R.13 ) @ #i3.17)
    &
     (All. (Last(#i3.17)) ==> F) & ((#i1.9 = #i3.17) | (#i3.17 < #i1.9))))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.13, $R.14, ~lkI.9, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.14, 'g'^~x.16 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.19,
                           h(<x.11, 'g'^(~x.16*h(<~lkI.9, ~ekI.8>)), x.12, $I.13, $R.14>)
                      )] )
      case h
      solve( KU((#vr.44, 0), 'g'^(~x.16*h(<~lkI.9, ~ekI.8>))) )
        case Init_1
        solve( (#vr.59, 1)[!KU( f_.60, ~x.72 )] )
          case Ltk_reveal
          solve( splitEqs(1) )
            case split_case_01
            solve( KU((#vr.44, 0), hkR.87^~lkI.89) )
              case exp
              solve( (#vr.93, 1)[!KU( f_.94, ~lkI.89 )] )
                case Ltk_reveal
                solve( KU((#vr.44, 0), hkR.87^h(<~lkI.89, ~ekI.88>)) )
                  case Init_1
                  SOLVED (trace found)
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/NAXOS_PFS_initiator_simplified.spthy

------------------------------------------------------------------------------
analyzed: data/examples/NAXOS_PFS_initiator_simplified.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.599111s
  eCK_initiator_key: attack found (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/NAXOS_PFS_initiator_simplified.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.599111s
  eCK_initiator_key: attack found (11 steps)

==============================================================================
*/
