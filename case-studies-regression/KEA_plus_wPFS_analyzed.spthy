theory KEA_plus_wPFS begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* The KEA+ Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !EphkI( ~ekI ), Out( 'g'^~ekI )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) )
  ]->
   [ !SesskOfI( ~ekI, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) ) ]
  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI.3, $I.4, $R.5, ~lkI, hkI.6 ), In( Y.1 ),
     !Pk( $R.5, 'g'^~x.7 )
     ]
    --[
    SidI_2( ~ekI.3, $I.4, $R.5, hkI.6, Y.1,
            h(<x.2, 'g'^(~ekI.3*~x.7), $I.4, $R.5>)
    )
    ]->
     [ !SesskOfI( ~ekI.3, h(<x.2, 'g'^(~ekI.3*~x.7), $I.4, $R.5>) ) ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.31
       Y.1   = Y.32
       x.2   = Y.32^~lkI.31
    
    2. ~lkI  = ~lkI.31
       Y.1   = x.33^inv(~lkI.31)
       x.2   = x.33
    
    3. ~lkI  = ~lkI.32
       Y.1   = x.34^x.35
       x.2   = x.34^(~lkI.32*x.35)
    
    4. ~lkI  = ~lkI.32
       Y.1   = x.34^inv((~lkI.32*x.35))
       x.2   = x.34^inv(x.35)
    
    5. ~lkI  = ~lkI.32
       Y.1   = x.34^(x.35*inv(~lkI.32))
       x.2   = x.34^x.35
    
    6. ~lkI  = ~lkI.33
       Y.1   = x.35^(x.36*inv((~lkI.33*x.37)))
       x.2   = x.35^(x.36*inv(x.37))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
  ]->
   [
   Out( 'g'^~ekR ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
   ]
  /*
  rule (modulo AC) Resp_1:
     [ In( X.1 ), Fr( ~ekR.3 ), !Ltk( $R.4, ~lkR ), !Pk( $I.5, 'g'^~x.6 ) ]
    --[
    SidR_1( ~ekR.3, $I.5, $R.4, X.1, 'g'^~ekR.3,
            h(<'g'^(~ekR.3*~x.6), x.2, $I.5, $R.4>)
    )
    ]->
     [
     Out( 'g'^~ekR.3 ), !EphkR( ~ekR.3 ),
     !SesskOfR( ~ekR.3, h(<'g'^(~ekR.3*~x.6), x.2, $I.5, $R.4>) )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.32
       X.1   = X.33
       x.2   = X.33^~lkR.32
    
    2. ~lkR  = ~lkR.32
       X.1   = x.34^inv(~lkR.32)
       x.2   = x.34
    
    3. ~lkR  = ~lkR.33
       X.1   = x.35^x.36
       x.2   = x.35^(~lkR.33*x.36)
    
    4. ~lkR  = ~lkR.33
       X.1   = x.35^inv((~lkR.33*x.36))
       x.2   = x.35^inv(x.36)
    
    5. ~lkR  = ~lkR.33
       X.1   = x.35^(x.36*inv(~lkR.33))
       x.2   = x.35^x.36
    
    6. ~lkR  = ~lkR.34
       X.1   = x.36^(x.37*inv((~lkR.34*x.38)))
       x.2   = x.36^(x.37*inv(x.38))
  */

rule (modulo E) Sessk_revealI:
   [ !SesskOfI( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealR:
   [ !SesskOfR( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealI:
   [ !EphkI( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealR:
   [ !EphkR( ~ekR ) ] --[ EphkRev( ~ekR ) ]-> [ Out( ~ekR ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) keaplus_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
              (K( k.5 ) @ #i2.1)) &
             (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> (F))) &
            (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
           (All #i3.10 #i4.11 tpartner.12 kpartner.13.
             ((SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
              (EphkRev( tpartner.12 ) @ #i4.11)) ==>
             (F))) &
          (All #i3.14 #i4.15 tpartner.16 kpartner.17.
            ((SidR_1( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
             (SesskRev( tpartner.16 ) @ #i4.15)) ==>
            (F))) &
         (All #i3.18.
           (LtkRev( R.4 ) @ #i3.18) ==>
           ((#i1 < #i3.18) &
            (Ex #i4.19 tpartner.20 kpartner.21.
              SidR_1( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i4.19)))) &
        (All #i3.22. (LtkRev( I.3 ) @ #i3.22) ==> (F)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 kpartner.13.
    (SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
    (EphkRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i3.14 #i4.15 tpartner.16 kpartner.17.
    (SidR_1( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
    (SesskRev( tpartner.16 ) @ #i4.15)
   ==>
    F) &
  (All #i3.18.
    (LtkRev( R.4 ) @ #i3.18)
   ==>
    (#i1 < #i3.18) &
    (Ex #i4.19 tpartner.20 kpartner.21.
      (SidR_1( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i4.19)
     &
      T)) &
  (All #i3.22. (LtkRev( I.3 ) @ #i3.22) ==> F)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
   (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
   (All #i3.10 #i4.11 tpartner.12 kpartner.13.
     (SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
     (EphkRev( tpartner.12 ) @ #i4.11)
    ==>
     F) &
   (All #i3.14 #i4.15 tpartner.16 kpartner.17.
     (SidR_1( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
     (SesskRev( tpartner.16 ) @ #i4.15)
    ==>
     F) &
   (All #i3.18.
     (LtkRev( R.4 ) @ #i3.18)
    ==>
     (#i1 < #i3.18) &
     (Ex #i4.19 tpartner.20 kpartner.21.
       (SidR_1( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i4.19)
      &
       T)) &
   (All #i3.22. (LtkRev( I.3 ) @ #i3.22) ==> F)) &
 (All #i1.23 #i2.24 ttest.25 I.26 R.27 k.28 hkI.29 hkR.30.
   (SidI_2( ttest.25, I.26, R.27, hkI.29, hkR.30, k.28 ) @ #i1.23) &
   (K( k.28 ) @ #i2.24)
  ==>
   (Last(#i2.24)) |
   (Last(#i1.23)) |
   (Ex #i3.31. (EphkRev( ttest.25 ) @ #i3.31) & All. (Last(#i3.31)) ==> F) |
   (Ex #i3.32.
     (SesskRev( ttest.25 ) @ #i3.32)
    &
     All. (Last(#i3.32)) ==> F) |
   (Ex #i3.33 #i4.34 tpartner.35 kpartner.36.
     (SidR_1( tpartner.35, I.26, R.27, hkI.29, hkR.30, kpartner.36
      ) @ #i3.33) &
     (EphkRev( tpartner.35 ) @ #i4.34)
    &
     (All. (Last(#i4.34)) ==> F) & (All. (Last(#i3.33)) ==> F)) |
   (Ex #i3.37 #i4.38 tpartner.39 kpartner.40.
     (SidR_1( tpartner.39, I.26, R.27, hkI.29, hkR.30, kpartner.40
      ) @ #i3.37) &
     (SesskRev( tpartner.39 ) @ #i4.38)
    &
     (All. (Last(#i4.38)) ==> F) & (All. (Last(#i3.37)) ==> F)) |
   (Ex #i3.41.
     (LtkRev( R.27 ) @ #i3.41)
    &
     (All. (Last(#i3.41)) ==> F) &
     ((#i1.23 = #i3.41) |
      (#i3.41 < #i1.23) |
      (All #i4.42 tpartner.43 kpartner.44.
        (SidR_1( tpartner.43, I.26, R.27, hkI.29, hkR.30, kpartner.44 ) @ #i4.42)
       ==>
        Last(#i4.42)))) |
   (Ex #i3.45. (LtkRev( I.26 ) @ #i3.45) & All. (Last(#i3.45)) ==> F))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.11, $I.12, $R.13, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.13, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<x.10, 'g'^(~ekI.11*~x.15), $I.12, $R.13>)
                      )] )
      case Sessk_revealI
      by contradiction // from formulas
    next
      case Sessk_revealR
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_1
          by contradiction // from formulas
        next
          case split_case_2
          solve( (#vf.54, 0)[!KU( f_.55, 'g'^(~ekI.76*~x.77*inv(~lkR.78)) )] )
            case Init_1
            by solve( KU((#vr.91, 1), ~lkR.78) )
          next
            case exp
            solve( KU((#vr.82, 1), ~ekI.76) )
              case Ephk_revealI
              by contradiction // from formulas
            qed
          next
            case generate_ltk
            by solve( KU((#vr.89, 1), ~lkR.78) )
          qed
        next
          case split_case_3
          by contradiction // non-normal terms
        qed
      next
        case split_case_2
        solve( (#vf.16, 0)[!KU( f_.17, 'g'^(~tid.75*~x.76*inv(~lkI.74)) )] )
          case Resp_1
          solve( KU((#vr.94, 1), ~lkI.74) )
            case Ltk_reveal
            by contradiction // from formulas
          qed
        next
          case exp
          solve( KU((#vr.80, 1), ~lkI.74) )
            case Ltk_reveal
            by contradiction // from formulas
          qed
        next
          case generate_ltk
          solve( KU((#vr.87, 1), ~lkI.74) )
            case Ltk_reveal
            by contradiction // from formulas
          qed
        qed
      next
        case split_case_3
        by contradiction // non-normal terms
      qed
    next
      case h
      solve( KU((#vr.43, 0), 'g'^(~ekI.11*~x.15)) )
        case Init_1
        solve( (#vr.58, 1)[!KU( f_.59, ~x.71 )] )
          case Ltk_reveal
          solve( (#i4.86, 2)[!Ltk( $R.13, ~lkR.89 )] )
            case generate_ltk
            solve( (#i4.86, 3)[!Pk( $I.12, 'g'^~x.95 )] )
              case generate_ltk
              solve( splitEqs(1) )
                case split_case_1
                solve( splitEqs(1) )
                  case split_case_1
                  solve( KU((#vr.43, 0), 'g'^(~lkI.120*~ekR.121)) )
                    case Resp_1
                    solve( (#vr.139, 1)[!KU( f_.140, ~lkI.155 )] )
                      case Ltk_reveal
                      by contradiction // from formulas
                    qed
                  next
                    case exp
                    solve( KU((#vr.125, 1), ~lkI.120) )
                      case Ltk_reveal
                      by contradiction // from formulas
                    qed
                  next
                    case generate_ltk
                    solve( (#vr.132, 1)[!KU( f_.133, ~ekR.141 )] )
                      case Ephk_revealR
                      by contradiction // from formulas
                    qed
                  qed
                next
                  case split_case_2
                  by contradiction // non-normal terms
                qed
              next
                case split_case_2
                by contradiction // non-normal terms
              qed
            qed
          qed
        qed
      next
        case exp
        solve( KU((#vr.49, 1), ~ekI.11) )
          case Ephk_revealI
          by contradiction // from formulas
        qed
      next
        case generate_ltk
        solve( (#vr.56, 1)[!KU( f_.57, ~ekI.64 )] )
          case Ephk_revealI
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

lemma (modulo E) keaplus_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
               (K( k.5 ) @ #i2.1)) &
              (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> (F))) &
             (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
            (All #i3.10 #i4.11 tpartner.12 lki.13.
              ((SidI_1( tpartner.12, I.3, R.4, lki.13 ) @ #i3.10) &
               (EphkRev( tpartner.12 ) @ #i4.11)) ==>
              (F))) &
           (All #i3.14 #i4.15 tpartner.16 kpartner.17.
             ((SidI_2( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
              (EphkRev( tpartner.16 ) @ #i4.15)) ==>
             (F))) &
          (All #i3.18 #i4.19 tpartner.20 kpartner.21.
            ((SidI_2( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i3.18) &
             (SesskRev( tpartner.20 ) @ #i4.19)) ==>
            (F))) &
         (All #i3.22.
           (LtkRev( I.3 ) @ #i3.22) ==>
           ((#i1 < #i3.22) &
            (Ex #i4.23 tpartner.24.
              SidI_1( tpartner.24, I.3, R.4, hkI.6 ) @ #i4.23)))) &
        (All #i3.25. (LtkRev( R.4 ) @ #i3.25) ==> (F)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 lki.13.
    (SidI_1( tpartner.12, I.3, R.4, lki.13 ) @ #i3.10) &
    (EphkRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i3.14 #i4.15 tpartner.16 kpartner.17.
    (SidI_2( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
    (EphkRev( tpartner.16 ) @ #i4.15)
   ==>
    F) &
  (All #i3.18 #i4.19 tpartner.20 kpartner.21.
    (SidI_2( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i3.18) &
    (SesskRev( tpartner.20 ) @ #i4.19)
   ==>
    F) &
  (All #i3.22.
    (LtkRev( I.3 ) @ #i3.22)
   ==>
    (#i1 < #i3.22) &
    (Ex #i4.23 tpartner.24.
      (SidI_1( tpartner.24, I.3, R.4, hkI.6 ) @ #i4.23)
     &
      T)) &
  (All #i3.25. (LtkRev( R.4 ) @ #i3.25) ==> F)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
   (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
   (All #i3.10 #i4.11 tpartner.12 lki.13.
     (SidI_1( tpartner.12, I.3, R.4, lki.13 ) @ #i3.10) &
     (EphkRev( tpartner.12 ) @ #i4.11)
    ==>
     F) &
   (All #i3.14 #i4.15 tpartner.16 kpartner.17.
     (SidI_2( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
     (EphkRev( tpartner.16 ) @ #i4.15)
    ==>
     F) &
   (All #i3.18 #i4.19 tpartner.20 kpartner.21.
     (SidI_2( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i3.18) &
     (SesskRev( tpartner.20 ) @ #i4.19)
    ==>
     F) &
   (All #i3.22.
     (LtkRev( I.3 ) @ #i3.22)
    ==>
     (#i1 < #i3.22) &
     (Ex #i4.23 tpartner.24.
       (SidI_1( tpartner.24, I.3, R.4, hkI.6 ) @ #i4.23)
      &
       T)) &
   (All #i3.25. (LtkRev( R.4 ) @ #i3.25) ==> F)) &
 (All #i1.26 #i2.27 ttest.28 I.29 R.30 k.31 hkI.32 hkR.33.
   (SidR_1( ttest.28, I.29, R.30, hkI.32, hkR.33, k.31 ) @ #i1.26) &
   (K( k.31 ) @ #i2.27)
  ==>
   (Last(#i2.27)) |
   (Last(#i1.26)) |
   (Ex #i3.34. (EphkRev( ttest.28 ) @ #i3.34) & All. (Last(#i3.34)) ==> F) |
   (Ex #i3.35.
     (SesskRev( ttest.28 ) @ #i3.35)
    &
     All. (Last(#i3.35)) ==> F) |
   (Ex #i3.36 #i4.37 tpartner.38 lki.39.
     (SidI_1( tpartner.38, I.29, R.30, lki.39 ) @ #i3.36) &
     (EphkRev( tpartner.38 ) @ #i4.37)
    &
     (All. (Last(#i4.37)) ==> F) & (All. (Last(#i3.36)) ==> F)) |
   (Ex #i3.40 #i4.41 tpartner.42 kpartner.43.
     (SidI_2( tpartner.42, I.29, R.30, hkI.32, hkR.33, kpartner.43
      ) @ #i3.40) &
     (EphkRev( tpartner.42 ) @ #i4.41)
    &
     (All. (Last(#i4.41)) ==> F) & (All. (Last(#i3.40)) ==> F)) |
   (Ex #i3.44 #i4.45 tpartner.46 kpartner.47.
     (SidI_2( tpartner.46, I.29, R.30, hkI.32, hkR.33, kpartner.47
      ) @ #i3.44) &
     (SesskRev( tpartner.46 ) @ #i4.45)
    &
     (All. (Last(#i4.45)) ==> F) & (All. (Last(#i3.44)) ==> F)) |
   (Ex #i3.48.
     (LtkRev( I.29 ) @ #i3.48)
    &
     (All. (Last(#i3.48)) ==> F) &
     ((#i1.26 = #i3.48) |
      (#i3.48 < #i1.26) |
      (All #i4.49 tpartner.50.
        (SidI_1( tpartner.50, I.29, R.30, hkI.32 ) @ #i4.49)
       ==>
        Last(#i4.49)))) |
   (Ex #i3.51. (LtkRev( R.30 ) @ #i3.51) & All. (Last(#i3.51)) ==> F))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.12, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.13, 'g'^~x.14 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<'g'^(~ekR.11*~x.14), x.10, $I.13, $R.12>)
                      )] )
      case Sessk_revealI
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_2
          solve( (#vf.45, 0)[!KU( f_.46, 'g'^(~ekR.73*~x.74*inv(~lkI.75)) )] )
            case Resp_1
            solve( KU((#vr.93, 1), ~lkI.75) )
              case Ltk_reveal
              solve( KU((#vr.93, 1), ~x.88) )
                case Ltk_reveal
                solve( (#vf.15, 0)[!KU( f_.16, 'g'^~tid.72 )] )
                  case Init_1
                  SOLVED (trace found)
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/KEA_plus_wPFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/KEA_plus_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.188188s
  keaplus_initiator_key: complete proof (41 steps)
  keaplus_responder_key: attack found (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/KEA_plus_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.188188s
  keaplus_initiator_key: complete proof (41 steps)
  keaplus_responder_key: attack found (11 steps)

==============================================================================
*/
