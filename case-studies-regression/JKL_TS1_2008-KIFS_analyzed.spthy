theory JKL_TS1_2008 begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* Jeong, Katz, Lee : TS1 (2008) *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, ~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, ~ekI ), !EphkI( ~ekI ), Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, ~ekI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, ~ekI, Y, h(<$I, $R, ~ekI, Y, 'g'^~lkR^~lkI>) )
  ]->
   [ !SesskOfI( ~ekI, h(<$I, $R, ~ekI, Y, 'g'^~lkR^~lkI>) ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, ~ekR, h(<$I, $R, X, ~ekR, 'g'^~lkI^~lkR>) )
  ]->
   [
   Out( ~ekR ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR, h(<$I, $R, X, ~ekR, 'g'^~lkI^~lkR>) )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealI:
   [ !SesskOfI( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealR:
   [ !SesskOfR( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealI:
   [ !EphkI( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealR:
   [ !EphkR( ~ekR ) ] --[ EphkRev( ~ekR ) ]-> [ Out( ~ekR ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) JKL2008_2_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i3.15.
           (LtkRev( I.3 ) @ #i3.15) ==>
           (Ex #i4.16 tpartner.17 kpartner.18.
             SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16))) &
        (All #i3.19.
          (LtkRev( R.4 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21 kpartner.22.
            SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15.
    (LtkRev( I.3 ) @ #i3.15)
   ==>
    Ex #i4.16 tpartner.17 kpartner.18.
     (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)
    &
     T) &
  (All #i3.19.
    (LtkRev( R.4 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21 kpartner.22.
     (SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
   (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
   (All #i3.11 #i4.12 tpartner.13 kpartner.14.
     (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
     (SesskRev( tpartner.13 ) @ #i4.12)
    ==>
     F) &
   (All #i3.15.
     (LtkRev( I.3 ) @ #i3.15)
    ==>
     Ex #i4.16 tpartner.17 kpartner.18.
      (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)
     &
      T) &
   (All #i3.19.
     (LtkRev( R.4 ) @ #i3.19)
    ==>
     Ex #i4.20 tpartner.21 kpartner.22.
      (SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)
     &
      T)) &
 (All #i1.23 #i2.24 ttest.25 I.26 R.27 k.28 hkI.29 hkR.30.
   (SidI_2( ttest.25, I.26, R.27, hkI.29, hkR.30, k.28 ) @ #i1.23) &
   (K( k.28 ) @ #i2.24)
  ==>
   (Last(#i2.24)) |
   (Last(#i1.23)) |
   (Ex #i3.31 t.32.
     (EphkRev( t.32 ) @ #i3.31)
    &
     All. (Last(#i3.31)) ==> F) |
   (Ex #i3.33.
     (SesskRev( ttest.25 ) @ #i3.33)
    &
     All. (Last(#i3.33)) ==> F) |
   (Ex #i3.34 #i4.35 tpartner.36 kpartner.37.
     (SidR_1( tpartner.36, I.26, R.27, hkI.29, hkR.30, kpartner.37
      ) @ #i3.34) &
     (SesskRev( tpartner.36 ) @ #i4.35)
    &
     (All. (Last(#i4.35)) ==> F) & (All. (Last(#i3.34)) ==> F)) |
   (Ex #i3.38.
     (LtkRev( I.26 ) @ #i3.38)
    &
     (All. (Last(#i3.38)) ==> F) &
     (All #i4.39 tpartner.40 kpartner.41.
       (SidR_1( tpartner.40, I.26, R.27, hkI.29, hkR.30, kpartner.41 ) @ #i4.39)
      ==>
       Last(#i4.39))) |
   (Ex #i3.42.
     (LtkRev( R.27 ) @ #i3.42)
    &
     (All. (Last(#i3.42)) ==> F) &
     (All #i4.43 tpartner.44 kpartner.45.
       (SidR_1( tpartner.44, I.26, R.27, hkI.29, hkR.30, kpartner.45 ) @ #i4.43)
      ==>
       Last(#i4.43))))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.9, $R.10, ~lkI.11, ~ekI.8 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.10, 'g'^~lkR.13 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.16,
                           h(<$I.9, $R.10, ~ekI.8, hkR.7, 'g'^(~lkI.11*~lkR.13)>)
                      )] )
      case h
      solve( KU((#vr.41, 0), 'g'^(~lkI.11*~lkR.13)) )
        case exp
        solve( KU((#vr.47, 1), ~lkI.11) )
          case Ltk_reveal
          solve( (#i4.65, 2)[!Ltk( $R.10, ~lkR.71 )] )
            case generate_ltk
            solve( (#i4.65, 3)[!Pk( $I.9, 'g'^~lkI.73 )] )
              case generate_ltk
              solve( KU((#vr.47, 1), ~lkR.13) )
                case Ltk_reveal
                solve( (#vf.14, 0)[!KU( f_.15, ~ekR.69 )] )
                  case Resp_1
                  solve( (#vf.74, 0)[!KU( f_.75, ~ekI.8 )] )
                    case Init_1
                    SOLVED (trace found)
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) JKL2008_2_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i3.15.
           (LtkRev( I.3 ) @ #i3.15) ==>
           (Ex #i4.16 tpartner.17.
             SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16))) &
        (All #i3.18.
          (LtkRev( R.4 ) @ #i3.18) ==>
          (Ex #i4.19 tpartner.20.
            SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15.
    (LtkRev( I.3 ) @ #i3.15)
   ==>
    Ex #i4.16 tpartner.17.
     (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16)
    &
     T) &
  (All #i3.18.
    (LtkRev( R.4 ) @ #i3.18)
   ==>
    Ex #i4.19 tpartner.20.
     (SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
   (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
   (All #i3.11 #i4.12 tpartner.13 kpartner.14.
     (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
     (SesskRev( tpartner.13 ) @ #i4.12)
    ==>
     F) &
   (All #i3.15.
     (LtkRev( I.3 ) @ #i3.15)
    ==>
     Ex #i4.16 tpartner.17.
      (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16)
     &
      T) &
   (All #i3.18.
     (LtkRev( R.4 ) @ #i3.18)
    ==>
     Ex #i4.19 tpartner.20.
      (SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)
     &
      T)) &
 (All #i1.21 #i2.22 ttest.23 I.24 R.25 k.26 hkI.27 hkR.28.
   (SidR_1( ttest.23, I.24, R.25, hkI.27, hkR.28, k.26 ) @ #i1.21) &
   (K( k.26 ) @ #i2.22)
  ==>
   (Last(#i2.22)) |
   (Last(#i1.21)) |
   (Ex #i3.29 t.30.
     (EphkRev( t.30 ) @ #i3.29)
    &
     All. (Last(#i3.29)) ==> F) |
   (Ex #i3.31.
     (SesskRev( ttest.23 ) @ #i3.31)
    &
     All. (Last(#i3.31)) ==> F) |
   (Ex #i3.32 #i4.33 tpartner.34 kpartner.35.
     (SidI_2( tpartner.34, I.24, R.25, hkI.27, hkR.28, kpartner.35
      ) @ #i3.32) &
     (SesskRev( tpartner.34 ) @ #i4.33)
    &
     (All. (Last(#i4.33)) ==> F) & (All. (Last(#i3.32)) ==> F)) |
   (Ex #i3.36.
     (LtkRev( I.24 ) @ #i3.36)
    &
     (All. (Last(#i3.36)) ==> F) &
     (All #i4.37 tpartner.38.
       (SidI_1( tpartner.38, I.24, R.25, hkI.27 ) @ #i4.37)
      ==>
       Last(#i4.37))) |
   (Ex #i3.39.
     (LtkRev( R.25 ) @ #i3.39)
    &
     (All. (Last(#i3.39)) ==> F) &
     (All #i4.40 tpartner.41.
       (SidI_1( tpartner.41, I.24, R.25, hkI.27 ) @ #i4.40)
      ==>
       Last(#i4.40))))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.10, ~lkR.11 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.12, 'g'^~lkI.13 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.17,
                           h(<$I.12, $R.10, hkI.6, ~ekR.9, 'g'^(~lkR.11*~lkI.13)>)
                      )] )
      case h
      solve( KU((#vr.33, 0), 'g'^(~lkR.11*~lkI.13)) )
        case exp
        solve( KU((#vr.39, 1), ~lkR.11) )
          case Ltk_reveal
          solve( (#i4.57, 1)[!Ltk( $I.12, ~lkI.61 )] )
            case generate_ltk
            solve( KU((#vr.39, 1), ~lkI.13) )
              case Ltk_reveal
              solve( (#vf.14, 0)[!KU( f_.15, ~ekI.59 )] )
                case Init_1
                solve( KU((#vr.33, 0), ~ekR.9) )
                  case Resp_1
                  SOLVED (trace found)
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/JKL_TS1_2008-KIFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/JKL_TS1_2008-KIFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.595957s
  JKL2008_2_initiator_key: attack found (12 steps)
  JKL2008_2_responder_key: attack found (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/JKL_TS1_2008-KIFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.595957s
  JKL2008_2_initiator_key: attack found (12 steps)
  JKL2008_2_responder_key: attack found (11 steps)

==============================================================================
*/
