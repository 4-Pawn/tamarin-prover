theory STS_MAC begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: KDF/1, fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, KDF(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
     In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
          mac(z, sign(<Y, 'g'^~ekI>, ~ltkR))>
     )
     ]
    --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(z) ) ]->
     [
     Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
           mac(z, sign(<'g'^~ekI, Y>, ~ltkI))>
     ),
     !SessionKey( ~ekI, $I, $R, KDF(z) )
     ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.80
       Y     = Y.83
       z     = Y.83^~ekI.80
    
    2. ~ekI  = ~ekI.88
       Y     = z.93^inv(~ekI.88)
       z     = z.93
    
    3. ~ekI  = ~ekI.271
       Y     = x.534^x.535
       z     = x.534^(~ekI.271*x.535)
    
    4. ~ekI  = ~ekI.271
       Y     = x.534^inv((~ekI.271*x.535))
       z     = x.534^inv(x.535)
    
    5. ~ekI  = ~ekI.271
       Y     = x.534^(x.535*inv(~ekI.271))
       z     = x.534^x.535
    
    6. ~ekI  = ~ekI.279
       Y     = x.549^(x.551*inv((~ekI.279*x.550)))
       z     = x.549^(x.551*inv(x.550))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
    -->
     [
     Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
           mac(z, sign(<'g'^~ekR, X>, ~ltkR))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.72
       X     = X.74
       z     = X.74^~ekR.72
    
    2. ~ekR  = ~ekR.80
       X     = z.84^inv(~ekR.80)
       z     = z.84
    
    3. ~ekR  = ~ekR.248
       X     = x.488^x.489
       z     = x.488^(~ekR.248*x.489)
    
    4. ~ekR  = ~ekR.248
       X     = x.488^inv((~ekR.248*x.489))
       z     = x.488^inv(x.489)
    
    5. ~ekR  = ~ekR.248
       X     = x.488^(x.489*inv(~ekR.248))
       z     = x.488^x.489
    
    6. ~ekR  = ~ekR.256
       X     = x.503^(x.505*inv((~ekR.256*x.504)))
       z     = x.503^(x.505*inv(x.504))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, KDF(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
          mac(z, sign(<X, 'g'^~ekR>, ~ltkI))>
     )
     ]
    --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(z) ) ]->
     [ !SessionKey( ~ekR, $I, $R, KDF(z) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.80
       X     = X.83
       z     = X.83^~ekR.80
    
    2. ~ekR  = ~ekR.88
       X     = z.93^inv(~ekR.88)
       z     = z.93
    
    3. ~ekR  = ~ekR.271
       X     = x.534^x.535
       z     = x.534^(~ekR.271*x.535)
    
    4. ~ekR  = ~ekR.271
       X     = x.534^inv((~ekR.271*x.535))
       z     = x.534^inv(x.535)
    
    5. ~ekR  = ~ekR.271
       X     = x.534^(x.535*inv(~ekR.271))
       z     = x.534^x.535
    
    6. ~ekR  = ~ekR.279
       X     = x.549^(x.551*inv((~ekR.279*x.550)))
       z     = x.549^(x.551*inv(x.550))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.8, $R.8, ~ltkI.8, ~ekI.8 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.8, pk(~ltkR.8) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.9, 0), mac(z.8, sign(<hkr.7, 'g'^~ekI.8>, ~ltkR.8))) )
      case Resp_1
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekI.76*~ekR.77))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.90, 0), mac('g'^(~ekI.76*~ekR.77),
                                   sign(<x.103^x.104, 'g'^~tid.87>, ~ltkI.89))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            solve( KU((#vf.9, 0), 'g'^~ekR.153) )
              case Resp_1
              solve( KU((#vf.9, 0), sign(<'g'^~ekR.153, 'g'^~ekI.152>, ~ltkR.8)) )
                case Resp_1
                solve( KU((#vf.44, 0), 'g'^~ekI.235) )
                  case Init_1
                  solve( KU((#vf.90, 0), sign(<'g'^~ekI.235, 'g'^~ekR.236>, ~ltkI.8)) )
                    case Init_2
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.8, pk(~ltkI.8) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.8, $R.8, ~ltkR.8, ~ekR.8, hki.6 )] )
    case Resp_1
    solve( KU((#vf.9, 0), mac(z.8, sign(<hki.6, 'g'^~ekR.8>, ~ltkI.8))) )
      case Init_2_case_2
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekR.85*~ekI.86))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.47, 0), mac('g'^(~ekR.85*~ekI.86),
                                   sign(<'g'^~ekR.85, 'g'^~ekI.86>, ~ltkR.46))) )
          case Resp_1
          solve( KU((#vf.99, 0), mac('g'^(~ekR.85*~ekI.86),
                                     sign(<'g'^x.113, 'g'^~tid.96>, ~ltkR.98))) )
            case Resp_1
            solve( splitEqs(1) )
              case split
              solve( KU((#vf.9, 0), sign(<'g'^~ekI.201, 'g'^~ekR.200>, ~ltkI.8)) )
                case Init_2
                solve( KU((#vf.28, 0), 'g'^~ekI.248) )
                  case Init_1
                  solve( KU((#vf.47, 0), 'g'^~ekR.247) )
                    case Resp_1
                    solve( KU((#vf.47, 0), sign(<'g'^~ekR.247, 'g'^~ekI.248>, ~ltkR.8)) )
                      case Resp_1
                      SOLVED // trace found
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/STS-MAC.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.568812s
  KI_Perfect_Forward_Secrecy_I (all-traces): falsified - found trace (12 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): falsified - found trace (13 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.568812s
  KI_Perfect_Forward_Secrecy_I (all-traces): falsified - found trace (12 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): falsified - found trace (13 steps)

==============================================================================
*/
