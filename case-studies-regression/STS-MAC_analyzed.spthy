theory STS_MAC begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, h(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, h(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I.1, $R.2, ~ltkI.4, ~ekI.3 ), !Pk( $R.2, pk(~ltkR.5) ),
     In( <$R.2, $I.1, Y.6, sign(<Y.6, 'g'^~ekI.3>, ~ltkR.5), 
          mac(z.8, sign(<Y.6, 'g'^~ekI.3>, ~ltkR.5))>
     )
     ]
    --[ AcceptedI( ~ekI.3, $I.1, $R.2, 'g'^~ekI.3, Y.6, h(z.8) ) ]->
     [
     Out( <$I.1, $R.2, sign(<'g'^~ekI.3, Y.6>, ~ltkI.4), 
           mac(z.8, sign(<'g'^~ekI.3, Y.6>, ~ltkI.4))>
     ),
     !SessionKey( ~ekI.3, $I.1, $R.2, h(z.8) )
     ]
  
    variants (modulo AC)
    1. ~ekI.3
             = ~ekI.67
       Y.6   = Y.68
       z.8   = Y.68^~ekI.67
    
    2. ~ekI.3
             = ~ekI.67
       Y.6   = z.68^inv(~ekI.67)
       z.8   = z.68
    
    3. ~ekI.3
             = ~ekI.71
       Y.6   = x.72^x.73
       z.8   = x.72^(~ekI.71*x.73)
    
    4. ~ekI.3
             = ~ekI.71
       Y.6   = x.72^inv((~ekI.71*x.73))
       z.8   = x.72^inv(x.73)
    
    5. ~ekI.3
             = ~ekI.71
       Y.6   = x.72^(x.73*inv(~ekI.71))
       z.8   = x.72^x.73
    
    6. ~ekI.3
             = ~ekI.75
       Y.6   = x.76^(x.77*inv((~ekI.75*x.78)))
       z.8   = x.76^(x.77*inv(x.78))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R.2, ~ltkR.4 ), Fr( ~ekR.3 ), In( <$I.1, $R.2, X.5> ) ]
    -->
     [
     Resp_1( $I.1, $R.2, ~ltkR.4, ~ekR.3, X.5 ),
     Out( <$R.2, $I.1, 'g'^~ekR.3, sign(<'g'^~ekR.3, X.5>, ~ltkR.4), 
           mac(z.7, sign(<'g'^~ekR.3, X.5>, ~ltkR.4))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR.3
             = ~ekR.61
       X.5   = X.62
       z.7   = X.62^~ekR.61
    
    2. ~ekR.3
             = ~ekR.61
       X.5   = z.62^inv(~ekR.61)
       z.7   = z.62
    
    3. ~ekR.3
             = ~ekR.65
       X.5   = x.66^x.67
       z.7   = x.66^(~ekR.65*x.67)
    
    4. ~ekR.3
             = ~ekR.65
       X.5   = x.66^inv((~ekR.65*x.67))
       z.7   = x.66^inv(x.67)
    
    5. ~ekR.3
             = ~ekR.65
       X.5   = x.66^(x.67*inv(~ekR.65))
       z.7   = x.66^x.67
    
    6. ~ekR.3
             = ~ekR.69
       X.5   = x.70^(x.71*inv((~ekR.69*x.72)))
       z.7   = x.70^(x.71*inv(x.72))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, h(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, h(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I.1, pk(~ltkI.4) ), Resp_1( $I.1, $R.2, ~ltkR.5, ~ekR.3, X.6 ),
     In( <$I.1, $R.2, sign(<X.6, 'g'^~ekR.3>, ~ltkI.4), 
          mac(z.8, sign(<X.6, 'g'^~ekR.3>, ~ltkI.4))>
     )
     ]
    --[ AcceptedR( ~ekR.3, $I.1, $R.2, X.6, 'g'^~ekR.3, h(z.8) ) ]->
     [ !SessionKey( ~ekR.3, $I.1, $R.2, h(z.8) ) ]
  
    variants (modulo AC)
    1. ~ekR.3
             = ~ekR.67
       X.6   = X.68
       z.8   = X.68^~ekR.67
    
    2. ~ekR.3
             = ~ekR.67
       X.6   = z.68^inv(~ekR.67)
       z.8   = z.68
    
    3. ~ekR.3
             = ~ekR.71
       X.6   = x.72^x.73
       z.8   = x.72^(~ekR.71*x.73)
    
    4. ~ekR.3
             = ~ekR.71
       X.6   = x.72^inv((~ekR.71*x.73))
       z.8   = x.72^inv(x.73)
    
    5. ~ekR.3
             = ~ekR.71
       X.6   = x.72^(x.73*inv(~ekR.71))
       z.8   = x.72^x.73
    
    6. ~ekR.3
             = ~ekR.75
       X.6   = x.76^(x.77*inv((~ekR.75*x.78)))
       z.8   = x.76^(x.77*inv(x.78))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.9, $R.10, ~ltkI.12, ~ekI.11 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.10, pk(~ltkR.13) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.17, 0), mac(z.16, sign(<hkr.7, 'g'^~ekI.11>, ~ltkR.13))) )
      case Resp_1
      solve( (#k.5, 0)[!KU( f_.19, h('g'^(~ekI.115*~ekR.116))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.141, 0), mac('g'^(~ekI.115*~ekR.116),
                                    sign(<x.167^x.168, 'g'^~tid.129>, ~ltkI.136))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            solve( KU((#vf.17, 0), 'g'^~ekR.236) )
              case Resp_1
              solve( KU((#vf.17, 0), sign(<'g'^~ekR.236, 'g'^~ekI.235>, ~ltkR.13)) )
                case Resp_1
                solve( KU((#vf.71, 0), 'g'^~ekI.347) )
                  case Init_1
                  solve( KU((#vf.141, 0), sign(<'g'^~ekI.347, 'g'^~ekR.348>, ~ltkI.12)) )
                    case Init_2
                    SOLVED (trace found)
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.9, pk(~ltkI.12) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.9, $R.10, ~ltkR.13, ~ekR.11, hki.6 )] )
    case Resp_1
    solve( KU((#vf.17, 0), mac(z.16, sign(<hki.6, 'g'^~ekR.11>, ~ltkI.12))) )
      case Init_2_case_2
      solve( (#k.5, 0)[!KU( f_.19, h('g'^(~ekR.125*~ekI.126))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.76, 0), mac('g'^(~ekR.125*~ekI.126),
                                   sign(<'g'^~ekR.125, 'g'^~ekI.126>, ~ltkR.72))) )
          case Resp_1
          solve( KU((#vf.151, 0), mac('g'^(~ekR.125*~ekI.126),
                                      sign(<'g'^x.178, 'g'^~tid.139>, ~ltkR.147))) )
            case Resp_1
            solve( splitEqs(1) )
              case split
              solve( KU((#vf.17, 0), sign(<'g'^~ekI.286, 'g'^~ekR.285>, ~ltkI.12)) )
                case Init_2
                solve( KU((#vf.46, 0), 'g'^~ekI.352) )
                  case Init_1
                  solve( KU((#vf.76, 0), 'g'^~ekR.351) )
                    case Resp_1
                    solve( KU((#vf.76, 0), sign(<'g'^~ekR.351, 'g'^~ekI.352>, ~ltkR.13)) )
                      case Resp_1
                      SOLVED (trace found)
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/STS-MAC.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.184233s
  KI_Perfect_Forward_Secrecy_I: attack found (12 steps)
  KI_Perfect_Forward_Secrecy_R: attack found (13 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.184233s
  KI_Perfect_Forward_Secrecy_I: attack found (12 steps)
  KI_Perfect_Forward_Secrecy_R: attack found (13 steps)

==============================================================================
*/
