theory STS_MAC begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, h(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, h(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I.3, $R.4, ~ltkI.5, ~ekI ), !Pk( $R.4, pk(~x.6) ),
     In( <$R.4, $I.3, Y.1, sign(<Y.1, 'g'^~ekI>, ~x.6), 
          mac(x.2, sign(<Y.1, 'g'^~ekI>, ~x.6))>
     )
     ]
    --[ AcceptedI( ~ekI, $I.3, $R.4, 'g'^~ekI, Y.1, h(x.2) ) ]->
     [
     Out( <$I.3, $R.4, sign(<'g'^~ekI, Y.1>, ~ltkI.5), 
           mac(x.2, sign(<'g'^~ekI, Y.1>, ~ltkI.5))>
     ),
     !SessionKey( ~ekI, $I.3, $R.4, h(x.2) )
     ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.74
       Y.1   = Y.75
       x.2   = Y.75^~ekI.74
    
    2. ~ekI  = ~ekI.74
       Y.1   = x.75^inv(~ekI.74)
       x.2   = x.75
    
    3. ~ekI  = ~ekI.75
       Y.1   = x.76^x.77
       x.2   = x.76^(~ekI.75*x.77)
    
    4. ~ekI  = ~ekI.75
       Y.1   = x.76^inv((~ekI.75*x.77))
       x.2   = x.76^inv(x.77)
    
    5. ~ekI  = ~ekI.75
       Y.1   = x.76^(x.77*inv(~ekI.75))
       x.2   = x.76^x.77
    
    6. ~ekI  = ~ekI.76
       Y.1   = x.77^(x.78*inv((~ekI.76*x.79)))
       x.2   = x.77^(x.78*inv(x.79))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R.3, ~ltkR.4 ), Fr( ~ekR ), In( <$I.5, $R.3, X.1> ) ]
    -->
     [
     Resp_1( $I.5, $R.3, ~ltkR.4, ~ekR, X.1 ),
     Out( <$R.3, $I.5, 'g'^~ekR, sign(<'g'^~ekR, X.1>, ~ltkR.4), 
           mac(x.2, sign(<'g'^~ekR, X.1>, ~ltkR.4))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.47
       X.1   = X.48
       x.2   = X.48^~ekR.47
    
    2. ~ekR  = ~ekR.47
       X.1   = x.48^inv(~ekR.47)
       x.2   = x.48
    
    3. ~ekR  = ~ekR.48
       X.1   = x.49^x.50
       x.2   = x.49^(~ekR.48*x.50)
    
    4. ~ekR  = ~ekR.48
       X.1   = x.49^inv((~ekR.48*x.50))
       x.2   = x.49^inv(x.50)
    
    5. ~ekR  = ~ekR.48
       X.1   = x.49^(x.50*inv(~ekR.48))
       x.2   = x.49^x.50
    
    6. ~ekR  = ~ekR.49
       X.1   = x.50^(x.51*inv((~ekR.49*x.52)))
       x.2   = x.50^(x.51*inv(x.52))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, h(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, h(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I.3, pk(~x.4) ), Resp_1( $I.3, $R.5, ~ltkR.6, ~ekR, X.1 ),
     In( <$I.3, $R.5, sign(<X.1, 'g'^~ekR>, ~x.4), 
          mac(x.2, sign(<X.1, 'g'^~ekR>, ~x.4))>
     )
     ]
    --[ AcceptedR( ~ekR, $I.3, $R.5, X.1, 'g'^~ekR, h(x.2) ) ]->
     [ !SessionKey( ~ekR, $I.3, $R.5, h(x.2) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.45
       X.1   = X.46
       x.2   = X.46^~ekR.45
    
    2. ~ekR  = ~ekR.45
       X.1   = x.46^inv(~ekR.45)
       x.2   = x.46
    
    3. ~ekR  = ~ekR.46
       X.1   = x.47^x.48
       x.2   = x.47^(~ekR.46*x.48)
    
    4. ~ekR  = ~ekR.46
       X.1   = x.47^inv((~ekR.46*x.48))
       x.2   = x.47^inv(x.48)
    
    5. ~ekR  = ~ekR.46
       X.1   = x.47^(x.48*inv(~ekR.46))
       x.2   = x.47^x.48
    
    6. ~ekR  = ~ekR.47
       X.1   = x.48^(x.49*inv((~ekR.47*x.50)))
       x.2   = x.48^(x.49*inv(x.50))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.11, $R.12, ~ltkI.13, ~ekI.8 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.12, pk(~x.14) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.15, 0), mac(x.10, sign(<hkr.7, 'g'^~ekI.8>, ~x.14))) )
      case Resp_1
      solve( splitEqs(1) )
        case split
        solve( (#k.5, 0)[!KU( f_.17, h('g'^(~ekI.86*~ekR.87)) )] /* may loop */ )
          case Sessionkey_Reveal_case_4
          solve( KU((#vf.100, 0), mac('g'^(~ekI.86*~ekR.87),
                                      sign(<x.130^x.131, 'g'^~tid.93>, ~x.97))) )
            case Init_2_case_1
            solve( KU((#vf.144, 0), mac('g'^(~ekI.86*~ekR.87),
                                        sign(<'g'^~tid.93, 'g'^~ekI.136>, ~x.143))) )
              case Resp_1
              solve( splitEqs(1) )
                case split
                solve( splitEqs(1) )
                  case split
                  solve( splitEqs(1) )
                    case split
                    solve( splitEqs(1) )
                      case split
                      solve( KU((#vf.15, 0), 'g'^~ekR.227) )
                        case Resp_1
                        solve( KU((#vf.15, 0), sign(<'g'^~ekR.227, 'g'^~ekI.226>, ~x.14)) )
                          case Resp_1
                          solve( KU((#vf.52, 0), 'g'^~ekI.226) )
                            case Init_1
                            solve( KU((#vf.100, 0), sign(<'g'^~ekI.226, 'g'^~ekR.227>, ~ltkI.13)) )
                              case Init_2
                              SOLVED (trace found)
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.11, pk(~x.12) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.11, $R.13, ~ltkR.14, ~ekR.8, hki.6 )] )
    case Resp_1
    solve( KU((#vf.15, 0), mac(x.10, sign(<hki.6, 'g'^~ekR.8>, ~x.12))) )
      case Init_2_case_2
      solve( KU((#vf.58, 0), mac(x.95^x.96,
                                 sign(<'g'^~ekR.8, 'g'^~ekI.50>, ~x.57))) )
        case Resp_1
        solve( splitEqs(1) )
          case split
          solve( (#k.5, 0)[!KU( f_.17, h('g'^(~ekR.142*~ekI.143))
                           )] /* may loop */ )
            case Sessionkey_Reveal_case_2
            solve( KU((#vf.156, 0), mac('g'^(~ekR.142*~ekI.143),
                                        sign(<x.182^x.183, 'g'^~tid.149>, ~x.154))) )
              case Resp_1
              solve( splitEqs(1) )
                case split
                solve( splitEqs(1) )
                  case split
                  solve( KU((#vf.15, 0), sign(<'g'^~ekI.228, 'g'^~ekR.227>, ~x.12)) )
                    case Init_2
                    solve( KU((#vf.37, 0), 'g'^~ekI.228) )
                      case Init_1
                      solve( KU((#vf.58, 0), 'g'^~ekR.227) )
                        case Resp_1
                        solve( KU((#vf.58, 0), sign(<'g'^~ekR.227, 'g'^~ekI.228>, ~ltkR.14)) )
                          case Resp_1
                          SOLVED (trace found)
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/STS-MAC.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 40.686795s
  KI_Perfect_Forward_Secrecy_I: attack found (17 steps)
  KI_Perfect_Forward_Secrecy_R: attack found (15 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS-MAC.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 40.686795s
  KI_Perfect_Forward_Secrecy_I: attack found (17 steps)
  KI_Perfect_Forward_Secrecy_R: attack found (15 steps)

==============================================================================
*/
