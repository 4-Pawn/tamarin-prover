theory STS_MAC_FIX2 begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version, fixed with names and tags) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, h(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, h(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I.1, $R.2, ~ltkI.4, ~ekI.3 ), !Pk( $R.2, pk(~ltkR.5) ),
     In( <$R.2, $I.1, Y.6, sign(<'1', $I.1, $R.2, Y.6, 'g'^~ekI.3>, ~ltkR.5), 
          mac(z.9, sign(<'1', $I.1, $R.2, Y.6, 'g'^~ekI.3>, ~ltkR.5))>
     )
     ]
    --[ AcceptedI( ~ekI.3, $I.1, $R.2, 'g'^~ekI.3, Y.6, h(z.9) ) ]->
     [
     Out( <$I.1, $R.2, sign(<'2', $I.1, $R.2, 'g'^~ekI.3, Y.6>, ~ltkI.4), 
           mac(z.9, sign(<'2', $I.1, $R.2, 'g'^~ekI.3, Y.6>, ~ltkI.4))>
     ),
     !SessionKey( ~ekI.3, $I.1, $R.2, h(z.9) )
     ]
  
    variants (modulo AC)
    1. ~ekI.3
             = ~ekI.103
       Y.6   = Y.104
       z.9   = Y.104^~ekI.103
    
    2. ~ekI.3
             = ~ekI.103
       Y.6   = z.104^inv(~ekI.103)
       z.9   = z.104
    
    3. ~ekI.3
             = ~ekI.109
       Y.6   = x.110^x.111
       z.9   = x.110^(~ekI.109*x.111)
    
    4. ~ekI.3
             = ~ekI.109
       Y.6   = x.110^inv((~ekI.109*x.111))
       z.9   = x.110^inv(x.111)
    
    5. ~ekI.3
             = ~ekI.109
       Y.6   = x.110^(x.111*inv(~ekI.109))
       z.9   = x.110^x.111
    
    6. ~ekI.3
             = ~ekI.115
       Y.6   = x.116^(x.117*inv((~ekI.115*x.118)))
       z.9   = x.116^(x.117*inv(x.118))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R.2, ~ltkR.4 ), Fr( ~ekR.3 ), In( <$I.1, $R.2, X.5> ) ]
    -->
     [
     Resp_1( $I.1, $R.2, ~ltkR.4, ~ekR.3, X.5 ),
     Out( <$R.2, $I.1, 'g'^~ekR.3, 
           sign(<'1', $I.1, $R.2, 'g'^~ekR.3, X.5>, ~ltkR.4), 
           mac(z.8, sign(<'1', $I.1, $R.2, 'g'^~ekR.3, X.5>, ~ltkR.4))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR.3
             = ~ekR.77
       X.5   = X.78
       z.8   = X.78^~ekR.77
    
    2. ~ekR.3
             = ~ekR.77
       X.5   = z.78^inv(~ekR.77)
       z.8   = z.78
    
    3. ~ekR.3
             = ~ekR.82
       X.5   = x.83^x.84
       z.8   = x.83^(~ekR.82*x.84)
    
    4. ~ekR.3
             = ~ekR.82
       X.5   = x.83^inv((~ekR.82*x.84))
       z.8   = x.83^inv(x.84)
    
    5. ~ekR.3
             = ~ekR.82
       X.5   = x.83^(x.84*inv(~ekR.82))
       z.8   = x.83^x.84
    
    6. ~ekR.3
             = ~ekR.87
       X.5   = x.88^(x.89*inv((~ekR.87*x.90)))
       z.8   = x.88^(x.89*inv(x.90))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, h(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, h(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I.1, pk(~ltkI.4) ), Resp_1( $I.1, $R.2, ~ltkR.5, ~ekR.3, X.6 ),
     In( <$I.1, $R.2, sign(<'2', $I.1, $R.2, X.6, 'g'^~ekR.3>, ~ltkI.4), 
          mac(z.9, sign(<'2', $I.1, $R.2, X.6, 'g'^~ekR.3>, ~ltkI.4))>
     )
     ]
    --[ AcceptedR( ~ekR.3, $I.1, $R.2, X.6, 'g'^~ekR.3, h(z.9) ) ]->
     [ !SessionKey( ~ekR.3, $I.1, $R.2, h(z.9) ) ]
  
    variants (modulo AC)
    1. ~ekR.3
             = ~ekR.84
       X.6   = X.85
       z.9   = X.85^~ekR.84
    
    2. ~ekR.3
             = ~ekR.84
       X.6   = z.85^inv(~ekR.84)
       z.9   = z.85
    
    3. ~ekR.3
             = ~ekR.89
       X.6   = x.90^x.91
       z.9   = x.90^(~ekR.89*x.91)
    
    4. ~ekR.3
             = ~ekR.89
       X.6   = x.90^inv((~ekR.89*x.91))
       z.9   = x.90^inv(x.91)
    
    5. ~ekR.3
             = ~ekR.89
       X.6   = x.90^(x.91*inv(~ekR.89))
       z.9   = x.90^x.91
    
    6. ~ekR.3
             = ~ekR.94
       X.6   = x.95^(x.96*inv((~ekR.94*x.97)))
       z.9   = x.95^(x.96*inv(x.97))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.9, $R.10, ~ltkI.12, ~ekI.11 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.10, pk(~ltkR.13) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.18, 0), mac(z.17,
                               sign(<'1', $I.9, $R.10, hkr.7, 'g'^~ekI.11>, ~ltkR.13))) )
      case Resp_1
      solve( (#k.5, 0)[!KU( f_.20, h('g'^(~ekI.117*~ekR.118))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.144, 0), mac('g'^(~ekI.117*~ekR.118),
                                    sign(<'1', $I.129, $R.130, x.171^x.172, 'g'^~tid.131>, ~ltkR.139))) )
          case Resp_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case cmac
          solve( (#vr.177, 0)[!KU( f_.180, 'g'^(~ekI.117*~ekR.118)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.219, 1)[!KU( f_.222, ~ekR.237 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.229, 1)[!KU( f_.232, ~ekI.236 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.186, 1), ~ekI.117) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.144, 0), mac('g'^(~ekI.117*~ekR.118),
                                    sign(<'1', $I.129, $R.130, x.171^x.172, 'g'^~tid.131>, ~ltkR.139))) )
          case Resp_1
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.177, 0)[!KU( f_.180, 'g'^(~ekI.117*~ekR.118)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.219, 1)[!KU( f_.222, ~ekR.237 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.229, 1)[!KU( f_.232, ~ekI.236 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.186, 1), ~ekI.117) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.144, 0), mac('g'^(~ekI.117*~ekR.118),
                                    sign(<'2', $I.129, $R.130, x.171^x.172, 'g'^~tid.131>, ~ltkI.138))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.177, 0)[!KU( f_.180, 'g'^(~ekI.117*~ekR.118)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.219, 1)[!KU( f_.222, ~ekR.237 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.229, 1)[!KU( f_.232, ~ekI.236 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.186, 1), ~ekI.117) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.144, 0), mac('g'^(~ekI.117*~ekR.118),
                                    sign(<'2', $I.129, $R.130, x.171^x.172, 'g'^~tid.131>, ~ltkI.138))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.177, 0)[!KU( f_.180, 'g'^(~ekI.117*~ekR.118)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.219, 1)[!KU( f_.222, ~ekR.237 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.229, 1)[!KU( f_.232, ~ekI.236 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.186, 1), ~ekI.117) )
          qed
        qed
      next
        case ch
        solve( (#vr.122, 0)[!KU( f_.124, 'g'^(~ekI.117*~ekR.118)
                            )] /* may loop */ )
          case Init_1
          by solve( (#vr.162, 1)[!KU( f_.165, ~ekR.180 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.172, 1)[!KU( f_.175, ~ekI.179 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.129, 1), ~ekI.117) )
        qed
      qed
    next
      case cmac
      solve( KU((#vf.18, 0), sign(<'1', $I.9, $R.10, hkr.7, 'g'^~ekI.11>,
                                  ~ltkR.13)) )
        case Resp_1
        solve( (#vr.56, 0)[!KU( f_.59, 'g'^(~ekI.132*~ekR.133)
                           )] /* may loop */ )
          case Init_1
          by solve( (#vr.171, 1)[!KU( f_.174, ~ekR.189 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.181, 1)[!KU( f_.184, ~ekI.188 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.138, 1), ~ekI.132) )
        qed
      next
        case csign
        by solve( (#vr.65, 1)[!KU( f_.69, ~ltkR.13 )] /* may loop */ )
      qed
    qed
  next
    case Register_pk_clone_case_2
    by contradiction // from formulas
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.9, pk(~ltkI.12) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.9, $R.10, ~ltkR.13, ~ekR.11, hki.6 )] )
    case Resp_1
    solve( KU((#vf.18, 0), mac(z.17,
                               sign(<'2', $I.9, $R.10, hki.6, 'g'^~ekR.11>, ~ltkI.12))) )
      case Init_2_case_1
      solve( (#k.5, 0)[!KU( f_.20, h('g'^(~ekR.128*~ekI.129))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.79, 0), mac('g'^(~ekR.128*~ekI.129),
                                   sign(<'1', $I.9, $R.10, 'g'^~ekR.128, 'g'^~ekI.129>, ~ltkR.74))) )
          case Resp_1
          solve( KU((#vf.155, 0), mac('g'^(~ekR.128*~ekI.129),
                                      sign(<'1', $I.140, $R.141, 'g'^x.183, 'g'^~tid.142>, ~ltkR.150))) )
            case Resp_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case cmac
            solve( (#vr.242, 0)[!KU( f_.245, 'g'^(~ekR.128*~ekI.129)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.284, 1)[!KU( f_.287, ~ekR.301 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.294, 1)[!KU( f_.297, ~ekI.302 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.251, 1), ~ekR.128) )
            qed
          qed
        next
          case cmac
          solve( (#vr.188, 0)[!KU( f_.191, 'g'^(~ekR.128*~ekI.129)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.230, 1)[!KU( f_.233, ~ekR.247 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.240, 1)[!KU( f_.243, ~ekI.248 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.197, 1), ~ekR.128) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.79, 0), mac('g'^(~ekR.128*~ekI.129),
                                   sign(<'1', $I.9, $R.10, 'g'^~ekR.128, 'g'^~ekI.129>, ~ltkR.74))) )
          case Resp_1
          solve( KU((#vf.155, 0), mac('g'^(~ekR.128*~ekI.129),
                                      sign(<'1', $I.140, $R.141, 'g'^x.183, 'g'^~tid.142>, ~ltkR.150))) )
            case Resp_1
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.242, 0)[!KU( f_.245, 'g'^(~ekR.128*~ekI.129)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.284, 1)[!KU( f_.287, ~ekR.301 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.294, 1)[!KU( f_.297, ~ekI.302 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.251, 1), ~ekR.128) )
            qed
          qed
        next
          case cmac
          solve( (#vr.188, 0)[!KU( f_.191, 'g'^(~ekR.128*~ekI.129)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.230, 1)[!KU( f_.233, ~ekR.247 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.240, 1)[!KU( f_.243, ~ekI.248 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.197, 1), ~ekR.128) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.79, 0), mac('g'^(~ekR.128*~ekI.129),
                                   sign(<'1', $I.9, $R.10, 'g'^~ekR.128, 'g'^~ekI.129>, ~ltkR.74))) )
          case Resp_1
          solve( KU((#vf.155, 0), mac('g'^(~ekR.128*~ekI.129),
                                      sign(<'2', $I.140, $R.141, 'g'^x.183, 'g'^~tid.142>, ~ltkI.149))) )
            case Init_2_case_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.242, 0)[!KU( f_.245, 'g'^(~ekR.128*~ekI.129)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.284, 1)[!KU( f_.287, ~ekR.301 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.294, 1)[!KU( f_.297, ~ekI.302 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.251, 1), ~ekR.128) )
            qed
          qed
        next
          case cmac
          solve( (#vr.188, 0)[!KU( f_.191, 'g'^(~ekR.128*~ekI.129)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.230, 1)[!KU( f_.233, ~ekR.247 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.240, 1)[!KU( f_.243, ~ekI.248 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.197, 1), ~ekR.128) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.79, 0), mac('g'^(~ekR.128*~ekI.129),
                                   sign(<'1', $I.9, $R.10, 'g'^~ekR.128, 'g'^~ekI.129>, ~ltkR.74))) )
          case Resp_1
          solve( KU((#vf.155, 0), mac('g'^(~ekR.128*~ekI.129),
                                      sign(<'2', $I.140, $R.141, 'g'^x.183, 'g'^~tid.142>, ~ltkI.149))) )
            case Init_2_case_1
            by solve( splitEqs(1) )
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.242, 0)[!KU( f_.245, 'g'^(~ekR.128*~ekI.129)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.284, 1)[!KU( f_.287, ~ekR.301 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.294, 1)[!KU( f_.297, ~ekI.302 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.251, 1), ~ekR.128) )
            qed
          qed
        next
          case cmac
          solve( (#vr.188, 0)[!KU( f_.191, 'g'^(~ekR.128*~ekI.129)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.230, 1)[!KU( f_.233, ~ekR.247 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.240, 1)[!KU( f_.243, ~ekI.248 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.197, 1), ~ekR.128) )
          qed
        qed
      next
        case ch
        solve( (#vr.133, 0)[!KU( f_.135, 'g'^(~ekR.128*~ekI.129)
                            )] /* may loop */ )
          case Init_1
          by solve( (#vr.173, 1)[!KU( f_.176, ~ekR.190 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.183, 1)[!KU( f_.186, ~ekI.191 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.140, 1), ~ekR.128) )
        qed
      qed
    next
      case Init_2_case_2
      by contradiction // from formulas
    next
      case cmac
      solve( KU((#vf.18, 0), sign(<'2', $I.9, $R.10, hki.6, 'g'^~ekR.11>,
                                  ~ltkI.12)) )
        case Init_2_case_1
        solve( (#vr.61, 0)[!KU( f_.64, 'g'^(~ekR.143*~ekI.144)
                           )] /* may loop */ )
          case Init_1
          by solve( (#vr.182, 1)[!KU( f_.185, ~ekR.199 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.192, 1)[!KU( f_.195, ~ekI.200 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.149, 1), ~ekR.143) )
        qed
      next
        case Init_2_case_2
        by contradiction // from formulas
      next
        case csign
        by solve( (#vr.70, 1)[!KU( f_.74, ~ltkI.12 )] /* may loop */ )
      qed
    qed
  qed
next
  case Register_pk_clone_case_2
  by contradiction // from formulas
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/STS-MAC-fix2.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS-MAC-fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.214962s
  KI_Perfect_Forward_Secrecy_I: complete proof (45 steps)
  KI_Perfect_Forward_Secrecy_R: complete proof (66 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS-MAC-fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.214962s
  KI_Perfect_Forward_Secrecy_I: complete proof (45 steps)
  KI_Perfect_Forward_Secrecy_R: complete proof (66 steps)

==============================================================================
*/
