theory STS_MAC_FIX2 begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: KDF/1, fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version, fixed with names and tags) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, KDF(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
     In( <$R, $I, Y, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR), 
          mac(z, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR))>
     )
     ]
    --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(z) ) ]->
     [
     Out( <$I, $R, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI), 
           mac(z, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI))>
     ),
     !SessionKey( ~ekI, $I, $R, KDF(z) )
     ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.126
       Y     = Y.129
       z     = Y.129^~ekI.126
    
    2. ~ekI  = ~ekI.143
       Y     = z.149^inv(~ekI.143)
       z     = z.149
    
    3. ~ekI  = ~ekI.1293
       Y     = x.2578^x.2579
       z     = x.2578^(~ekI.1293*x.2579)
    
    4. ~ekI  = ~ekI.1293
       Y     = x.2578^inv((~ekI.1293*x.2579))
       z     = x.2578^inv(x.2579)
    
    5. ~ekI  = ~ekI.1293
       Y     = x.2578^(x.2579*inv(~ekI.1293))
       z     = x.2578^x.2579
    
    6. ~ekI  = ~ekI.1325
       Y     = x.2641^(x.2643*inv((~ekI.1325*x.2642)))
       z     = x.2641^(x.2643*inv(x.2642))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
    -->
     [
     Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     Out( <$R, $I, 'g'^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR), 
           mac(z, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.92
       X     = X.94
       z     = X.94^~ekR.92
    
    2. ~ekR  = ~ekR.106
       X     = z.111^inv(~ekR.106)
       z     = z.111
    
    3. ~ekR  = ~ekR.548
       X     = x.1088^x.1089
       z     = x.1088^(~ekR.548*x.1089)
    
    4. ~ekR  = ~ekR.548
       X     = x.1088^inv((~ekR.548*x.1089))
       z     = x.1088^inv(x.1089)
    
    5. ~ekR  = ~ekR.548
       X     = x.1088^(x.1089*inv(~ekR.548))
       z     = x.1088^x.1089
    
    6. ~ekR  = ~ekR.564
       X     = x.1119^(x.1121*inv((~ekR.564*x.1120)))
       z     = x.1119^(x.1121*inv(x.1120))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, KDF(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     In( <$I, $R, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI), 
          mac(z, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI))>
     )
     ]
    --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(z) ) ]->
     [ !SessionKey( ~ekR, $I, $R, KDF(z) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.102
       X     = X.105
       z     = X.105^~ekR.102
    
    2. ~ekR  = ~ekR.116
       X     = z.122^inv(~ekR.116)
       z     = z.122
    
    3. ~ekR  = ~ekR.595
       X     = x.1182^x.1183
       z     = x.1182^(~ekR.595*x.1183)
    
    4. ~ekR  = ~ekR.595
       X     = x.1182^inv((~ekR.595*x.1183))
       z     = x.1182^inv(x.1183)
    
    5. ~ekR  = ~ekR.595
       X     = x.1182^(x.1183*inv(~ekR.595))
       z     = x.1182^x.1183
    
    6. ~ekR  = ~ekR.611
       X     = x.1213^(x.1215*inv((~ekR.611*x.1214)))
       z     = x.1213^(x.1215*inv(x.1214))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.8, $R.8, ~ltkI.8, ~ekI.8 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.8, pk(~ltkR.8) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.9, 0), mac(z.8,
                              sign(<'1', $I.8, $R.8, hkr.7, 'g'^~ekI.8>, ~ltkR.8))) )
      case Resp_1
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekI.76*~ekR.77))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.90, 0), mac('g'^(~ekI.76*~ekR.77),
                                   sign(<'1', $I.87, $R.87, x.103^x.104, 'g'^~tid.87>, ~ltkR.89))) )
          case Resp_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekI.76*~ekR.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.142, 1)[!KU( f_.145, ~ekR.158 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.150, 1)[!KU( f_.153, ~ekI.157 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekI.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.90, 0), mac('g'^(~ekI.76*~ekR.77),
                                   sign(<'1', $I.87, $R.87, x.103^x.104, 'g'^~tid.87>, ~ltkR.89))) )
          case Resp_1
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekI.76*~ekR.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.142, 1)[!KU( f_.145, ~ekR.158 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.150, 1)[!KU( f_.153, ~ekI.157 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekI.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.90, 0), mac('g'^(~ekI.76*~ekR.77),
                                   sign(<'2', $I.87, $R.87, x.103^x.104, 'g'^~tid.87>, ~ltkI.89))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekI.76*~ekR.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.142, 1)[!KU( f_.145, ~ekR.158 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.150, 1)[!KU( f_.153, ~ekI.157 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekI.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.90, 0), mac('g'^(~ekI.76*~ekR.77),
                                   sign(<'2', $I.87, $R.87, x.103^x.104, 'g'^~tid.87>, ~ltkI.89))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekI.76*~ekR.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.142, 1)[!KU( f_.145, ~ekR.158 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.150, 1)[!KU( f_.153, ~ekI.157 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekI.76) )
          qed
        qed
      next
        case cKDF
        solve( (#vr.81, 0)[!KU( f_.83, 'g'^(~ekI.76*~ekR.77) )] /* may loop */ )
          case Init_1
          by solve( (#vr.112, 1)[!KU( f_.115, ~ekR.128 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.120, 1)[!KU( f_.123, ~ekI.127 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.88, 1), ~ekI.76) )
        qed
      qed
    next
      case cmac
      solve( KU((#vf.9, 0), sign(<'1', $I.8, $R.8, hkr.7, 'g'^~ekI.8>,
                                 ~ltkR.8)) )
        case Resp_1
        solve( (#vr.35, 0)[!KU( f_.38, 'g'^(~ekI.91*~ekR.92) )] /* may loop */ )
          case Init_1
          by solve( (#vr.121, 1)[!KU( f_.124, ~ekR.137 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.129, 1)[!KU( f_.132, ~ekI.136 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.97, 1), ~ekI.91) )
        qed
      next
        case csign
        by solve( (#vr.44, 1)[!KU( f_.48, ~ltkR.8 )] /* may loop */ )
      qed
    qed
  next
    case Register_pk_clone_case_2
    by contradiction // from formulas
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.8, pk(~ltkI.8) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.8, $R.8, ~ltkR.8, ~ekR.8, hki.6 )] )
    case Resp_1
    solve( KU((#vf.9, 0), mac(z.8,
                              sign(<'2', $I.8, $R.8, hki.6, 'g'^~ekR.8>, ~ltkI.8))) )
      case Init_2_case_1
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekR.85*~ekI.86))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.47, 0), mac('g'^(~ekR.85*~ekI.86),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.85, 'g'^~ekI.86>, ~ltkR.46))) )
          case Resp_1
          solve( KU((#vf.99, 0), mac('g'^(~ekR.85*~ekI.86),
                                     sign(<'1', $I.96, $R.96, 'g'^x.113, 'g'^~tid.96>, ~ltkR.98))) )
            case Resp_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case cmac
            solve( (#vr.161, 0)[!KU( f_.164, 'g'^(~ekR.85*~ekI.86)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.194, 1)[!KU( f_.197, ~ekR.209 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.202, 1)[!KU( f_.205, ~ekI.210 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.170, 1), ~ekR.85) )
            qed
          qed
        next
          case cmac
          solve( (#vr.118, 0)[!KU( f_.121, 'g'^(~ekR.85*~ekI.86)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.151, 1)[!KU( f_.154, ~ekR.166 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.159, 1)[!KU( f_.162, ~ekI.167 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.127, 1), ~ekR.85) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.47, 0), mac('g'^(~ekR.85*~ekI.86),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.85, 'g'^~ekI.86>, ~ltkR.46))) )
          case Resp_1
          solve( KU((#vf.99, 0), mac('g'^(~ekR.85*~ekI.86),
                                     sign(<'1', $I.96, $R.96, 'g'^x.113, 'g'^~tid.96>, ~ltkR.98))) )
            case Resp_1
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.161, 0)[!KU( f_.164, 'g'^(~ekR.85*~ekI.86)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.194, 1)[!KU( f_.197, ~ekR.209 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.202, 1)[!KU( f_.205, ~ekI.210 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.170, 1), ~ekR.85) )
            qed
          qed
        next
          case cmac
          solve( (#vr.118, 0)[!KU( f_.121, 'g'^(~ekR.85*~ekI.86)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.151, 1)[!KU( f_.154, ~ekR.166 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.159, 1)[!KU( f_.162, ~ekI.167 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.127, 1), ~ekR.85) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.47, 0), mac('g'^(~ekR.85*~ekI.86),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.85, 'g'^~ekI.86>, ~ltkR.46))) )
          case Resp_1
          solve( KU((#vf.99, 0), mac('g'^(~ekR.85*~ekI.86),
                                     sign(<'2', $I.96, $R.96, 'g'^x.113, 'g'^~tid.96>, ~ltkI.98))) )
            case Init_2_case_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.161, 0)[!KU( f_.164, 'g'^(~ekR.85*~ekI.86)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.194, 1)[!KU( f_.197, ~ekR.209 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.202, 1)[!KU( f_.205, ~ekI.210 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.170, 1), ~ekR.85) )
            qed
          qed
        next
          case cmac
          solve( (#vr.118, 0)[!KU( f_.121, 'g'^(~ekR.85*~ekI.86)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.151, 1)[!KU( f_.154, ~ekR.166 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.159, 1)[!KU( f_.162, ~ekI.167 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.127, 1), ~ekR.85) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.47, 0), mac('g'^(~ekR.85*~ekI.86),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.85, 'g'^~ekI.86>, ~ltkR.46))) )
          case Resp_1
          solve( KU((#vf.99, 0), mac('g'^(~ekR.85*~ekI.86),
                                     sign(<'2', $I.96, $R.96, 'g'^x.113, 'g'^~tid.96>, ~ltkI.98))) )
            case Init_2_case_1
            by solve( splitEqs(1) )
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.161, 0)[!KU( f_.164, 'g'^(~ekR.85*~ekI.86)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.194, 1)[!KU( f_.197, ~ekR.209 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.202, 1)[!KU( f_.205, ~ekI.210 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.170, 1), ~ekR.85) )
            qed
          qed
        next
          case cmac
          solve( (#vr.118, 0)[!KU( f_.121, 'g'^(~ekR.85*~ekI.86)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.151, 1)[!KU( f_.154, ~ekR.166 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.159, 1)[!KU( f_.162, ~ekI.167 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.127, 1), ~ekR.85) )
          qed
        qed
      next
        case cKDF
        solve( (#vr.90, 0)[!KU( f_.92, 'g'^(~ekR.85*~ekI.86) )] /* may loop */ )
          case Init_1
          by solve( (#vr.121, 1)[!KU( f_.124, ~ekR.136 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.129, 1)[!KU( f_.132, ~ekI.137 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.97, 1), ~ekR.85) )
        qed
      qed
    next
      case Init_2_case_2
      by contradiction // from formulas
    next
      case cmac
      solve( KU((#vf.9, 0), sign(<'2', $I.8, $R.8, hki.6, 'g'^~ekR.8>,
                                 ~ltkI.8)) )
        case Init_2_case_1
        solve( (#vr.38, 0)[!KU( f_.41, 'g'^(~ekR.100*~ekI.101)
                           )] /* may loop */ )
          case Init_1
          by solve( (#vr.130, 1)[!KU( f_.133, ~ekR.145 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.138, 1)[!KU( f_.141, ~ekI.146 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.106, 1), ~ekR.100) )
        qed
      next
        case Init_2_case_2
        by contradiction // from formulas
      next
        case csign
        by solve( (#vr.47, 1)[!KU( f_.51, ~ltkI.8 )] /* may loop */ )
      qed
    qed
  qed
next
  case Register_pk_clone_case_2
  by contradiction // from formulas
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/STS-MAC-fix2.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS-MAC-fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.765159s
  KI_Perfect_Forward_Secrecy_I (all-traces): verified (45 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): verified (66 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS-MAC-fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.765159s
  KI_Perfect_Forward_Secrecy_I (all-traces): verified (45 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): verified (66 steps)

==============================================================================
*/
