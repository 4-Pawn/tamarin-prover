theory NAXOS_broken_eCK_variant begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* The NAXOS Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^h(<~lkI, ~ekI>) ) ]->
   [
   Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(<~lkI, ~ekI>) ), !EphkI( ~ekI ),
   Out( 'g'^h(<~lkI, ~ekI>) )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y,
          h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
  )
  ]->
   [
   !SesskOfI( ~ekI,
              h(<Y^~lkI, 'g'^~lkR^h(<~lkI, ~ekI>), Y^h(<~lkI, ~ekI>), $I, $R>)
   )
   ]
  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.5, $R.6, ~lkI.1, hkI.7 ), In( Y.2 ),
     !Pk( $R.6, 'g'^~x.8 )
     ]
    --[
    SidI_2( ~ekI, $I.5, $R.6, hkI.7, Y.2,
            h(<x.3, 'g'^(~x.8*h(<~lkI.1, ~ekI>)), x.4, $I.5, $R.6>)
    )
    ]->
     [
     !SesskOfI( ~ekI, h(<x.3, 'g'^(~x.8*h(<~lkI.1, ~ekI>)), x.4, $I.5, $R.6>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = Y.38
        x.3   = Y.38^~lkI.37
        x.4   = Y.38^h(<~lkI.37, ~ekI.36>)
    
     2. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv(~lkI.37)
        x.3   = x.38
        x.4   = x.38^(h(<~lkI.37, ~ekI.36>)*inv(~lkI.37))
    
     3. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv(h(<~lkI.37, ~ekI.36>))
        x.3   = x.38^(~lkI.37*inv(h(<~lkI.37, ~ekI.36>)))
        x.4   = x.38
    
     4. ~ekI  = ~ekI.36
        ~lkI.1
              = ~lkI.37
        Y.2   = x.38^inv((~lkI.37*h(<~lkI.37, ~ekI.36>)))
        x.3   = x.38^inv(h(<~lkI.37, ~ekI.36>))
        x.4   = x.38^inv(~lkI.37)
    
     5. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^x.40
        x.3   = x.39^(~lkI.38*x.40)
        x.4   = x.39^(x.40*h(<~lkI.38, ~ekI.37>))
    
     6. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((~lkI.38*x.40))
        x.3   = x.39^inv(x.40)
        x.4   = x.39^(h(<~lkI.38, ~ekI.37>)*inv((~lkI.38*x.40)))
    
     7. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((~lkI.38*x.40*h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^inv((x.40*h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^inv((~lkI.38*x.40))
    
     8. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^inv((x.40*h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^(~lkI.38*inv((x.40*h(<~lkI.38, ~ekI.37>))))
        x.4   = x.39^inv(x.40)
    
     9. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv(~lkI.38))
        x.3   = x.39^x.40
        x.4   = x.39^(x.40*h(<~lkI.38, ~ekI.37>)*inv(~lkI.38))
    
    10. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.3   = x.39^(~lkI.38*x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^x.40
    
    11. ~ekI  = ~ekI.37
        ~lkI.1
              = ~lkI.38
        Y.2   = x.39^(x.40*inv((~lkI.38*h(<~lkI.38, ~ekI.37>))))
        x.3   = x.39^(x.40*inv(h(<~lkI.38, ~ekI.37>)))
        x.4   = x.39^(x.40*inv(~lkI.38))
    
    12. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((~lkI.39*x.42)))
        x.3   = x.40^(x.41*inv(x.42))
        x.4   = x.40^(x.41*h(<~lkI.39, ~ekI.38>)*inv((~lkI.39*x.42)))
    
    13. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((~lkI.39*x.42*h(<~lkI.39, ~ekI.38>))))
        x.3   = x.40^(x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.4   = x.40^(x.41*inv((~lkI.39*x.42)))
    
    14. ~ekI  = ~ekI.38
        ~lkI.1
              = ~lkI.39
        Y.2   = x.40^(x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.3   = x.40^(~lkI.39*x.41*inv((x.42*h(<~lkI.39, ~ekI.38>))))
        x.4   = x.40^(x.41*inv(x.42))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^h(<~lkR, ~ekR>),
          h(<'g'^~lkI^h(<~lkR, ~ekR>), X^~lkR, X^h(<~lkR, ~ekR>), $I, $R>)
  )
  ]->
   [
   Out( 'g'^h(<~lkR, ~ekR>) ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR,
              h(<'g'^~lkI^h(<~lkR, ~ekR>), X^~lkR, X^h(<~lkR, ~ekR>), $I, $R>)
   )
   ]
  /*
  rule (modulo AC) Resp_1:
     [ In( X.2 ), Fr( ~ekR ), !Ltk( $R.5, ~lkR.1 ), !Pk( $I.6, 'g'^~x.7 ) ]
    --[
    SidR_1( ~ekR, $I.6, $R.5, X.2, 'g'^h(<~lkR.1, ~ekR>),
            h(<'g'^(~x.7*h(<~lkR.1, ~ekR>)), x.3, x.4, $I.6, $R.5>)
    )
    ]->
     [
     Out( 'g'^h(<~lkR.1, ~ekR>) ), !EphkR( ~ekR ),
     !SesskOfR( ~ekR, h(<'g'^(~x.7*h(<~lkR.1, ~ekR>)), x.3, x.4, $I.6, $R.5>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekR  = ~ekR.42
        ~lkR.1
              = ~lkR.43
        X.2   = X.44
        x.3   = X.44^~lkR.43
        x.4   = X.44^h(<~lkR.43, ~ekR.42>)
    
     2. ~ekR  = ~ekR.42
        ~lkR.1
              = ~lkR.43
        X.2   = x.44^inv(~lkR.43)
        x.3   = x.44
        x.4   = x.44^(h(<~lkR.43, ~ekR.42>)*inv(~lkR.43))
    
     3. ~ekR  = ~ekR.42
        ~lkR.1
              = ~lkR.43
        X.2   = x.44^inv(h(<~lkR.43, ~ekR.42>))
        x.3   = x.44^(~lkR.43*inv(h(<~lkR.43, ~ekR.42>)))
        x.4   = x.44
    
     4. ~ekR  = ~ekR.42
        ~lkR.1
              = ~lkR.43
        X.2   = x.44^inv((~lkR.43*h(<~lkR.43, ~ekR.42>)))
        x.3   = x.44^inv(h(<~lkR.43, ~ekR.42>))
        x.4   = x.44^inv(~lkR.43)
    
     5. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^x.46
        x.3   = x.45^(~lkR.44*x.46)
        x.4   = x.45^(x.46*h(<~lkR.44, ~ekR.43>))
    
     6. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^inv((~lkR.44*x.46))
        x.3   = x.45^inv(x.46)
        x.4   = x.45^(h(<~lkR.44, ~ekR.43>)*inv((~lkR.44*x.46)))
    
     7. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^inv((~lkR.44*x.46*h(<~lkR.44, ~ekR.43>)))
        x.3   = x.45^inv((x.46*h(<~lkR.44, ~ekR.43>)))
        x.4   = x.45^inv((~lkR.44*x.46))
    
     8. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^inv((x.46*h(<~lkR.44, ~ekR.43>)))
        x.3   = x.45^(~lkR.44*inv((x.46*h(<~lkR.44, ~ekR.43>))))
        x.4   = x.45^inv(x.46)
    
     9. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^(x.46*inv(~lkR.44))
        x.3   = x.45^x.46
        x.4   = x.45^(x.46*h(<~lkR.44, ~ekR.43>)*inv(~lkR.44))
    
    10. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^(x.46*inv(h(<~lkR.44, ~ekR.43>)))
        x.3   = x.45^(~lkR.44*x.46*inv(h(<~lkR.44, ~ekR.43>)))
        x.4   = x.45^x.46
    
    11. ~ekR  = ~ekR.43
        ~lkR.1
              = ~lkR.44
        X.2   = x.45^(x.46*inv((~lkR.44*h(<~lkR.44, ~ekR.43>))))
        x.3   = x.45^(x.46*inv(h(<~lkR.44, ~ekR.43>)))
        x.4   = x.45^(x.46*inv(~lkR.44))
    
    12. ~ekR  = ~ekR.44
        ~lkR.1
              = ~lkR.45
        X.2   = x.46^(x.47*inv((~lkR.45*x.48)))
        x.3   = x.46^(x.47*inv(x.48))
        x.4   = x.46^(x.47*h(<~lkR.45, ~ekR.44>)*inv((~lkR.45*x.48)))
    
    13. ~ekR  = ~ekR.44
        ~lkR.1
              = ~lkR.45
        X.2   = x.46^(x.47*inv((~lkR.45*x.48*h(<~lkR.45, ~ekR.44>))))
        x.3   = x.46^(x.47*inv((x.48*h(<~lkR.45, ~ekR.44>))))
        x.4   = x.46^(x.47*inv((~lkR.45*x.48)))
    
    14. ~ekR  = ~ekR.44
        ~lkR.1
              = ~lkR.45
        X.2   = x.46^(x.47*inv((x.48*h(<~lkR.45, ~ekR.44>))))
        x.3   = x.46^(~lkR.45*x.47*inv((x.48*h(<~lkR.45, ~ekR.44>))))
        x.4   = x.46^(x.47*inv(x.48))
  */

rule (modulo E) Sessk_revealI:
   [ !SesskOfI( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealR:
   [ !SesskOfR( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealI:
   [ !EphkI( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealR:
   [ !EphkR( ~ekR ) ] --[ EphkRev( ~ekR ) ]-> [ Out( ~ekR ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 #i4.9.
             ((LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)) ==> (F))) &
          (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
         (All #i3.11 #i4.12 tpartner.13 kpartner.14.
           ((SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
            (SesskRev( tpartner.13 ) @ #i4.12)) ==>
           (F))) &
        (All #i3.15.
          (LtkRev( R.4 ) @ #i3.15) ==>
          (Ex #i4.16 tpartner.17 kpartner.18.
            SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15.
    (LtkRev( R.4 ) @ #i3.15)
   ==>
    Ex #i4.16 tpartner.17 kpartner.18.
     (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8 #i4.9.
     (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
    ==>
     F) &
   (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
   (All #i3.11 #i4.12 tpartner.13 kpartner.14.
     (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
     (SesskRev( tpartner.13 ) @ #i4.12)
    ==>
     F) &
   (All #i3.15.
     (LtkRev( R.4 ) @ #i3.15)
    ==>
     Ex #i4.16 tpartner.17 kpartner.18.
      (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)
     &
      T)) &
 (All #i1.19 #i2.20 ttest.21 I.22 R.23 k.24 hkI.25 hkR.26.
   (SidI_2( ttest.21, I.22, R.23, hkI.25, hkR.26, k.24 ) @ #i1.19) &
   (K( k.24 ) @ #i2.20)
  ==>
   (Last(#i2.20)) |
   (Last(#i1.19)) |
   (Ex #i3.27 #i4.28.
     (LtkRev( I.22 ) @ #i3.27) & (EphkRev( ttest.21 ) @ #i4.28)
    &
     (All. (Last(#i4.28)) ==> F) & (All. (Last(#i3.27)) ==> F)) |
   (Ex #i3.29.
     (SesskRev( ttest.21 ) @ #i3.29)
    &
     All. (Last(#i3.29)) ==> F) |
   (Ex #i3.30 #i4.31 tpartner.32 kpartner.33.
     (SidR_1( tpartner.32, I.22, R.23, hkI.25, hkR.26, kpartner.33
      ) @ #i3.30) &
     (SesskRev( tpartner.32 ) @ #i4.31)
    &
     (All. (Last(#i4.31)) ==> F) & (All. (Last(#i3.30)) ==> F)) |
   (Ex #i3.34.
     (LtkRev( R.23 ) @ #i3.34)
    &
     (All. (Last(#i3.34)) ==> F) &
     (All #i4.35 tpartner.36 kpartner.37.
       (SidR_1( tpartner.36, I.22, R.23, hkI.25, hkR.26, kpartner.37 ) @ #i4.35)
      ==>
       Last(#i4.35))))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.13, $R.14, ~lkI.9, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.14, 'g'^~x.16 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.19,
                           h(<x.11, 'g'^(~x.16*h(<~lkI.9, ~ekI.8>)), x.12, $I.13, $R.14>)
                      )] )
      case h
      solve( KU((#vr.44, 0), 'g'^(~x.16*h(<~lkI.9, ~ekI.8>))) )
        case Init_1
        solve( (#vr.59, 1)[!KU( f_.60, ~x.72 )] )
          case Ltk_reveal
          solve( (#i4.87, 2)[!Ltk( $R.14, ~lkR.91 )] )
            case generate_ltk
            solve( (#i4.87, 3)[!Pk( $I.13, 'g'^~x.97 )] )
              case generate_ltk
              solve( splitEqs(1) )
                case split_case_1
                solve( splitEqs(1) )
                  case split_case_1
                  solve( KU((#vr.44, 0), 'g'^(~lkI.129*h(<~lkR.131, ~ekR.130>))) )
                    case Resp_1
                    solve( (#vr.150, 1)[!KU( f_.151, ~lkI.165 )] )
                      case Ltk_reveal
                      solve( KU((#vr.44, 0), 'g'^(h(<~lkI.165, ~ekI.128>)*
                                                  h(<~lkR.167, ~ekR.166>))) )
                        case Init_1
                        solve( (#vr.197, 1)[!KU( f_.198, h(<~lkR.216, ~ekR.215>) )] )
                          case h
                          solve( KU((#vr.219, 0), ~ekR.215) )
                            case Ephk_revealR
                            solve( KU((#vr.219, 0), ~lkR.216) )
                              case Ltk_reveal
                              SOLVED (trace found)
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8. (SesskRev( ttest.2 ) @ #i3.8) ==> (F))) &
          (All #i3.9 #i4.10 tpartner.11 kpartner.12.
            ((SidI_2( tpartner.11, I.3, R.4, hkI.6, hkR.7, kpartner.12 ) @ #i3.9) &
             (SesskRev( tpartner.11 ) @ #i4.10)) ==>
            (F))) &
         (All #i4.13 #i5.14 #i6.15 tpartner.16.
           (((SidI_1( tpartner.16, I.3, R.4, hkI.6 ) @ #i4.13) &
             (LtkRev( I.3 ) @ #i5.14)) &
            (EphkRev( tpartner.16 ) @ #i6.15)) ==>
           (F))) &
        (All #i3.17.
          (LtkRev( I.3 ) @ #i3.17) ==>
          (Ex #i4.18 tpartner.19.
            SidI_1( tpartner.19, I.3, R.4, hkI.6 ) @ #i4.18)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (SesskRev( ttest.2 ) @ #i3.8) ==> F) &
  (All #i3.9 #i4.10 tpartner.11 kpartner.12.
    (SidI_2( tpartner.11, I.3, R.4, hkI.6, hkR.7, kpartner.12 ) @ #i3.9) &
    (SesskRev( tpartner.11 ) @ #i4.10)
   ==>
    F) &
  (All #i4.13 #i5.14 #i6.15 tpartner.16.
    (SidI_1( tpartner.16, I.3, R.4, hkI.6 ) @ #i4.13) &
    (LtkRev( I.3 ) @ #i5.14) &
    (EphkRev( tpartner.16 ) @ #i6.15)
   ==>
    F) &
  (All #i3.17.
    (LtkRev( I.3 ) @ #i3.17)
   ==>
    Ex #i4.18 tpartner.19.
     (SidI_1( tpartner.19, I.3, R.4, hkI.6 ) @ #i4.18)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8. (SesskRev( ttest.2 ) @ #i3.8) ==> F) &
   (All #i3.9 #i4.10 tpartner.11 kpartner.12.
     (SidI_2( tpartner.11, I.3, R.4, hkI.6, hkR.7, kpartner.12 ) @ #i3.9) &
     (SesskRev( tpartner.11 ) @ #i4.10)
    ==>
     F) &
   (All #i4.13 #i5.14 #i6.15 tpartner.16.
     (SidI_1( tpartner.16, I.3, R.4, hkI.6 ) @ #i4.13) &
     (LtkRev( I.3 ) @ #i5.14) &
     (EphkRev( tpartner.16 ) @ #i6.15)
    ==>
     F) &
   (All #i3.17.
     (LtkRev( I.3 ) @ #i3.17)
    ==>
     Ex #i4.18 tpartner.19.
      (SidI_1( tpartner.19, I.3, R.4, hkI.6 ) @ #i4.18)
     &
      T)) &
 (All #i1.20 #i2.21 ttest.22 I.23 R.24 k.25 hkI.26 hkR.27.
   (SidR_1( ttest.22, I.23, R.24, hkI.26, hkR.27, k.25 ) @ #i1.20) &
   (K( k.25 ) @ #i2.21)
  ==>
   (Last(#i2.21)) |
   (Last(#i1.20)) |
   (Ex #i3.28.
     (SesskRev( ttest.22 ) @ #i3.28)
    &
     All. (Last(#i3.28)) ==> F) |
   (Ex #i3.29 #i4.30 tpartner.31 kpartner.32.
     (SidI_2( tpartner.31, I.23, R.24, hkI.26, hkR.27, kpartner.32
      ) @ #i3.29) &
     (SesskRev( tpartner.31 ) @ #i4.30)
    &
     (All. (Last(#i4.30)) ==> F) & (All. (Last(#i3.29)) ==> F)) |
   (Ex #i4.33 #i5.34 #i6.35 tpartner.36.
     (SidI_1( tpartner.36, I.23, R.24, hkI.26 ) @ #i4.33) &
     (LtkRev( I.23 ) @ #i5.34) &
     (EphkRev( tpartner.36 ) @ #i6.35)
    &
     (All. (Last(#i6.35)) ==> F) &
     (All. (Last(#i5.34)) ==> F) &
     (All. (Last(#i4.33)) ==> F)) |
   (Ex #i3.37.
     (LtkRev( I.23 ) @ #i3.37)
    &
     (All. (Last(#i3.37)) ==> F) &
     (All #i4.38 tpartner.39.
       (SidI_1( tpartner.39, I.23, R.24, hkI.26 ) @ #i4.38)
      ==>
       Last(#i4.38))))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.13, ~lkR.9 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.14, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.19,
                           h(<'g'^(~x.15*h(<~lkR.9, ~ekR.8>)), x.11, x.12, $I.14, $R.13>)
                      )] )
      case h
      solve( KU((#vr.35, 0), 'g'^(~x.15*h(<~lkR.9, ~ekR.8>))) )
        case Resp_1
        solve( (#vr.56, 1)[!KU( f_.57, ~x.50 )] )
          case Ltk_reveal
          solve( (#i4.88, 1)[!Ltk( $I.14, ~lkI.92 )] )
            case generate_ltk
            solve( splitEqs(1) )
              case split_case_1
              solve( KU((#vr.35, 0), 'g'^(~lkR.106*h(<~lkI.108, ~ekI.107>))) )
                case Init_1
                solve( (#vr.121, 1)[!KU( f_.122, ~lkR.132 )] )
                  case Ltk_reveal
                  solve( KU((#vr.35, 0), 'g'^(h(<~lkR.132, ~ekR.105>)*
                                              h(<~lkI.134, ~ekI.133>))) )
                    case Init_1
                    solve( (#vr.164, 1)[!KU( f_.165, h(<~lkR.181, ~ekR.180>) )] )
                      case h
                      solve( KU((#vr.186, 0), ~ekR.180) )
                        case Ephk_revealR
                        SOLVED (trace found)
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/NAXOS_broken_eCK_variant.spthy

------------------------------------------------------------------------------
analyzed: data/examples/NAXOS_broken_eCK_variant.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 6.536123s
  eCK_initiator_key: attack found (17 steps)
  eCK_responder_key: attack found (14 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/NAXOS_broken_eCK_variant.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 6.536123s
  eCK_initiator_key: attack found (17 steps)
  eCK_responder_key: attack found (14 steps)

==============================================================================
*/
