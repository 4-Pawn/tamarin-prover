theory JKL_TS2_2004 begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* Jeong, Katz, Lee : TS2 (2004) *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !EphkI( ~ekI ), Out( 'g'^~ekI )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>) )
  ]->
   [ !SesskOfI( ~ekI, h(<hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>) ) ]
  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.3, $R.4, ~lkI.5, hkI.6 ), In( Y.1 ),
     !Pk( $R.4, 'g'^~x.7 )
     ]
    --[
    SidI_2( ~ekI, $I.3, $R.4, hkI.6, Y.1,
            h(<hkI.6, Y.1, x.2, 'g'^(~lkI.5*~x.7)>)
    )
    ]->
     [ !SesskOfI( ~ekI, h(<hkI.6, Y.1, x.2, 'g'^(~lkI.5*~x.7)>) ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.29
       Y.1   = Y.30
       x.2   = Y.30^~ekI.29
    
    2. ~ekI  = ~ekI.29
       Y.1   = x.31^inv(~ekI.29)
       x.2   = x.31
    
    3. ~ekI  = ~ekI.30
       Y.1   = x.32^x.33
       x.2   = x.32^(~ekI.30*x.33)
    
    4. ~ekI  = ~ekI.30
       Y.1   = x.32^inv((~ekI.30*x.33))
       x.2   = x.32^inv(x.33)
    
    5. ~ekI  = ~ekI.30
       Y.1   = x.32^(x.33*inv(~ekI.30))
       x.2   = x.32^x.33
    
    6. ~ekI  = ~ekI.31
       Y.1   = x.33^(x.34*inv((~ekI.31*x.35)))
       x.2   = x.33^(x.34*inv(x.35))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR,
          h(<X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>)
  )
  ]->
   [
   Out( 'g'^~ekR ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR, h(<X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>) )
   ]
  /*
  rule (modulo AC) Resp_1:
     [ In( X.1 ), Fr( ~ekR ), !Ltk( $R.3, ~lkR.4 ), !Pk( $I.5, 'g'^~x.6 ) ]
    --[
    SidR_1( ~ekR, $I.5, $R.3, X.1, 'g'^~ekR,
            h(<X.1, 'g'^~ekR, x.2, 'g'^(~lkR.4*~x.6)>)
    )
    ]->
     [
     Out( 'g'^~ekR ), !EphkR( ~ekR ),
     !SesskOfR( ~ekR, h(<X.1, 'g'^~ekR, x.2, 'g'^(~lkR.4*~x.6)>) )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.34
       X.1   = X.35
       x.2   = X.35^~ekR.34
    
    2. ~ekR  = ~ekR.34
       X.1   = x.36^inv(~ekR.34)
       x.2   = x.36
    
    3. ~ekR  = ~ekR.35
       X.1   = x.37^x.38
       x.2   = x.37^(~ekR.35*x.38)
    
    4. ~ekR  = ~ekR.35
       X.1   = x.37^inv((~ekR.35*x.38))
       x.2   = x.37^inv(x.38)
    
    5. ~ekR  = ~ekR.35
       X.1   = x.37^(x.38*inv(~ekR.35))
       x.2   = x.37^x.38
    
    6. ~ekR  = ~ekR.36
       X.1   = x.38^(x.39*inv((~ekR.36*x.40)))
       x.2   = x.38^(x.39*inv(x.40))
  */

rule (modulo E) Sessk_revealI:
   [ !SesskOfI( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealR:
   [ !SesskOfR( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealI:
   [ !EphkI( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealR:
   [ !EphkR( ~ekR ) ] --[ EphkRev( ~ekR ) ]-> [ Out( ~ekR ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) JKL2008_1_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> (F))) &
        (All #i3.13 #i4.14 tpartner.15 kpartner.16.
          ((SidR_1( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
           (SesskRev( tpartner.15 ) @ #i4.14)) ==>
          (F)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
  (All #i3.13 #i4.14 tpartner.15 kpartner.16.
    (SidR_1( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
    (SesskRev( tpartner.15 ) @ #i4.14)
   ==>
    F)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
   (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
   (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 kpartner.16.
     (SidR_1( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
     (SesskRev( tpartner.15 ) @ #i4.14)
    ==>
     F)) &
 (All #i1.17 #i2.18 ttest.19 I.20 R.21 k.22 hkI.23 hkR.24.
   (SidI_2( ttest.19, I.20, R.21, hkI.23, hkR.24, k.22 ) @ #i1.17) &
   (K( k.22 ) @ #i2.18)
  ==>
   (Last(#i2.18)) |
   (Last(#i1.17)) |
   (Ex #i3.25 t.26.
     (EphkRev( t.26 ) @ #i3.25)
    &
     All. (Last(#i3.25)) ==> F) |
   (Ex #i3.27 a.28. (LtkRev( a.28 ) @ #i3.27) & All. (Last(#i3.27)) ==> F) |
   (Ex #i3.29.
     (SesskRev( ttest.19 ) @ #i3.29)
    &
     All. (Last(#i3.29)) ==> F) |
   (Ex #i3.30 #i4.31 tpartner.32 kpartner.33.
     (SidR_1( tpartner.32, I.20, R.21, hkI.23, hkR.24, kpartner.33
      ) @ #i3.30) &
     (SesskRev( tpartner.32 ) @ #i4.31)
    &
     (All. (Last(#i4.31)) ==> F) & (All. (Last(#i3.30)) ==> F)))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.11, $R.12, ~lkI.13, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.12, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<'g'^~ekI.8, hkR.7, x.10, 'g'^(~lkI.13*~x.15)>)
                      )] )
      case Sessk_revealR_case_1
      solve( splitEqs(1) )
        case split
        solve( (#vf.16, 0)[!KU( f_.17, 'g'^~tid.75 )] )
          case Resp_1
          solve( (#vf.54, 0)[!KU( f_.55, 'g'^~ekI.74 )] )
            case Init_1
            SOLVED (trace found)
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) JKL2008_1_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> (F))) &
        (All #i3.13 #i4.14 tpartner.15 kpartner.16.
          ((SidI_2( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
           (SesskRev( tpartner.15 ) @ #i4.14)) ==>
          (F)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
  (All #i3.13 #i4.14 tpartner.15 kpartner.16.
    (SidI_2( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
    (SesskRev( tpartner.15 ) @ #i4.14)
   ==>
    F)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
   (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
   (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
   (All #i3.13 #i4.14 tpartner.15 kpartner.16.
     (SidI_2( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
     (SesskRev( tpartner.15 ) @ #i4.14)
    ==>
     F)) &
 (All #i1.17 #i2.18 ttest.19 I.20 R.21 k.22 hkI.23 hkR.24.
   (SidR_1( ttest.19, I.20, R.21, hkI.23, hkR.24, k.22 ) @ #i1.17) &
   (K( k.22 ) @ #i2.18)
  ==>
   (Last(#i2.18)) |
   (Last(#i1.17)) |
   (Ex #i3.25 t.26.
     (EphkRev( t.26 ) @ #i3.25)
    &
     All. (Last(#i3.25)) ==> F) |
   (Ex #i3.27 a.28. (LtkRev( a.28 ) @ #i3.27) & All. (Last(#i3.27)) ==> F) |
   (Ex #i3.29.
     (SesskRev( ttest.19 ) @ #i3.29)
    &
     All. (Last(#i3.29)) ==> F) |
   (Ex #i3.30 #i4.31 tpartner.32 kpartner.33.
     (SidI_2( tpartner.32, I.20, R.21, hkI.23, hkR.24, kpartner.33
      ) @ #i3.30) &
     (SesskRev( tpartner.32 ) @ #i4.31)
    &
     (All. (Last(#i4.31)) ==> F) & (All. (Last(#i3.30)) ==> F)))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.11, ~lkR.12 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.13, 'g'^~x.14 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18,
                           h(<hkI.6, 'g'^~ekR.8, x.10, 'g'^(~lkR.12*~x.14)>)
                      )] )
      case Sessk_revealI_case_1
      solve( splitEqs(1) )
        case split
        solve( (#vf.15, 0)[!KU( f_.16, 'g'^~tid.72 )] )
          case Init_1
          solve( (#vf.45, 0)[!KU( f_.46, 'g'^~ekR.71 )] )
            case Resp_1
            SOLVED (trace found)
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/JKL_TS2_2004.spthy

------------------------------------------------------------------------------
analyzed: data/examples/JKL_TS2_2004.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.532656s
  JKL2008_1_initiator_key: attack found (8 steps)
  JKL2008_1_responder_key: attack found (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/JKL_TS2_2004.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.532656s
  JKL2008_1_initiator_key: attack found (8 steps)
  JKL2008_1_responder_key: attack found (8 steps)

==============================================================================
*/
