theory UM_eCK begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* The Unified Model (UM) Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]->
   [ !Sessk( ~ekI, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI.3, $I.1, $R.2, ~lkI.4, hkI.7 ), In( Y.6 ),
     !Pk( $R.2, 'g'^~x.13 )
     ]
    --[
    SidI_2( ~ekI.3, $I.1, $R.2, hkI.7, Y.6, h(<z.9, 'g'^(~lkI.4*~x.13)>) )
    ]->
     [ !Sessk( ~ekI.3, h(<z.9, 'g'^(~lkI.4*~x.13)>) ) ]
  
    variants (modulo AC)
    1. ~ekI.3
             = ~ekI.369
       Y.6   = Y.372
       z.9   = Y.372^~ekI.369
    
    2. ~ekI.3
             = ~ekI.381
       Y.6   = z.387^inv(~ekI.381)
       z.9   = z.387
    
    3. ~ekI.3
             = ~ekI.21507
       Y.6   = x.43006^x.43007
       z.9   = x.43006^(~ekI.21507*x.43007)
    
    4. ~ekI.3
             = ~ekI.21955
       Y.6   = x.43902^inv((~ekI.21955*x.43903))
       z.9   = x.43902^inv(x.43903)
    
    5. ~ekI.3
             = ~ekI.21955
       Y.6   = x.43902^(x.43903*inv(~ekI.21955))
       z.9   = x.43902^x.43903
    
    6. ~ekI.3
             = ~ekI.22467
       Y.6   = x.44925^(x.44927*inv((~ekI.22467*x.44926)))
       z.9   = x.44925^(x.44927*inv(x.44926))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) ) ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X.6 ), Fr( ~ekR.3 ), !Ltk( $R.2, ~lkR.5 ), !Pk( $I.1, 'g'^~x.13 ) ]
    --[
    SidR_1( ~ekR.3, $I.1, $R.2, X.6, 'g'^~ekR.3, h(<z.9, 'g'^(~lkR.5*~x.13)>)
    )
    ]->
     [
     Out( 'g'^~ekR.3 ), !Ephk( ~ekR.3 ),
     !Sessk( ~ekR.3, h(<z.9, 'g'^(~lkR.5*~x.13)>) )
     ]
  
    variants (modulo AC)
    1. ~ekR.3
             = ~ekR.512
       X.6   = X.515
       z.9   = X.515^~ekR.512
    
    2. ~ekR.3
             = ~ekR.524
       X.6   = z.530^inv(~ekR.524)
       z.9   = z.530
    
    3. ~ekR.3
             = ~ekR.343872
       X.6   = x.687736^x.687737
       z.9   = x.687736^(~ekR.343872*x.687737)
    
    4. ~ekR.3
             = ~ekR.351040
       X.6   = x.702072^inv((~ekR.351040*x.702073))
       z.9   = x.702072^inv(x.702073)
    
    5. ~ekR.3
             = ~ekR.351040
       X.6   = x.702072^(x.702073*inv(~ekR.351040))
       z.9   = x.702072^x.702073
    
    6. ~ekR.3
             = ~ekR.359232
       X.6   = x.718455^(x.718457*inv((~ekR.359232*x.718456)))
       z.9   = x.718455^(x.718457*inv(x.718456))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 #i4.9.
              ((LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i4.15 #i5.16 #i6.17 tpartner.18 kpartner.19.
           (((SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i4.15) &
             (LtkRev( R.4 ) @ #i5.16)) &
            (EphkRev( tpartner.18 ) @ #i6.17)) ==>
           (F))) &
        (All #i3.20.
          (LtkRev( R.4 ) @ #i3.20) ==>
          (Ex #i4.21 tpartner.22 kpartner.23.
            SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i4.15 #i5.16 #i6.17 tpartner.18 kpartner.19.
    (SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i4.15) &
    (LtkRev( R.4 ) @ #i5.16) &
    (EphkRev( tpartner.18 ) @ #i6.17)
   ==>
    F) &
  (All #i3.20.
    (LtkRev( R.4 ) @ #i3.20)
   ==>
    Ex #i4.21 tpartner.22 kpartner.23.
     (SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)
    &
     T)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.11, $I.9, $R.10, ~lkI.12, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.10, 'g'^~x.21 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.24, h(<z.17, 'g'^(~lkI.12*~x.21)>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_3
          solve( (#vf.86, 0)[!KU( f_.87, hkR.116^(~ekI.117*inv(~tid.115))
                             )] /* may loop */ )
            case Init_1
            solve( KU((#vr.144, 1), ~tid.166) )
              case Ephk_reveal
              SOLVED
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 #i4.9.
              ((LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i4.15 #i5.16 #i6.17 tpartner.18.
           (((SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i4.15) &
             (LtkRev( I.3 ) @ #i5.16)) &
            (EphkRev( tpartner.18 ) @ #i6.17)) ==>
           (F))) &
        (All #i3.19.
          (LtkRev( I.3 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21.
            SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i4.15 #i5.16 #i6.17 tpartner.18.
    (SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i4.15) &
    (LtkRev( I.3 ) @ #i5.16) &
    (EphkRev( tpartner.18 ) @ #i6.17)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( I.3 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21.
     (SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)
    &
     T)"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.10, ~lkR.13 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.9, 'g'^~x.21 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.25, h(<z.17, 'g'^(~lkR.13*~x.21)>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_2
          solve( (#vf.75, 0)[!KU( f_.76, hkI.105^(~ekR.106*inv(~tid.104))
                             )] /* may loop */ )
            case Resp_1
            solve( KU((#vr.149, 1), ~tid.155) )
              case Ephk_reveal
              SOLVED
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end