theory SignedDH begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Signed Diffie-Hellman Protocol *}

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ] --> [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pk ) ] --> [ Out( pk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ LtkReveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  -->
   [
   Init_1( $I, $R, ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SessionKey( $I, $R, Y^~ekI ) ]->
   [ ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
     In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.9
       Y     = Y.10
       z     = Y.10^~ekI.9
    
    2. ~ekI  = ~ekI.10
       Y     = z.14^inv(~ekI.10)
       z     = z.14
    
    3. ~ekI  = ~ekI.11
       Y     = x.16^x.17
       z     = x.16^(~ekI.11*x.17)
    
    4. ~ekI  = ~ekI.11
       Y     = x.16^inv((~ekI.11*x.17))
       z     = x.16^inv(x.17)
    
    5. ~ekI  = ~ekI.11
       Y     = x.16^(x.17*inv(~ekI.11))
       z     = x.16^x.17
    
    6. ~ekI  = ~ekI.12
       Y     = x.17^(x.19*inv((~ekI.12*x.18)))
       z     = x.17^(x.19*inv(x.18))
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SessionKey( $I, $R, X^~ekR ) ]->
   [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
     In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.13
       X     = X.14
       z     = X.14^~ekR.13
    
    2. ~ekR  = ~ekR.19
       X     = z.26^inv(~ekR.19)
       z     = z.26
    
    3. ~ekR  = ~ekR.64
       X     = x.123^x.124
       z     = x.123^(~ekR.64*x.124)
    
    4. ~ekR  = ~ekR.64
       X     = x.123^inv((~ekR.64*x.124))
       z     = x.123^inv(x.124)
    
    5. ~ekR  = ~ekR.64
       X     = x.123^(x.124*inv(~ekR.64))
       z     = x.123^x.124
    
    6. ~ekR  = ~ekR.65
       X     = x.124^(x.126*inv((~ekR.65*x.125)))
       z     = x.124^(x.126*inv(x.125))
  */

lemma (modulo E) Perfect_Forward_Secrecy:
  all-traces
  "All I R.1 sessKey.2 #i.3 #k.4.
    ((SessionKey( I, R.1, sessKey.2 ) @ #i.3) & (K( sessKey.2 ) @ #k.4)) ==>
    ((Ex #r.5. (LtkReveal( I ) @ #r.5) & (#r.5 < #i.3)) |
     (Ex #r.6. (LtkReveal( R.1 ) @ #r.6) & (#r.6 < #i.3)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex I R.1 sessKey.2 #i.3 #k.4.
  (SessionKey( I, R.1, sessKey.2 ) @ #i.3) & (K( sessKey.2 ) @ #k.4)
 &
  (All #r.5. (LtkReveal( I ) @ #r.5) ==> All . (#r.5 < #i.3) ==> F) &
  (All #r.6. (LtkReveal( R.1 ) @ #r.6) ==> All . (#r.6 < #i.3) ==> F)"
*/
simplify
solve( SessionKey( I, R.1, sessKey.2 ) @ #i.3 )
  case Init_2
  solve( (#i.3, 0)[Init_1( $I.6, $R.6, ~ekI.6 )] )
    case Init_1
    solve( (#i.3, 1)[!Pk( $R.6, pk(ltkR.6) )] )
      case Register_pk
      solve( KU((#vf.7, 0), sign(<'2', $R.6, $I.6, Y.6>, ~ltk.23)) )
        case Resp
        solve( (#k.4, 0)[!KU( f_.5, 'g'^(~ekI.64*~ekR.65) )] /* may loop */ )
          case Init_1
          by solve( (#vr.97, 1)[!KU( f_.99, ~ekR.109 )] /* may loop */ )
        next
          case Resp
          by solve( (#vr.102, 1)[!KU( f_.104, ~ekI.108 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.70, 1), ~ekI.64) )
        qed
      next
        case csign
        solve( (#vr.29, 1)[!KU( f_.33, ~ltk.23 )] /* may loop */ )
          case Reveal_ltk
          by contradiction // cyclic
        qed
      qed
    qed
  qed
next
  case Resp
  solve( (#i.3, 0)[!Pk( $I.6, pk(ltkI.6) )] )
    case Register_pk
    solve( (#i.3, 1)[!Ltk( $R.6, ltkR.6 )] )
      case Register_pk
      solve( KU((#vf.7, 0), sign(<'1', $I.6, $R.6, X.6>, ~ltk.14)) )
        case Init_1
        solve( (#k.4, 0)[!KU( f_.5, 'g'^(~ekR.61*~ekI.62) )] /* may loop */ )
          case Init_1
          by solve( (#vr.94, 1)[!KU( f_.96, ~ekR.105 )] /* may loop */ )
        next
          case Resp
          by solve( (#vr.99, 1)[!KU( f_.101, ~ekI.106 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.67, 1), ~ekR.61) )
        qed
      next
        case csign
        solve( (#vr.26, 1)[!KU( f_.30, ~ltk.14 )] /* may loop */ )
          case Reveal_ltk
          by contradiction // cyclic
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/SignedDH_PFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/SignedDH_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.588937s
  Perfect_Forward_Secrecy (all-traces): verified (20 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/SignedDH_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.588937s
  Perfect_Forward_Secrecy (all-traces): verified (20 steps)

==============================================================================
*/
