theory SignedDH begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Signed Diffie-Hellman Protocol *}

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ] --> [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Get_pk:
   [ !Pk( A, pk ) ] --> [ Out( pk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ LtkReveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  -->
   [
   Init_1( $I, $R, ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SessionKey( $I, $R, Y^~ekI ) ]->
   [ ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ekI ), !Pk( $R, pk(ltkR) ),
     In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.20
       Y     = Y.21
       z     = Y.21^~ekI.20
    
    2. ~ekI  = ~ekI.22
       Y     = z.26^inv(~ekI.22)
       z     = z.26
    
    3. ~ekI  = ~ekI.23
       Y     = x.37^x.38
       z     = x.37^(~ekI.23*x.38)
    
    4. ~ekI  = ~ekI.23
       Y     = x.37^inv((~ekI.23*x.38))
       z     = x.37^inv(x.38)
    
    5. ~ekI  = ~ekI.23
       Y     = x.37^(x.38*inv(~ekI.23))
       z     = x.37^x.38
    
    6. ~ekI  = ~ekI.24
       Y     = x.38^(x.40*inv((~ekI.24*x.39)))
       z     = x.38^(x.40*inv(x.39))
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SessionKey( $I, $R, X^~ekR ) ]->
   [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
     In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
     ]
    --[ SessionKey( $I, $R, z ) ]->
     [ Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.117
       X     = X.118
       z     = X.118^~ekR.117
    
    2. ~ekR  = ~ekR.149
       X     = z.156^inv(~ekR.149)
       z     = z.156
    
    3. ~ekR  = ~ekR.1294
       X     = x.2580^x.2581
       z     = x.2580^(~ekR.1294*x.2581)
    
    4. ~ekR  = ~ekR.1294
       X     = x.2580^inv((~ekR.1294*x.2581))
       z     = x.2580^inv(x.2581)
    
    5. ~ekR  = ~ekR.1294
       X     = x.2580^(x.2581*inv(~ekR.1294))
       z     = x.2580^x.2581
    
    6. ~ekR  = ~ekR.1326
       X     = x.2643^(x.2645*inv((~ekR.1326*x.2644)))
       z     = x.2643^(x.2645*inv(x.2644))
  */

lemma (modulo E) Perfect_Forward_Secrecy:
  all-traces
  "All I R.1 sessKey.2 #i.3 #k.4.
    ((SessionKey( I, R.1, sessKey.2 ) @ #i.3) & (K( sessKey.2 ) @ #k.4)) ==>
    ((Ex #r.5. (LtkReveal( I ) @ #r.5) & (#r.5 < #i.3)) |
     (Ex #r.6. (LtkReveal( R.1 ) @ #r.6) & (#r.6 < #i.3)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex I R.1 sessKey.2 #i.3 #k.4.
  (SessionKey( I, R.1, sessKey.2 ) @ #i.3) & (K( sessKey.2 ) @ #k.4)
 &
  (All #r.5. (LtkReveal( I ) @ #r.5) ==> All . (#r.5 < #i.3) ==> F) &
  (All #r.6. (LtkReveal( R.1 ) @ #r.6) ==> All . (#r.6 < #i.3) ==> F)"
*/
simplify
solve( SessionKey( I, R.1, sessKey.2 ) @ #i.3 )
  case Init_2
  solve( (#i.3, 0)[Init_1( $I.6, $R.6, ~ekI.6 )] )
    case Init_1
    solve( (#i.3, 1)[!Pk( $R.6, pk(ltkR.6) )] )
      case Register_pk
      solve( KU((#vf.7, 0), sign(<'2', $R.6, $I.6, Y.6>, ~ltk.25)) )
        case Resp
        solve( (#k.4, 0)[!KU( f_.5, 'g'^(~ekI.69*~ekR.70) )] /* may loop */ )
          case Init_1
          by solve( (#vr.105, 1)[!KU( f_.108, ~ekR.118 )] /* may loop */ )
        next
          case Resp
          by solve( (#vr.110, 1)[!KU( f_.113, ~ekI.117 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.75, 1), ~ekI.69) )
        qed
      next
        case csign
        solve( (#vr.31, 1)[!KU( f_.35, ~ltk.25 )] /* may loop */ )
          case Reveal_ltk
          by contradiction // cyclic
        qed
      qed
    qed
  qed
next
  case Resp
  solve( (#i.3, 0)[!Pk( $I.6, pk(ltkI.6) )] )
    case Register_pk
    solve( (#i.3, 1)[!Ltk( $R.6, ltkR.6 )] )
      case Register_pk
      solve( KU((#vf.7, 0), sign(<'1', $I.6, $R.6, X.6>, ~ltk.15)) )
        case Init_1
        solve( (#k.4, 0)[!KU( f_.5, 'g'^(~ekR.66*~ekI.67) )] /* may loop */ )
          case Init_1
          by solve( (#vr.102, 1)[!KU( f_.105, ~ekR.114 )] /* may loop */ )
        next
          case Resp
          by solve( (#vr.107, 1)[!KU( f_.110, ~ekI.115 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.72, 1), ~ekR.66) )
        qed
      next
        case csign
        solve( (#vr.28, 1)[!KU( f_.32, ~ltk.15 )] /* may loop */ )
          case Reveal_ltk
          by contradiction // cyclic
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/SignedDH_PFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/SignedDH_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.59247s
  Perfect_Forward_Secrecy (all-traces): verified (20 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/SignedDH_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.59247s
  Perfect_Forward_Secrecy (all-traces): verified (20 steps)

==============================================================================
*/
