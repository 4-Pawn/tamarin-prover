theory NAXOS_eCK_PFS begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* NAXOS *}

rule (modulo E) generate_ltk:
   [ Fr( ~lkA ) ]
  -->
   [ !Ltk( $A, ~lkA ), !Pk( $A, 'g'^~lkA ), Out( 'g'^~lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^h(<'1', ~ekI, ~lkI>) ) ]->
   [
   Init_1( ~ekI, $I, $R, ~lkI, 'g'^h(<'1', ~ekI, ~lkI>) ), !Ephk( ~ekI ),
   Out( 'g'^h(<'1', ~ekI, ~lkI>) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y,
          h(<'2', Y^~lkI, 'g'^~lkR^h(<'1', ~ekI, ~lkI>), Y^h(<'1', ~ekI, ~lkI>), 
             $I, $R>)
  )
  ]->
   [
   !Sessk( ~ekI,
           h(<'2', Y^~lkI, 'g'^~lkR^h(<'1', ~ekI, ~lkI>), Y^h(<'1', ~ekI, ~lkI>), 
              $I, $R>)
   )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.5, $R.6, ~lkI.1, hkI.7 ), In( Y.2 ),
     !Pk( $R.6, 'g'^~x.8 )
     ]
    --[
    SidI_2( ~ekI, $I.5, $R.6, hkI.7, Y.2,
            h(<'2', x.3, 'g'^(~x.8*h(<'1', ~ekI, ~lkI.1>)), x.4, $I.5, $R.6>)
    )
    ]->
     [
     !Sessk( ~ekI,
             h(<'2', x.3, 'g'^(~x.8*h(<'1', ~ekI, ~lkI.1>)), x.4, $I.5, $R.6>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekI  = ~ekI.41
        ~lkI.1
              = ~lkI.42
        Y.2   = Y.43
        x.3   = Y.43^~lkI.42
        x.4   = Y.43^h(<'1', ~ekI.41, ~lkI.42>)
    
     2. ~ekI  = ~ekI.41
        ~lkI.1
              = ~lkI.42
        Y.2   = x.43^inv(~lkI.42)
        x.3   = x.43
        x.4   = x.43^(h(<'1', ~ekI.41, ~lkI.42>)*inv(~lkI.42))
    
     3. ~ekI  = ~ekI.41
        ~lkI.1
              = ~lkI.42
        Y.2   = x.43^inv(h(<'1', ~ekI.41, ~lkI.42>))
        x.3   = x.43^(~lkI.42*inv(h(<'1', ~ekI.41, ~lkI.42>)))
        x.4   = x.43
    
     4. ~ekI  = ~ekI.41
        ~lkI.1
              = ~lkI.42
        Y.2   = x.43^inv((~lkI.42*h(<'1', ~ekI.41, ~lkI.42>)))
        x.3   = x.43^inv(h(<'1', ~ekI.41, ~lkI.42>))
        x.4   = x.43^inv(~lkI.42)
    
     5. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^x.45
        x.3   = x.44^(~lkI.43*x.45)
        x.4   = x.44^(x.45*h(<'1', ~ekI.42, ~lkI.43>))
    
     6. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^inv((~lkI.43*x.45))
        x.3   = x.44^inv(x.45)
        x.4   = x.44^(h(<'1', ~ekI.42, ~lkI.43>)*inv((~lkI.43*x.45)))
    
     7. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^inv((~lkI.43*x.45*h(<'1', ~ekI.42, ~lkI.43>)))
        x.3   = x.44^inv((x.45*h(<'1', ~ekI.42, ~lkI.43>)))
        x.4   = x.44^inv((~lkI.43*x.45))
    
     8. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^inv((x.45*h(<'1', ~ekI.42, ~lkI.43>)))
        x.3   = x.44^(~lkI.43*inv((x.45*h(<'1', ~ekI.42, ~lkI.43>))))
        x.4   = x.44^inv(x.45)
    
     9. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^(x.45*inv(~lkI.43))
        x.3   = x.44^x.45
        x.4   = x.44^(x.45*h(<'1', ~ekI.42, ~lkI.43>)*inv(~lkI.43))
    
    10. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^(x.45*inv(h(<'1', ~ekI.42, ~lkI.43>)))
        x.3   = x.44^(~lkI.43*x.45*inv(h(<'1', ~ekI.42, ~lkI.43>)))
        x.4   = x.44^x.45
    
    11. ~ekI  = ~ekI.42
        ~lkI.1
              = ~lkI.43
        Y.2   = x.44^(x.45*inv((~lkI.43*h(<'1', ~ekI.42, ~lkI.43>))))
        x.3   = x.44^(x.45*inv(h(<'1', ~ekI.42, ~lkI.43>)))
        x.4   = x.44^(x.45*inv(~lkI.43))
    
    12. ~ekI  = ~ekI.43
        ~lkI.1
              = ~lkI.44
        Y.2   = x.45^(x.46*inv((~lkI.44*x.47)))
        x.3   = x.45^(x.46*inv(x.47))
        x.4   = x.45^(x.46*h(<'1', ~ekI.43, ~lkI.44>)*inv((~lkI.44*x.47)))
    
    13. ~ekI  = ~ekI.43
        ~lkI.1
              = ~lkI.44
        Y.2   = x.45^(x.46*inv((~lkI.44*x.47*h(<'1', ~ekI.43, ~lkI.44>))))
        x.3   = x.45^(x.46*inv((x.47*h(<'1', ~ekI.43, ~lkI.44>))))
        x.4   = x.45^(x.46*inv((~lkI.44*x.47)))
    
    14. ~ekI  = ~ekI.43
        ~lkI.1
              = ~lkI.44
        Y.2   = x.45^(x.46*inv((x.47*h(<'1', ~ekI.43, ~lkI.44>))))
        x.3   = x.45^(~lkI.44*x.46*inv((x.47*h(<'1', ~ekI.43, ~lkI.44>))))
        x.4   = x.45^(x.46*inv(x.47))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^h(<'1', ~ekR, ~lkR>),
          h(<'2', 'g'^~lkI^h(<'1', ~ekR, ~lkR>), X^~lkR, X^h(<'1', ~ekR, ~lkR>), 
             $I, $R>)
  )
  ]->
   [
   Out( 'g'^h(<'1', ~ekR, ~lkR>) ), !Ephk( ~ekR ),
   !Sessk( ~ekR,
           h(<'2', 'g'^~lkI^h(<'1', ~ekR, ~lkR>), X^~lkR, X^h(<'1', ~ekR, ~lkR>), 
              $I, $R>)
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X.2 ), Fr( ~ekR ), !Ltk( $R.5, ~lkR.1 ), !Pk( $I.6, 'g'^~x.7 ) ]
    --[
    SidR_1( ~ekR, $I.6, $R.5, X.2, 'g'^h(<'1', ~ekR, ~lkR.1>),
            h(<'2', 'g'^(~x.7*h(<'1', ~ekR, ~lkR.1>)), x.3, x.4, $I.6, $R.5>)
    )
    ]->
     [
     Out( 'g'^h(<'1', ~ekR, ~lkR.1>) ), !Ephk( ~ekR ),
     !Sessk( ~ekR,
             h(<'2', 'g'^(~x.7*h(<'1', ~ekR, ~lkR.1>)), x.3, x.4, $I.6, $R.5>)
     )
     ]
  
    variants (modulo AC)
     1. ~ekR  = ~ekR.50
        ~lkR.1
              = ~lkR.51
        X.2   = X.52
        x.3   = X.52^~lkR.51
        x.4   = X.52^h(<'1', ~ekR.50, ~lkR.51>)
    
     2. ~ekR  = ~ekR.50
        ~lkR.1
              = ~lkR.51
        X.2   = x.52^inv(~lkR.51)
        x.3   = x.52
        x.4   = x.52^(h(<'1', ~ekR.50, ~lkR.51>)*inv(~lkR.51))
    
     3. ~ekR  = ~ekR.50
        ~lkR.1
              = ~lkR.51
        X.2   = x.52^inv(h(<'1', ~ekR.50, ~lkR.51>))
        x.3   = x.52^(~lkR.51*inv(h(<'1', ~ekR.50, ~lkR.51>)))
        x.4   = x.52
    
     4. ~ekR  = ~ekR.50
        ~lkR.1
              = ~lkR.51
        X.2   = x.52^inv((~lkR.51*h(<'1', ~ekR.50, ~lkR.51>)))
        x.3   = x.52^inv(h(<'1', ~ekR.50, ~lkR.51>))
        x.4   = x.52^inv(~lkR.51)
    
     5. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^x.54
        x.3   = x.53^(~lkR.52*x.54)
        x.4   = x.53^(x.54*h(<'1', ~ekR.51, ~lkR.52>))
    
     6. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^inv((~lkR.52*x.54))
        x.3   = x.53^inv(x.54)
        x.4   = x.53^(h(<'1', ~ekR.51, ~lkR.52>)*inv((~lkR.52*x.54)))
    
     7. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^inv((~lkR.52*x.54*h(<'1', ~ekR.51, ~lkR.52>)))
        x.3   = x.53^inv((x.54*h(<'1', ~ekR.51, ~lkR.52>)))
        x.4   = x.53^inv((~lkR.52*x.54))
    
     8. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^inv((x.54*h(<'1', ~ekR.51, ~lkR.52>)))
        x.3   = x.53^(~lkR.52*inv((x.54*h(<'1', ~ekR.51, ~lkR.52>))))
        x.4   = x.53^inv(x.54)
    
     9. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^(x.54*inv(~lkR.52))
        x.3   = x.53^x.54
        x.4   = x.53^(x.54*h(<'1', ~ekR.51, ~lkR.52>)*inv(~lkR.52))
    
    10. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^(x.54*inv(h(<'1', ~ekR.51, ~lkR.52>)))
        x.3   = x.53^(~lkR.52*x.54*inv(h(<'1', ~ekR.51, ~lkR.52>)))
        x.4   = x.53^x.54
    
    11. ~ekR  = ~ekR.51
        ~lkR.1
              = ~lkR.52
        X.2   = x.53^(x.54*inv((~lkR.52*h(<'1', ~ekR.51, ~lkR.52>))))
        x.3   = x.53^(x.54*inv(h(<'1', ~ekR.51, ~lkR.52>)))
        x.4   = x.53^(x.54*inv(~lkR.52))
    
    12. ~ekR  = ~ekR.52
        ~lkR.1
              = ~lkR.53
        X.2   = x.54^(x.55*inv((~lkR.53*x.56)))
        x.3   = x.54^(x.55*inv(x.56))
        x.4   = x.54^(x.55*h(<'1', ~ekR.52, ~lkR.53>)*inv((~lkR.53*x.56)))
    
    13. ~ekR  = ~ekR.52
        ~lkR.1
              = ~lkR.53
        X.2   = x.54^(x.55*inv((~lkR.53*x.56*h(<'1', ~ekR.52, ~lkR.53>))))
        x.3   = x.54^(x.55*inv((x.56*h(<'1', ~ekR.52, ~lkR.53>))))
        x.4   = x.54^(x.55*inv((~lkR.53*x.56)))
    
    14. ~ekR  = ~ekR.52
        ~lkR.1
              = ~lkR.53
        X.2   = x.54^(x.55*inv((x.56*h(<'1', ~ekR.52, ~lkR.53>))))
        x.3   = x.54^(~lkR.53*x.55*inv((x.56*h(<'1', ~ekR.52, ~lkR.53>))))
        x.4   = x.54^(x.55*inv(x.56))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekA ) ] --[ EphkRev( ~ekA ) ]-> [ Out( ~ekA ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ekI.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ekI.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ekI.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ekI.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 ekR.13 kpartner.14.
                (SidR_1( ekR.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( ekR.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 ekR.18 kpartner.19.
               ((SidR_1( ekR.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
                (LtkRev( R.4 ) @ #i4.16)) &
               (EphkRev( ekR.18 ) @ #i5.17)))) &
        (All #i3.20.
          (LtkRev( R.4 ) @ #i3.20) ==>
          ((#i1 < #i3.20) |
           (Ex #i4.21 ekR.22 kpartner.23.
             SidR_1( ekR.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ekI.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ekI.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ekI.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ekI.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 ekR.13 kpartner.14.
    (SidR_1( ekR.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( ekR.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 ekR.18 kpartner.19.
    (SidR_1( ekR.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
    (LtkRev( R.4 ) @ #i4.16) &
    (EphkRev( ekR.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.20.
    (LtkRev( R.4 ) @ #i3.20)
   ==>
    (#i1 < #i3.20) |
    (Ex #i4.21 ekR.22 kpartner.23.
      (SidR_1( ekR.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)
     &
      T))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.13, $R.14, ~lkI.9, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.14, 'g'^~x.16 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.19,
                           h(<'2', x.11, 'g'^(~x.16*h(<'1', ~ekI.8, ~lkI.9>)), x.12, $I.13, $R.14>)
                      )] /* may loop */ )
      case h
      solve( KU((#vr.44, 0), 'g'^(~x.16*h(<'1', ~ekI.8, ~lkI.9>))) )
        case Init_1
        solve( (#vr.59, 1)[!KU( f_.60, ~x.72 )] /* may loop */ )
          case Ltk_reveal
          solve( Disj(#i1 < #vr.77) |
                     (Ex #i4.72 ekR.73 kpartner.74.
                       (SidR_1( ekR.73, $I.13, $R.14, 'g'^h(<'1', ~ekI.70, ~lkI.71>), hkR.7,
                                kpartner.74
                        ) @ #i4.72)
                      &
                       T) )
            case case_1
            solve( splitEqs(1) )
              case split_case_01
              solve( KU((#vr.44, 0), hkR.87^~lkI.89) )
                case exp
                solve( (#vr.93, 1)[!KU( f_.94, ~lkI.89 )] /* may loop */ )
                  case Ltk_reveal
                  solve( KU((#vr.44, 0), hkR.87^h(<'1', ~ekI.88, ~lkI.89>)) )
                    case Init_1
                    SOLVED (trace found)
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i1 #i2.1 ekR.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ekR.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ekR.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ekR.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 ekI.13 kpartner.14.
                (SidI_2( ekI.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( ekI.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 ekI.18.
               ((SidI_1( ekI.18, I.3, R.4, hkI.6 ) @ #i3.15) &
                (LtkRev( I.3 ) @ #i4.16)) &
               (EphkRev( ekI.18 ) @ #i5.17)))) &
        (All #i3.19.
          (LtkRev( I.3 ) @ #i3.19) ==>
          ((#i1 < #i3.19) |
           (Ex #i4.20 ekI.21. SidI_1( ekI.21, I.3, R.4, hkI.6 ) @ #i4.20))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ekR.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ekR.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ekR.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ekR.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 ekI.13 kpartner.14.
    (SidI_2( ekI.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( ekI.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 ekI.18.
    (SidI_1( ekI.18, I.3, R.4, hkI.6 ) @ #i3.15) &
    (LtkRev( I.3 ) @ #i4.16) &
    (EphkRev( ekI.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( I.3 ) @ #i3.19)
   ==>
    (#i1 < #i3.19) |
    (Ex #i4.20 ekI.21. (SidI_1( ekI.21, I.3, R.4, hkI.6 ) @ #i4.20) & T))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.13, ~lkR.9 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.14, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.19,
                           h(<'2', 'g'^(~x.15*h(<'1', ~ekR.8, ~lkR.9>)), x.11, x.12, $I.14, $R.13>)
                      )] /* may loop */ )
      case h
      solve( KU((#vr.35, 0), 'g'^(~x.15*h(<'1', ~ekR.8, ~lkR.9>))) )
        case Resp_1
        solve( (#vr.56, 1)[!KU( f_.57, ~x.50 )] /* may loop */ )
          case Ltk_reveal
          solve( Disj(#i1 < #vr.78) |
                     (Ex #i4.15 ekI.16.
                       (SidI_1( ekI.16, $I.14, $R.13, hkI.6 ) @ #i4.15)
                      &
                       T) )
            case case_1
            solve( splitEqs(1) )
              case split_case_01
              solve( KU((#vr.35, 0), hkI.88^~lkR.90) )
                case exp
                solve( (#vr.94, 1)[!KU( f_.95, ~lkR.90 )] /* may loop */ )
                  case Ltk_reveal
                  solve( KU((#vr.35, 0), hkI.88^h(<'1', ~ekR.89, ~lkR.90>)) )
                    case Resp_1
                    SOLVED (trace found)
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/NAXOS_eCK_PFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/NAXOS_eCK_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 7.21549s
  eCK_initiator_key: attack found (12 steps)
  eCK_responder_key: attack found (12 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/NAXOS_eCK_PFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 7.21549s
  eCK_initiator_key: attack found (12 steps)
  eCK_responder_key: attack found (12 steps)

==============================================================================
*/
