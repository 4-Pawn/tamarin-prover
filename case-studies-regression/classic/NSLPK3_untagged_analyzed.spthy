theory NSLPK3_untagged begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltkA ) ] --[ RevLtk( A ) ]-> [ Out( ltkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1:
   [ Fr( ~ni ), !Pk( $R, pkR ) ]
  --[ OUT_I_1( aenc(<~ni, $I>, pkR) ) ]->
   [ Out( aenc(<~ni, $I>, pkR) ), St_I_1( $I, $R, ~ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1:
   [
   !Ltk( $R, ltkR ), In( aenc(<ni, I>, pk(ltkR)) ), !Pk( I, pkI ), Fr( ~nr )
   ]
  --[
  IN_R_1_ni( ni, aenc(<ni, I>, pk(ltkR)) ),
  OUT_R_1( aenc(<ni, ~nr, $R>, pkI) )
  ]->
   [ Out( aenc(<ni, ~nr, $R>, pkI) ), St_R_1( $R, I, ni, ~nr ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2:
   [
   St_I_1( I, R, ni ), !Ltk( I, ltkI ), In( aenc(<ni, nr, R>, pk(ltkI)) ),
   !Pk( R, pkR )
   ]
  --[ IN_I_2_nr( nr, aenc(<ni, nr, R>, pk(ltkI)) ) ]->
   [ Out( aenc(nr, pkR) ), Secret( I, R, nr ), Secret( I, R, ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2:
   [ St_R_1( R, I, ni, nr ), !Ltk( R, ltkR ), In( aenc(nr, pk(ltkR)) ) ]
  -->
   [ Secret( R, I, nr ), Secret( R, I, ni ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Secrecy_claim:
   [ Secret( A, B, m ) ] --[ Secret( A, B, m ) ]-> [ ]

  /* has exactly the trivial AC variant */

lemma (modulo E) types [typing, reuse]:
  all-traces
  "(All ni m1.1 #i.2.
     (IN_R_1_ni( ni, m1.1 ) @ #i.2) ==>
     ((Ex f.3 #j.4. (!KU( f.3, ni ) @ #j.4) & (#j.4 < #i.2)) |
      (Ex #j.5. OUT_I_1( m1.1 ) @ #j.5))) &
   (All nr.6 m2.7 #i.8.
     (IN_I_2_nr( nr.6, m2.7 ) @ #i.8) ==>
     ((Ex f.9 #j.10. (!KU( f.9, nr.6 ) @ #j.10) & (#j.10 < #i.8)) |
      (Ex #j.11. OUT_R_1( m2.7 ) @ #j.11)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"(Ex ni m1.1 #i.2.
   (IN_R_1_ni( ni, m1.1 ) @ #i.2)
  &
   (All f.3 #j.4. (!KU( f.3, ni ) @ #j.4) ==> All . (#j.4 < #i.2) ==> F) &
   (All #j.5. (OUT_I_1( m1.1 ) @ #j.5) ==> F)) |
 (Ex nr.6 m2.7 #i.8.
   (IN_I_2_nr( nr.6, m2.7 ) @ #i.8)
  &
   (All f.9 #j.10.
     (!KU( f.9, nr.6 ) @ #j.10)
    ==>
     All . (#j.10 < #i.8) ==> F) &
   (All #j.11. (OUT_R_1( m2.7 ) @ #j.11) ==> F))"
*/
induction
  case induction
  simplify
  solve( Disj(Ex ni m1.1 #i.2.
               (IN_R_1_ni( ni, m1.1 ) @ #i.2)
              &
               (All f.3 #j.4. (!KU( f.3, ni ) @ #j.4) ==> All . (#j.4 < #i.2) ==> F) &
               (All #j.5. (OUT_I_1( m1.1 ) @ #j.5) ==> F)) |
             (Ex nr m2.1 #i.2.
               (IN_I_2_nr( nr, m2.1 ) @ #i.2)
              &
               (All f.3 #j.4. (!KU( f.3, nr ) @ #j.4) ==> All . (#j.4 < #i.2) ==> F) &
               (All #j.5. (OUT_R_1( m2.1 ) @ #j.5) ==> F)) )
    case case_1
    solve( Disj(Last(#i)) |
               (Ex f.1 #j.2.
                 (!KU( f.1, ni ) @ #j.2)
                &
                 (All . (Last(#j.2)) ==> F) & (#j.2 < #i)) |
               (Ex #j.1.
                 (OUT_I_1( aenc(<ni, I>, pk(ltkR)) ) @ #j.1)
                &
                 All . (Last(#j.1)) ==> F) )
      case case_1
      solve( (#i, 0)[!Ltk( $R, ltkR )] )
        case Register_pk
        solve( (#i, 2)[!Pk( I, pkI )] )
          case Register_pk
          solve( !KU( f_, aenc(<ni, $A>, pk(~ltkA)) ) @ #vk )
            case I_1
            by contradiction // from formulas
          next
            case I_2_case_1
            solve( Disj(Ex f.3 #j.4.
                         (!KU( f.3, <ni, $A> ) @ #j.4)
                        &
                         (All . (Last(#j.4)) ==> F) & (#j.4 < #vr.2)) |
                       (Ex #j.3.
                         (OUT_R_1( aenc(<~ni.1, <ni, $A>, $R>, pk(~ltkA.2)) ) @ #j.3)
                        &
                         All . (Last(#j.3)) ==> F) )
              case case_1
              by contradiction // from formulas
            qed
          next
            case I_2_case_2
            solve( Disj(Ex f.3 #j.4.
                         (!KU( f.3, nr.1 ) @ #j.4)
                        &
                         (All . (Last(#j.4)) ==> F) & (#j.4 < #vr.2)) |
                       (Ex #j.4.
                         (OUT_R_1( aenc(<~ni.1, nr.1, $R.1>, pk(~ltkA.3)) ) @ #j.4)
                        &
                         All . (Last(#j.4)) ==> F) )
              case case_1
              by contradiction // cyclic
            next
              case case_2
              by solve( (#vr.3, 0) ~~> (#vk, 0) )
            qed
          next
            case R_1
            solve( Disj(Ex f.3 #j.4.
                         (!KU( f.3, ni.1 ) @ #j.4)
                        &
                         (All . (Last(#j.4)) ==> F) & (#j.4 < #vr.2)) |
                       (Ex #j.4.
                         (OUT_I_1( aenc(<ni.1, $A.1>, pk(~ltkA.3)) ) @ #j.4)
                        &
                         All . (Last(#j.4)) ==> F) )
              case case_1
              by contradiction // cyclic
            next
              case case_2
              by solve( (#vr.4, 0) ~~> (#vk, 0) )
            qed
          next
            case caenc
            by contradiction // from formulas
          qed
        qed
      qed
    next
      case case_2
      by contradiction // from formulas
    next
      case case_3
      by contradiction // from formulas
    qed
  next
    case case_2
    solve( Disj(Last(#i)) |
               (Ex f.1 #j.2.
                 (!KU( f.1, nr ) @ #j.2)
                &
                 (All . (Last(#j.2)) ==> F) & (#j.2 < #i)) |
               (Ex #j.1.
                 (OUT_R_1( aenc(<ni, nr, R>, pk(ltkI)) ) @ #j.1)
                &
                 All . (Last(#j.1)) ==> F) )
      case case_1
      solve( (#i, 0)[St_I_1( I, R, ni )] )
        case I_1
        solve( (#i, 1)[!Ltk( $I, ltkI )] )
          case Register_pk
          solve( (#i, 3)[!Pk( $R, pkR )] )
            case Register_pk
            solve( !KU( f_, aenc(<~ni, nr, $R>, pk(~ltkA)) ) @ #vk )
              case I_2_case_1
              solve( Disj(Ex f.5 #j.6.
                           (!KU( f.5, <~ni, nr, $R> ) @ #j.6)
                          &
                           (All . (Last(#j.6)) ==> F) & (#j.6 < #vr.4)) |
                         (Ex #j.4.
                           (OUT_R_1( aenc(<~ni.1, <~ni, nr, $R>, $I>, pk(~ltkA.3)) ) @ #j.4)
                          &
                           All . (Last(#j.4)) ==> F) )
                case case_1
                by contradiction // from formulas
              qed
            next
              case I_2_case_2
              solve( Disj(Ex f.5 #j.6.
                           (!KU( f.5, nr.1 ) @ #j.6)
                          &
                           (All . (Last(#j.6)) ==> F) & (#j.6 < #vr.4)) |
                         (Ex #j.5.
                           (OUT_R_1( aenc(<~ni.1, nr.1, $R.1>, pk(~ltkA.4)) ) @ #j.5)
                          &
                           All . (Last(#j.5)) ==> F) )
                case case_1
                by contradiction // cyclic
              next
                case case_2
                by solve( (#vr.5, 0) ~~> (#vk, 0) )
              qed
            next
              case R_1_case_1
              by contradiction // from formulas
            next
              case R_1_case_2
              solve( Disj(Ex f.5 #j.6.
                           (!KU( f.5, ni.1 ) @ #j.6)
                          &
                           (All . (Last(#j.6)) ==> F) & (#j.6 < #vr.4)) |
                         (Ex #j.5.
                           (OUT_I_1( aenc(<ni.1, $A>, pk(~ltkA.4)) ) @ #j.5)
                          &
                           All . (Last(#j.5)) ==> F) )
                case case_1
                by contradiction // cyclic
              next
                case case_2
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              qed
            next
              case caenc
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction // from formulas
    next
      case case_3
      by contradiction // from formulas
    qed
  qed
qed

lemma (modulo E) nonce_secrecy:
  all-traces
  "not(Ex A B.1 s.2 #i.3.
        (((Secret( A, B.1, s.2 ) @ #i.3) & (Ex #j.4. K( s.2 ) @ #j.4)) &
         (not(Ex #r.5. RevLtk( A ) @ #r.5))) &
        (not(Ex #r.6. RevLtk( B.1 ) @ #r.6)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex A B.1 s.2 #i.3.
  (Secret( A, B.1, s.2 ) @ #i.3)
 &
  (Ex #j.4. (K( s.2 ) @ #j.4) & T) &
  (All #r.5. (RevLtk( A ) @ #r.5) ==> F) &
  (All #r.6. (RevLtk( B.1 ) @ #r.6) ==> F)"
*/
simplify
solve( (#i, 0)[Secret( A, B, s )] )
  case I_2_case_1
  solve( Disj(Ex f.1 #j.2. (!KU( f.1, s ) @ #j.2) & #j.2 < #vr) |
             (Ex #j.1. (OUT_R_1( aenc(<~ni, s, $R>, pk(~ltkA)) ) @ #j.1) & T) )
    case case_1
    solve( !KU( f_.1, aenc(<~ni, s, $R>, pk(~ltkA)) ) @ #vk.1 )
      case I_2
      solve( Disj(Ex f.6 #j.7.
                   (!KU( f.6, <~ni, s, $R> ) @ #j.7)
                  &
                   #j.7 < #vr.5) |
                 (Ex #j.4.
                   (OUT_R_1( aenc(<~ni.1, <~ni, s, $R>, $I>, pk(~ltkA.3)) ) @ #j.4)
                  &
                   T) )
        case case_1
        solve( !KU( f_.2, ~ni ) @ #vk.4 )
          case I_1
          solve( !KU( f_.2, ~ltkA.2 ) @ #vk.6 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        next
          case R_1
          solve( Disj(Ex f.10 #j.11. (!KU( f.10, ~ni ) @ #j.11) & #j.11 < #vr.9) |
                     (Ex #j.3. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.2)) ) @ #j.3) & T) )
            case case_1
            by contradiction // cyclic
          next
            case case_2
            solve( !KU( f_.3, ~ltkA.2 ) @ #vk.7 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    next
      case R_1
      solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~ni ) @ #j.7) & #j.7 < #vr.5) |
                 (Ex #j.4. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.3)) ) @ #j.4) & T) )
        case case_1
        solve( !KU( f_, ~nr ) @ #vk.1 )
          case I_2
          by contradiction // cyclic
        next
          case R_1
          solve( !KU( f, ~ni ) @ #j.1 )
            case I_1
            solve( !KU( f_.1, ~ltkA ) @ #vk.3 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          next
            case R_1
            solve( Disj(Ex f.11 #j.12. (!KU( f.11, ~ni ) @ #j.12) & #j.12 < #vr.10) |
                       (Ex #j.3. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.2)) ) @ #j.3) & T) )
              case case_1
              by contradiction // cyclic
            next
              case case_2
              solve( !KU( f_.1, ~ltkA ) @ #vk.3 )
                case Reveal_ltk
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( !KU( f_, ~nr ) @ #vk.1 )
          case I_2
          by contradiction // cyclic
        next
          case R_1
          solve( !KU( f_.1, ~ltkA ) @ #vk.3 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      qed
    next
      case caenc
      solve( !KU( f_.3, ~ni ) @ #vk.5 )
        case I_1
        solve( !KU( f_.3, ~ltkA.2 ) @ #vk.7 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      next
        case R_1
        solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~ni ) @ #j.7) & #j.7 < #vr.5) |
                   (Ex #j.3. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.2)) ) @ #j.3) & T) )
          case case_1
          by contradiction // cyclic
        next
          case case_2
          solve( !KU( f_.4, ~ltkA.1 ) @ #vk.8 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Disj(Ex f.2 #j.3. (!KU( f.2, ~ni ) @ #j.3) & #j.3 < #j.1) |
               (Ex #j.2. (OUT_I_1( aenc(<~ni, I.1>, pk(ltkR)) ) @ #j.2) & T) )
      case case_1
      solve( (#j.1, 0)[!Ltk( $R, ltkR )] )
        case Register_pk
        solve( (#j.1, 2)[!Pk( I.1, pk(~ltkA) )] )
          case Register_pk
          solve( !KU( f_, ~nr ) @ #vk )
            case I_2
            solve( !KU( f, ~ni ) @ #j.2 )
              case I_1
              solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
                case Reveal_ltk
                by contradiction // from formulas
              qed
            next
              case R_1
              solve( Disj(Ex f.8 #j.9. (!KU( f.8, ~ni ) @ #j.9) & #j.9 < #vr.7) |
                         (Ex #j.4. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.3)) ) @ #j.4) & T) )
                case case_1
                by contradiction // cyclic
              next
                case case_2
                solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
                  case Reveal_ltk
                  by contradiction // from formulas
                qed
              qed
            qed
          next
            case R_1
            solve( !KU( f, ~ni ) @ #j.2 )
              case I_1
              solve( !KU( f_.2, ~ltkA ) @ #vk.3 )
                case Reveal_ltk
                by contradiction // from formulas
              qed
            next
              case R_1
              solve( Disj(Ex f.10 #j.11. (!KU( f.10, ~ni ) @ #j.11) & #j.11 < #vr.9) |
                         (Ex #j.4. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.3)) ) @ #j.4) & T) )
                case case_1
                by contradiction // cyclic
              next
                case case_2
                solve( !KU( f_.2, ~ltkA ) @ #vk.3 )
                  case Reveal_ltk
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (#j.1, 0)[!Ltk( $R, ~ltkA.2 )] )
        case Register_pk
        solve( (#j.1, 2)[!Pk( $I, pk(~ltkA) )] )
          case Register_pk
          solve( !KU( f_, ~nr ) @ #vk )
            case I_2
            solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          next
            case R_1
            solve( !KU( f_.2, ~ltkA ) @ #vk.3 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    qed
  qed
next
  case I_2_case_2
  solve( Disj(Ex f.1 #j.2. (!KU( f.1, nr ) @ #j.2) & #j.2 < #vr) |
             (Ex #j.1. (OUT_R_1( aenc(<~ni, nr, $R>, pk(~ltkA)) ) @ #j.1) & T) )
    case case_1
    solve( !KU( f_, ~ni ) @ #vk )
      case I_1
      solve( !KU( f_.1, ~ltkA.2 ) @ #vk.2 )
        case Reveal_ltk
        by contradiction // from formulas
      qed
    next
      case R_1
      solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~ni ) @ #j.7) & #j.7 < #vr.5) |
                 (Ex #j.3. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.2)) ) @ #j.3) & T) )
        case case_1
        by contradiction // cyclic
      next
        case case_2
        solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      qed
    qed
  next
    case case_2
    solve( Disj(Ex f.2 #j.3. (!KU( f.2, ~ni ) @ #j.3) & #j.3 < #j.1) |
               (Ex #j.2. (OUT_I_1( aenc(<~ni, I.1>, pk(ltkR)) ) @ #j.2) & T) )
      case case_1
      solve( (#j.1, 0)[!Ltk( $R, ltkR )] )
        case Register_pk
        solve( (#j.1, 2)[!Pk( I.1, pk(~ltkA) )] )
          case Register_pk
          solve( !KU( f_, ~ni ) @ #vk )
            case I_1
            solve( !KU( f_.2, ~ltkA.3 ) @ #vk.3 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          next
            case R_1
            solve( Disj(Ex f.7 #j.8. (!KU( f.7, ~ni ) @ #j.8) & #j.8 < #vr.6) |
                       (Ex #j.4. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.3)) ) @ #j.4) & T) )
              case case_1
              by contradiction // cyclic
            next
              case case_2
              solve( !KU( f_.2, ~ltkA.1 ) @ #vk.4 )
                case Reveal_ltk
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (#j.1, 0)[!Ltk( $R, ~ltkA.2 )] )
        case Register_pk
        solve( (#j.1, 2)[!Pk( $I, pk(~ltkA) )] )
          case Register_pk
          solve( !KU( f_, ~ni ) @ #vk )
            case I_1
            solve( !KU( f_.2, ~ltkA.2 ) @ #vk.3 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          next
            case R_1
            solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~ni ) @ #j.7) & #j.7 < #vr.5) |
                       (Ex #j.3. (OUT_I_1( aenc(<~ni, $I>, pk(~ltkA.2)) ) @ #j.3) & T) )
              case case_1
              by contradiction // cyclic
            next
              case case_2
              solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
                case Reveal_ltk
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case R_2_case_1
  solve( Disj(Ex f.2 #j.3. (!KU( f.2, ni ) @ #j.3) & #j.3 < #vr.1) |
             (Ex #j.2. (OUT_I_1( aenc(<ni, $A>, pk(~ltkA.1)) ) @ #j.2) & T) )
    case case_1
    solve( !KU( f_, ~nr ) @ #vk )
      case I_2
      solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~nr ) @ #j.7) & #j.7 < #vr.5) |
                 (Ex #j.3. (OUT_R_1( aenc(<~ni, ~nr, $R>, pk(~ltkA.2)) ) @ #j.3) & T) )
        case case_1
        by contradiction // cyclic
      next
        case case_2
        solve( !KU( f_.3, ~ltkA.1 ) @ #vk.4 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      qed
    next
      case R_1
      solve( !KU( f_.2, ~ltkA.2 ) @ #vk.3 )
        case Reveal_ltk
        by contradiction // from formulas
      qed
    qed
  next
    case case_2
    solve( (#j.1, 1)[!Pk( $R.1, pk(~ltkA.1) )] )
      case Register_pk
      solve( !KU( f_, ~nr ) @ #vk )
        case I_2
        solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~nr ) @ #j.7) & #j.7 < #vr.5) |
                   (Ex #j.3. (OUT_R_1( aenc(<~ni, ~nr, $R>, pk(~ltkA.2)) ) @ #j.3) & T) )
          case case_1
          by contradiction // cyclic
        next
          case case_2
          solve( !KU( f_.2, ~ltkA.1 ) @ #vk.4 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      next
        case R_1
        solve( !KU( f_.2, ~ltkA.2 ) @ #vk.3 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      qed
    qed
  qed
next
  case R_2_case_2
  solve( Disj(Ex f.2 #j.3. (!KU( f.2, s ) @ #j.3) & #j.3 < #vr.1) |
             (Ex #j.2. (OUT_I_1( aenc(<s, $A>, pk(~ltkA.1)) ) @ #j.2) & T) )
    case case_1
    solve( !KU( f_.1, aenc(~nr, pk(~ltkA)) ) @ #vk.1 )
      case I_2
      solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~nr ) @ #j.7) & #j.7 < #vr.5) |
                 (Ex #j.4. (OUT_R_1( aenc(<~ni, ~nr, $R>, pk(~ltkA.3)) ) @ #j.4) & T) )
        case case_1
        solve( !KU( f, ~nr ) @ #j.1 )
          case I_2
          solve( Disj(Ex f.10 #j.11. (!KU( f.10, ~nr ) @ #j.11) & #j.11 < #vr.9) |
                     (Ex #j.3. (OUT_R_1( aenc(<~ni, ~nr, $R>, pk(~ltkA.2)) ) @ #j.3) & T) )
            case case_1
            by contradiction // cyclic
          next
            case case_2
            solve( !KU( f_.4, ~ltkA.2 ) @ #vk.5 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          qed
        next
          case R_1
          solve( !KU( f_.3, ~ltkA.2 ) @ #vk.4 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      next
        case case_2
        solve( !KU( f_, ~ni ) @ #vk.1 )
          case I_1
          solve( !KU( f_.2, ~ltkA.3 ) @ #vk.4 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        next
          case R_1
          solve( Disj(Ex f.9 #j.10. (!KU( f.9, ~ni ) @ #j.10) & #j.10 < #vr.8) |
                     (Ex #j.4. (OUT_I_1( aenc(<~ni, $A>, pk(~ltkA.3)) ) @ #j.4) & T) )
            case case_1
            by contradiction // cyclic
          next
            case case_2
            solve( !KU( f_.3, ~ltkA.2 ) @ #vk.5 )
              case Reveal_ltk
              by contradiction // from formulas
            qed
          qed
        qed
      qed
    next
      case caenc
      solve( !KU( f_.2, ~nr ) @ #vk.3 )
        case I_2
        solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~nr ) @ #j.7) & #j.7 < #vr.5) |
                   (Ex #j.3. (OUT_R_1( aenc(<~ni, ~nr, $R>, pk(~ltkA.2)) ) @ #j.3) & T) )
          case case_1
          by contradiction // cyclic
        next
          case case_2
          solve( !KU( f_.4, ~ltkA.1 ) @ #vk.6 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      next
        case R_1
        solve( !KU( f_.3, ~ltkA.2 ) @ #vk.5 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      qed
    qed
  next
    case case_2
    solve( (#j.1, 1)[!Pk( $R.1, pk(~ltkA.1) )] )
      case Register_pk
      solve( !KU( f_, ~ni ) @ #vk )
        case I_1
        solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
          case Reveal_ltk
          by contradiction // from formulas
        qed
      next
        case R_1
        solve( Disj(Ex f.6 #j.7. (!KU( f.6, ~ni ) @ #j.7) & #j.7 < #vr.5) |
                   (Ex #j.2. (OUT_I_1( aenc(<~ni, $A>, pk(~ltkA.1)) ) @ #j.2) & T) )
          case case_1
          by contradiction // cyclic
        next
          case case_2
          solve( !KU( f_.2, ~ltkA.1 ) @ #vk.3 )
            case Reveal_ltk
            by contradiction // from formulas
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) session_key_setup_possible:
  exists-trace
  "Ex A B.1 s.2 #i.3.
    ((Secret( A, B.1, s.2 ) @ #i.3) & (not(Ex #r.4. RevLtk( A ) @ #r.4))) &
    (not(Ex #r.5. RevLtk( B.1 ) @ #r.5))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all satisfying traces:
"Ex A B.1 s.2 #i.3.
  (Secret( A, B.1, s.2 ) @ #i.3)
 &
  (All #r.4. (RevLtk( A ) @ #r.4) ==> F) &
  (All #r.5. (RevLtk( B.1 ) @ #r.5) ==> F)"
*/
simplify
solve( (#i, 0)[Secret( A, B, s )] )
  case I_2_case_1
  solve( Disj(Ex f.1 #j.2. (!KU( f.1, s ) @ #j.2) & #j.2 < #vr) |
             (Ex #j.1. (OUT_R_1( aenc(<~ni, s, $R>, pk(~ltkA)) ) @ #j.1) & T) )
    case case_2
    solve( Disj(Ex f.1 #j.2. (!KU( f.1, ~ni ) @ #j.2) & #j.2 < #j) |
               (Ex #j.2. (OUT_I_1( aenc(<~ni, I.1>, pk(ltkR)) ) @ #j.2) & T) )
      case case_2
      solve( (#j, 0)[!Ltk( $R, ~ltkA )] )
        case Register_pk
        solve( (#j, 2)[!Pk( $I, pk(~ltkA.1) )] )
          case Register_pk
          solve( !KU( f_, aenc(<~ni, ~nr, $R>, pk(~ltkA.1)) ) @ #vk )
            case R_1
            solve( !KU( f_, aenc(<~ni, $I>, pk(~ltkA)) ) @ #vk.1 )
              case I_1
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/classic/NSLPK3_untagged.spthy

------------------------------------------------------------------------------
analyzed: data/examples/classic/NSLPK3_untagged.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.040504s
  types (all-traces): verified (36 steps)
  nonce_secrecy (all-traces): verified (133 steps)
  session_key_setup_possible (exists-trace): verified (9 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/classic/NSLPK3_untagged.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.040504s
  types (all-traces): verified (36 steps)
  nonce_secrecy (all-traces): verified (133 steps)
  session_key_setup_possible (exists-trace): verified (9 steps)

==============================================================================
*/
