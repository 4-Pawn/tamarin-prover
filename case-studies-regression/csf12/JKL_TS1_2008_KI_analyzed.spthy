theory JKL_TS1_2008_KI begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* Jeong, Katz, Lee : TS1 (2008) *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, ~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, ~ekI ), !Ephk( ~ekI ), Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, ~ekI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, ~ekI, Y, h(<$I, $R, ~ekI, Y, 'g'^~lkR^~lkI>) )
  ]->
   [ !Sessk( ~ekI, h(<$I, $R, ~ekI, Y, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, ~ekI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
    --[
    SidI_2( ~ekI, $I, $R, ~ekI, Y, h(<$I, $R, ~ekI, Y, 'g'^(~lkI*~lkR)>) )
    ]->
     [ !Sessk( ~ekI, h(<$I, $R, ~ekI, Y, 'g'^(~lkI*~lkR)>) ) ]
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, ~ekR, h(<$I, $R, X, ~ekR, 'g'^~lkI^~lkR>) )
  ]->
   [
   Out( ~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<$I, $R, X, ~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
    --[
    SidR_1( ~ekR, $I, $R, X, ~ekR, h(<$I, $R, X, ~ekR, 'g'^(~lkI*~lkR)>) )
    ]->
     [
     Out( ~ekR ), !Ephk( ~ekR ),
     !Sessk( ~ekR, h(<$I, $R, X, ~ekR, 'g'^(~lkI*~lkR)>) )
     ]
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) JKL2008_1_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> (F))) &
        (All #i3.13 #i4.14 tpartner.15 kpartner.16.
          ((SidR_1( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
           (SesskRev( tpartner.15 ) @ #i4.14)) ==>
          (F)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
  (All #i3.13 #i4.14 tpartner.15 kpartner.16.
    (SidR_1( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
    (SesskRev( tpartner.15 ) @ #i4.14)
   ==>
    F)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI, $I, $R, ~lkI, ~ekI )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R, 'g'^~lkR )] )
    case generate_ltk
    solve( !KU( f_, h(<$I, $R, ~ekI, hkR, 'g'^(~lkI*~lkR)>) ) @ #vk.1 )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( !KU( f_.8, 'g'^(~lkI*~lkR) ) @ #vk.9 )
        case cexp
        solve( !KU( f_.9, ~lkI ) @ #vk.12 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk_case_1
        solve( !KU( f_.2, ~lkI ) @ #vk.10 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk_case_2
        solve( !KU( f_.2, ~lkR ) @ #vk.10 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

lemma (modulo E) JKL2008_1_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
            (K( k.5 ) @ #i2.1)) &
           (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
          (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> (F))) &
         (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> (F))) &
        (All #i3.13 #i4.14 tpartner.15 kpartner.16.
          ((SidI_2( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
           (SesskRev( tpartner.15 ) @ #i4.14)) ==>
          (F)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10 a.11. (LtkRev( a.11 ) @ #i3.10) ==> F) &
  (All #i3.12. (SesskRev( ttest.2 ) @ #i3.12) ==> F) &
  (All #i3.13 #i4.14 tpartner.15 kpartner.16.
    (SidI_2( tpartner.15, I.3, R.4, hkI.6, hkR.7, kpartner.16 ) @ #i3.13) &
    (SesskRev( tpartner.15 ) @ #i4.14)
   ==>
    F)"
*/
simplify
solve( (#i1, 2)[!Ltk( $R, ~lkR )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I, 'g'^~lkI )] )
    case generate_ltk
    solve( !KU( f_, h(<$I, $R, hkI, ~ekR, 'g'^(~lkI*~lkR)>) ) @ #vk.1 )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( !KU( f_.8, 'g'^(~lkI*~lkR) ) @ #vk.9 )
        case cexp
        solve( !KU( f_.9, ~lkI ) @ #vk.12 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk_case_1
        solve( !KU( f_.2, ~lkI ) @ #vk.10 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      next
        case generate_ltk_case_2
        solve( !KU( f_.2, ~lkR ) @ #vk.10 )
          case Ltk_reveal
          by contradiction // from formulas
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/JKL_TS1_2008_KI.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/JKL_TS1_2008_KI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.37841s
  JKL2008_1_initiator_key (all-traces): verified (15 steps)
  JKL2008_1_responder_key (all-traces): verified (15 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/JKL_TS1_2008_KI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.37841s
  JKL2008_1_initiator_key (all-traces): verified (15 steps)
  JKL2008_1_responder_key (all-traces): verified (15 steps)

==============================================================================
*/
