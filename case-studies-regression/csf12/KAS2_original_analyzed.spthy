theory KAS2_original begin

// Function signature and definition of the equational theory E

functions: KDF/1, MAC/2, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

section{* KAS2 *}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~m1 ), !Ltk( $I, ~lkI ), !Pk( $R, pkR ) ]
  --[ Sid( ~m1, $I, $R, <$I, $R, 'Init', aenc(~m1, pkR)> ) ]->
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, aenc(~m1, pkR) ), !Ephk( ~m1, ~m1 ),
   Out( aenc(~m1, pkR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Resp_1:
   [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
  --[
  Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
  Match( ~m2, <$I, $R, 'Init', c1> ),
  Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
  ]->
   [
   Resp_1( ~m2, $I, $R, ~lkR, adec(c1, ~lkR), ~m2, c1, aenc(~m2, pkI) ),
   !Ephk( ~m2, ~m2 ),
   Out( <aenc(~m2, pkI), 
         MAC(KDF(<adec(c1, ~lkR), ~m2, $I, $R, c1, aenc(~m2, pkI)>),
             <'Resp', $R, $I, aenc(~m2, pkI), c1>)
        >
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
    --[
    Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
    Match( ~m2, <$I, $R, 'Init', c1> ),
    Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
    ]->
     [
     Resp_1( ~m2, $I, $R, ~lkR, z, ~m2, c1, aenc(~m2, pkI) ),
     !Ephk( ~m2, ~m2 ),
     Out( <aenc(~m2, pkI), 
           MAC(KDF(<z, ~m2, $I, $R, c1, aenc(~m2, pkI)>),
               <'Resp', $R, $I, aenc(~m2, pkI), c1>)
          >
     )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.11
       c1    = c1.13
       z     = adec(c1.13, ~lkR.11)
    
    2. ~lkR  = ~lkR.13
       c1    = aenc(z.17, pk(~lkR.13))
       z     = z.17
  */

rule (modulo E) Init_2:
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
   In( <c2, 
        MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)
       >
   )
   ]
  --[
  Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
  Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
  Accept( ~m1, $I, $R, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
  ]->
   [
   Out( MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>),
            <'Init', $I, $R, c1, c2>)
   ),
   !Sessk( ~m1, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
     In( <c2, MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)> )
     ]
    --[
    Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
    Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
    Accept( ~m1, $I, $R, KDF(<~m1, z, $I, $R, c1, c2>) )
    ]->
     [
     Out( MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) ),
     !Sessk( ~m1, KDF(<~m1, z, $I, $R, c1, c2>) )
     ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.12
       c2    = c2.15
       z     = adec(c2.15, ~lkI.12)
    
    2. ~lkI  = ~lkI.13
       c2    = aenc(z.17, pk(~lkI.13))
       z     = z.17
  */

rule (modulo E) Resp_2:
   [
   Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 ),
   In( MAC(KDF(<m1, ~m2, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) )
   ]
  --[ Accept( ~m2, $R, $I, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]->
   [ !Sessk( ~m2, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~s, ~ek ) ] --[ EphkRev( ~s ) ]-> [ Out( ~ek ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KAS_key_secrecy:
  all-traces
  "not(Ex #i1 #i2.1 s.2 A.3 B.4 k.5.
        ((((Accept( s.2, A.3, B.4, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)) &
          (not(Ex #i4.6. SesskRev( s.2 ) @ #i4.6))) &
         (All ss.7 #i4.8 #i5.9 C.10 D.11 ms.12.
           ((Sid( ss.7, C.10, D.11, ms.12 ) @ #i4.8) &
            (Match( s.2, ms.12 ) @ #i5.9)) ==>
           (((((not(Ex #i6.13. SesskRev( ss.7 ) @ #i6.13)) &
               (not(Ex #i6.14 #i7.15.
                     (LtkRev( A.3 ) @ #i6.14) & (EphkRev( s.2 ) @ #i7.15)))) &
              (not(Ex #i6.16 #i7.17.
                    (LtkRev( B.4 ) @ #i6.16) & (EphkRev( ss.7 ) @ #i7.17)))) &
             (not(Ex #i6.18 #i7.19.
                   (LtkRev( A.3 ) @ #i6.18) & (LtkRev( B.4 ) @ #i7.19)))) &
            (not(Ex #i6.20 #i7.21.
                  (EphkRev( s.2 ) @ #i6.20) & (EphkRev( ss.7 ) @ #i7.21)))))) &
        ((not(Ex ss.22 #i4.23 #i5.24 C.25 D.26 ms.27.
               (Sid( ss.22, C.25, D.26, ms.27 ) @ #i4.23) &
               (Match( s.2, ms.27 ) @ #i5.24))) ==>
         ((not(Ex #i6.28. EphkRev( s.2 ) @ #i6.28)) &
          (not(Ex #i6.29. (LtkRev( B.4 ) @ #i6.29) & (#i6.29 < #i1))))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 s.2 A.3 B.4 k.5.
  (Accept( s.2, A.3, B.4, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i4.6. (SesskRev( s.2 ) @ #i4.6) ==> F) &
  (All ss.7 #i4.8 #i5.9 C.10 D.11 ms.12.
    (Sid( ss.7, C.10, D.11, ms.12 ) @ #i4.8) & (Match( s.2, ms.12 ) @ #i5.9)
   ==>
    (All #i6.13. (SesskRev( ss.7 ) @ #i6.13) ==> F) &
    (All #i6.14 #i7.15.
      (LtkRev( A.3 ) @ #i6.14) & (EphkRev( s.2 ) @ #i7.15)
     ==>
      F) &
    (All #i6.16 #i7.17.
      (LtkRev( B.4 ) @ #i6.16) & (EphkRev( ss.7 ) @ #i7.17)
     ==>
      F) &
    (All #i6.18 #i7.19.
      (LtkRev( A.3 ) @ #i6.18) & (LtkRev( B.4 ) @ #i7.19)
     ==>
      F) &
    (All #i6.20 #i7.21.
      (EphkRev( s.2 ) @ #i6.20) & (EphkRev( ss.7 ) @ #i7.21)
     ==>
      F)) &
  ((Ex ss.22 #i4.23 #i5.24 C.25 D.26 ms.27.
     (Sid( ss.22, C.25, D.26, ms.27 ) @ #i4.23) &
     (Match( s.2, ms.27 ) @ #i5.24)
    &
     T) |
   ((All #i6.28. (EphkRev( s.2 ) @ #i6.28) ==> F) &
    (All #i6.29. (LtkRev( B.4 ) @ #i6.29) ==> All . (#i6.29 < #i1) ==> F)))"
*/
simplify
solve( Disj(Ex ss.1 #i4.2 #i5.3 C.4 D.5 ms.6.
             (Sid( ss.1, C.4, D.5, ms.6 ) @ #i4.2) & (Match( s, ms.6 ) @ #i5.3)
            &
             T) |
           ((All #i6.1. (EphkRev( s ) @ #i6.1) ==> F) &
            (All #i6.2. (LtkRev( B ) @ #i6.2) ==> All . (#i6.2 < #i1) ==> F)) )
  case case_1
  solve( Accept( s, A, B, k ) @ #i1 )
    case Init_2
    solve( (#i1, 0)[Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 )] )
      case Init_1
      solve( Sid( ss, C, D, ms ) @ #i4 )
        case Init_1
        solve( (#i4, 1)[!Ltk( $I.1, ~lkI.1 )] )
          case Register_pk
          solve( (#i4, 2)[!Pk( $R.1, pkR )] )
            case Register_pk
            by solve( Match( ~m1, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1))>
                      ) @ #i5 )
          qed
        qed
      next
        case Init_2
        solve( (#i4, 0)[Init_1( ~m1.1, $I.1, $R.1, ~lkI.1, ~m1.1, c1 )] )
          case Init_1
          by solve( Match( ~m1,
                           <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1)), c2.1>
                    ) @ #i5 )
        qed
      next
        case Resp_1
        solve( (#i4, 2)[!Ltk( $R.1, ~lkR )] )
          case Register_pk
          solve( (#i4, 3)[!Pk( $I.1, pkI )] )
            case Register_pk
            solve( Match( ~m1, <$R.1, $I.1, 'Resp', aenc(~m2, pk(~ltkA.1)), c1>
                   ) @ #i5 )
              case Init_2
              solve( (#i5, 0)[Init_1( ~m1, $I.1, $R.1, ~lkI.1, ~m1, c1 )] )
                case Init_1
                solve( splitEqs(0) )
                  case split_case_1
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( f_,
                                KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~lkI))>)
                           ) @ #vk )
                      case Sessk_reveal_case_1
                      by contradiction // from formulas
                    next
                      case Sessk_reveal_case_2
                      by contradiction // from formulas
                    next
                      case cKDF
                      solve( !KU( f_.5, ~m1 ) @ #vk.7 )
                        case Ephk_reveal
                        solve( !KU( f_.7, ~m2 ) @ #vk.10 )
                          case Ephk_reveal
                          by contradiction // from formulas
                        next
                          case Resp_1
                          solve( !KU( f_.3, ~lkI ) @ #vk.14 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      next
                        case Init_1
                        solve( !KU( f_.8, ~m2 ) @ #vk.10 )
                          case Ephk_reveal
                          solve( !KU( f_.2, ~lkR ) @ #vk.14 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        next
                          case Resp_1
                          solve( !KU( f_.2, ~lkR ) @ #vk.14 )
                            case Ltk_reveal
                            solve( !KU( f_.3, ~lkI ) @ #vk.15 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( !KU( f_.4,
                                MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>),
                                    <'Resp', $R, $I, aenc(~m2, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
                           ) @ #vk.3 )
                      case cMAC
                      solve( !KU( f_,
                                  KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>)
                             ) @ #vk.1 )
                        case Sessk_reveal
                        by contradiction // cyclic
                      next
                        case cKDF
                        solve( !KU( f_.11, ~m1 ) @ #vk.16 )
                          case Ephk_reveal
                          solve( !KU( f_.15, ~m2 ) @ #vk.18 )
                            case Ephk_reveal
                            by contradiction // from formulas
                          next
                            case Resp_1
                            solve( !KU( f_.4, ~lkI ) @ #vk.19 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( f_.16, ~m2 ) @ #vk.18 )
                            case Ephk_reveal
                            solve( !KU( f_.3, ~ltkA ) @ #vk.19 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          next
                            case Resp_1
                            solve( !KU( f_.3, ~ltkA ) @ #vk.19 )
                              case Ltk_reveal
                              solve( !KU( f_.4, ~lkI ) @ #vk.20 )
                                case Ltk_reveal
                                by contradiction // from formulas
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  solve( splitEqs(1) )
                    case split_case_1
                    solve( !KU( f_.4,
                                MAC(KDF(<~m1, adec(aenc(~m2, pk(~ltkA)), ~lkI), $I, $R, 
                                         aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>),
                                    <'Resp', $R, $I, aenc(~m2, pk(~ltkA)), aenc(~m1, pk(~lkR))>)
                           ) @ #vk.3 )
                      case cMAC
                      solve( !KU( f_,
                                  KDF(<~m1, adec(aenc(~m2, pk(~ltkA)), ~lkI), $I, $R, aenc(~m1, pk(~lkR)), 
                                       aenc(~m2, pk(~ltkA))>)
                             ) @ #vk.1 )
                        case Sessk_reveal
                        by contradiction // cyclic
                      next
                        case cKDF
                        solve( !KU( f_.11, ~m1 ) @ #vk.16 )
                          case Ephk_reveal
                          solve( !KU( f_.15, adec(aenc(~m2, pk(~ltkA)), ~lkI) ) @ #vk.18 )
                            case cadec
                            solve( !KU( f_.5, ~lkI ) @ #vk.19 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( f_.4, ~lkR ) @ #vk.19 )
                            case Ltk_reveal
                            solve( !KU( f_.15, adec(aenc(~m2, pk(~ltkA)), ~lkI) ) @ #vk.19 )
                              case cadec
                              solve( !KU( f_.5, ~lkI ) @ #vk.20 )
                                case Ltk_reveal
                                by contradiction // from formulas
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    solve( !KU( f_.4,
                                MAC(KDF(<~m1, adec(aenc(~m2, pk(~ltkA.1)), ~lkI), $I, $R, 
                                         aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>),
                                    <'Resp', $R, $I, aenc(~m2, pk(~ltkA.1)), aenc(~m1, pk(~ltkA))>)
                           ) @ #vk.3 )
                      case cMAC
                      solve( !KU( f_,
                                  KDF(<~m1, adec(aenc(~m2, pk(~ltkA.1)), ~lkI), $I, $R, 
                                       aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>)
                             ) @ #vk.1 )
                        case Sessk_reveal
                        by contradiction // cyclic
                      next
                        case cKDF
                        solve( !KU( f_.11, ~m1 ) @ #vk.16 )
                          case Ephk_reveal
                          solve( !KU( f_.15, adec(aenc(~m2, pk(~ltkA.1)), ~lkI) ) @ #vk.18 )
                            case cadec
                            solve( !KU( f_.5, ~lkI ) @ #vk.19 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        next
                          case Init_1
                          solve( !KU( f_.4, ~ltkA ) @ #vk.19 )
                            case Ltk_reveal
                            solve( !KU( f_.15, adec(aenc(~m2, pk(~ltkA.1)), ~lkI) ) @ #vk.19 )
                              case cadec
                              solve( !KU( f_.5, ~lkI ) @ #vk.20 )
                                case Ltk_reveal
                                by contradiction // from formulas
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Resp_2
    solve( (#i1, 0)[Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 )] )
      case Resp_1
      solve( Sid( ss, C, D, ms ) @ #i4 )
        case Init_1
        solve( (#i4, 1)[!Ltk( $I.1, ~lkI )] )
          case Register_pk
          solve( (#i4, 2)[!Pk( $R.1, pkR )] )
            case Register_pk
            solve( Match( ~m2, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1))>
                   ) @ #i5 )
              case Resp_1
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( f_.1,
                            MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>),
                                <'Init', $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                       ) @ #vk.1 )
                  case Init_2
                  solve( !KU( f_,
                              KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~lkI))>)
                         ) @ #vk.1 )
                    case Sessk_reveal_case_1
                    by contradiction // from formulas
                  next
                    case Sessk_reveal_case_2
                    by contradiction // from formulas
                  next
                    case cKDF
                    solve( !KU( f_.5, ~m1 ) @ #vk.8 )
                      case Ephk_reveal
                      solve( !KU( f_.7, ~m2 ) @ #vk.11 )
                        case Ephk_reveal
                        by contradiction // from formulas
                      next
                        case Resp_1
                        solve( !KU( f_.3, ~lkI ) @ #vk.15 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( f_.8, ~m2 ) @ #vk.11 )
                        case Ephk_reveal
                        solve( !KU( f_.2, ~lkR ) @ #vk.15 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      next
                        case Resp_1
                        solve( !KU( f_.2, ~lkR ) @ #vk.15 )
                          case Ltk_reveal
                          solve( !KU( f_.2, ~lkI ) @ #vk.16 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case cMAC
                  solve( !KU( f_,
                              KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                         ) @ #vk.1 )
                    case Sessk_reveal_case_1
                    by contradiction // from formulas
                  next
                    case Sessk_reveal_case_2
                    by contradiction // cyclic
                  next
                    case cKDF
                    solve( !KU( f_.10, ~m1 ) @ #vk.13 )
                      case Ephk_reveal
                      solve( !KU( f_.11, ~m2 ) @ #vk.14 )
                        case Ephk_reveal
                        by contradiction // from formulas
                      next
                        case Resp_1
                        solve( !KU( f_.3, ~ltkA ) @ #vk.15 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( f_.12, ~m2 ) @ #vk.14 )
                        case Ephk_reveal
                        solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      next
                        case Resp_1
                        solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                          case Ltk_reveal
                          solve( !KU( f_.3, ~ltkA ) @ #vk.16 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( f_.1,
                            MAC(KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                     aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>),
                                <'Init', $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>)
                       ) @ #vk.1 )
                  case cMAC
                  solve( !KU( f_,
                              KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                   aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>)
                         ) @ #vk.1 )
                    case Sessk_reveal
                    by contradiction // cyclic
                  next
                    case cKDF
                    solve( !KU( f_.12, ~m2 ) @ #vk.14 )
                      case Ephk_reveal
                      solve( !KU( f_.11, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.14 )
                        case cadec
                        solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( f_.3, ~ltkA.1 ) @ #vk.15 )
                        case Ltk_reveal
                        solve( !KU( f_.11, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.15 )
                          case cadec
                          solve( !KU( f_.3, ~lkR ) @ #vk.16 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Init_2
        solve( (#i4, 0)[Init_1( ~m1.1, $I.1, $R.1, ~lkI, ~m1.1, c1.1 )] )
          case Init_1
          solve( Match( ~m2, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1)), c2>
                 ) @ #i5 )
            case Resp_1_case_1
            solve( splitEqs(1) )
              case split_case_1
              solve( !KU( f_.1,
                          MAC(KDF(<adec(<aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, ~lkR), ~m2, $I, 
                                   $R, <aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, aenc(~m2, pk(~ltkA.1))>),
                              <'Init', $I, $R, <aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, 
                               aenc(~m2, pk(~ltkA.1))>)
                     ) @ #vk.1 )
                case cMAC
                solve( !KU( f_,
                            KDF(<adec(<aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, ~lkR), ~m2, $I, $R, 
                                 <aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, aenc(~m2, pk(~ltkA.1))>)
                       ) @ #vk.1 )
                  case Sessk_reveal
                  by contradiction // cyclic
                next
                  case cKDF
                  solve( !KU( f_.16, ~m2 ) @ #vk.18 )
                    case Ephk_reveal
                    solve( !KU( f_.7,
                                MAC(KDF(<~m1, z, $I, $R, aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>),
                                    <'Resp', $R, $I, aenc(z, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
                           ) @ #vk.9 )
                      case Resp_1
                      solve( !KU( f_.14,
                                  adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                             ) @ #vk.18 )
                        case cadec
                        solve( !KU( f_.5, ~lkR ) @ #vk.19 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case cMAC
                      solve( !KU( f_.9, aenc(z, pk(~lkI)) ) @ #vk.11 )
                        case Init_1
                        solve( !KU( f_.18,
                                    adec(<aenc(~m1, pk(~ltkA)), aenc(~m1.1, pk(~lkI))>, ~lkR)
                               ) @ #vk.22 )
                          case cadec
                          solve( !KU( f_.6, ~lkR ) @ #vk.25 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      next
                        case Resp_1
                        solve( splitEqs(0) )
                          case split_case_1
                          solve( !KU( f_.19,
                                      adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                                 ) @ #vk.22 )
                            case cadec
                            solve( !KU( f_.7, ~lkR ) @ #vk.26 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        next
                          case split_case_2
                          solve( !KU( f_.19,
                                      adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                                 ) @ #vk.22 )
                            case cadec
                            solve( !KU( f_.7, ~lkR ) @ #vk.26 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        qed
                      next
                        case caenc
                        solve( !KU( f_.20, adec(<aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, ~lkR)
                               ) @ #vk.22 )
                          case cadec
                          solve( !KU( f_.8, ~lkR ) @ #vk.27 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  next
                    case Resp_1
                    solve( !KU( f_.4, ~ltkA.1 ) @ #vk.19 )
                      case Ltk_reveal
                      solve( !KU( f_.8,
                                  MAC(KDF(<~m1, z, $I, $R, aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>),
                                      <'Resp', $R, $I, aenc(z, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
                             ) @ #vk.13 )
                        case Resp_1
                        solve( !KU( f_.14,
                                    adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                               ) @ #vk.19 )
                          case cadec
                          solve( !KU( f_.5, ~lkR ) @ #vk.20 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      next
                        case cMAC
                        solve( !KU( f_.11, aenc(z, pk(~lkI)) ) @ #vk.14 )
                          case Init_1
                          solve( !KU( f_.18,
                                      adec(<aenc(~m1, pk(~ltkA)), aenc(~m1.1, pk(~lkI))>, ~lkR)
                                 ) @ #vk.23 )
                            case cadec
                            solve( !KU( f_.6, ~lkR ) @ #vk.26 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        next
                          case Resp_1
                          solve( splitEqs(0) )
                            case split_case_1
                            solve( !KU( f_.19,
                                        adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                                   ) @ #vk.23 )
                              case cadec
                              solve( !KU( f_.7, ~lkR ) @ #vk.27 )
                                case Ltk_reveal
                                by contradiction // from formulas
                              qed
                            qed
                          next
                            case split_case_2
                            solve( !KU( f_.19,
                                        adec(<aenc(~m1, pk(~ltkA)), aenc(~m2.1, pk(~lkI))>, ~lkR)
                                   ) @ #vk.23 )
                              case cadec
                              solve( !KU( f_.7, ~lkR ) @ #vk.27 )
                                case Ltk_reveal
                                by contradiction // from formulas
                              qed
                            qed
                          qed
                        next
                          case caenc
                          solve( !KU( f_.20, adec(<aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>, ~lkR)
                                 ) @ #vk.23 )
                            case cadec
                            solve( !KU( f_.8, ~lkR ) @ #vk.28 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( f_.1,
                          MAC(KDF(<adec(<aenc(~m1, pk(~ltkA)), c2>, ~lkR), ~m2, $I, $R, 
                                   <aenc(~m1, pk(~ltkA)), c2>, aenc(~m2, pk(~ltkA.1))>),
                              <'Init', $I, $R, <aenc(~m1, pk(~ltkA)), c2>, aenc(~m2, pk(~ltkA.1))>)
                     ) @ #vk.1 )
                case cMAC
                solve( !KU( f_,
                            KDF(<adec(<aenc(~m1, pk(~ltkA)), c2>, ~lkR), ~m2, $I, $R, 
                                 <aenc(~m1, pk(~ltkA)), c2>, aenc(~m2, pk(~ltkA.1))>)
                       ) @ #vk.1 )
                  case Sessk_reveal
                  by contradiction // cyclic
                next
                  case cKDF
                  solve( !KU( f_.16, ~m2 ) @ #vk.18 )
                    case Ephk_reveal
                    solve( !KU( f_.7,
                                MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, aenc(~m1, pk(~ltkA)), c2>),
                                    <'Resp', $R, $I, c2, aenc(~m1, pk(~ltkA))>)
                           ) @ #vk.9 )
                      case cMAC
                      solve( !KU( f_.16, adec(<aenc(~m1, pk(~ltkA)), c2>, ~lkR) ) @ #vk.21 )
                        case cadec
                        solve( !KU( f_.6, ~lkR ) @ #vk.25 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    qed
                  next
                    case Resp_1
                    solve( !KU( f_.4, ~ltkA.1 ) @ #vk.19 )
                      case Ltk_reveal
                      solve( !KU( f_.8,
                                  MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, aenc(~m1, pk(~ltkA)), c2>),
                                      <'Resp', $R, $I, c2, aenc(~m1, pk(~ltkA))>)
                             ) @ #vk.13 )
                        case cMAC
                        solve( !KU( f_.16, adec(<aenc(~m1, pk(~ltkA)), c2>, ~lkR) ) @ #vk.22 )
                          case cadec
                          solve( !KU( f_.6, ~lkR ) @ #vk.26 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Resp_1_case_2
            solve( splitEqs(0) )
              case split_case_1
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( f_,
                            KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~lkI))>)
                       ) @ #vk )
                  case Sessk_reveal_case_1
                  by contradiction // from formulas
                next
                  case Sessk_reveal_case_2
                  by contradiction // from formulas
                next
                  case cKDF
                  solve( !KU( f_.6, ~m1 ) @ #vk.8 )
                    case Ephk_reveal
                    solve( !KU( f_.8, ~m2 ) @ #vk.11 )
                      case Ephk_reveal
                      by contradiction // from formulas
                    next
                      case Resp_1
                      solve( !KU( f_.4, ~lkI ) @ #vk.15 )
                        case Ltk_reveal
                        by contradiction // from formulas
                      qed
                    qed
                  next
                    case Init_1
                    solve( !KU( f_.9, ~m2 ) @ #vk.11 )
                      case Ephk_reveal
                      solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                        case Ltk_reveal
                        by contradiction // from formulas
                      qed
                    next
                      case Resp_1
                      solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                        case Ltk_reveal
                        solve( !KU( f_.4, ~lkI ) @ #vk.16 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( f_.1,
                            MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>),
                                <'Init', $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                       ) @ #vk.1 )
                  case cMAC
                  solve( !KU( f_,
                              KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                         ) @ #vk.1 )
                    case Sessk_reveal
                    by contradiction // cyclic
                  next
                    case cKDF
                    solve( !KU( f_.12, ~m1 ) @ #vk.15 )
                      case Ephk_reveal
                      solve( !KU( f_.13, ~m2 ) @ #vk.16 )
                        case Ephk_reveal
                        by contradiction // from formulas
                      next
                        case Resp_1
                        solve( !KU( f_.4, ~ltkA ) @ #vk.17 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      qed
                    next
                      case Init_1
                      solve( !KU( f_.14, ~m2 ) @ #vk.16 )
                        case Ephk_reveal
                        solve( !KU( f_.3, ~lkR ) @ #vk.17 )
                          case Ltk_reveal
                          by contradiction // from formulas
                        qed
                      next
                        case Resp_1
                        solve( !KU( f_.3, ~lkR ) @ #vk.17 )
                          case Ltk_reveal
                          solve( !KU( f_.4, ~ltkA ) @ #vk.18 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( splitEqs(1) )
                case split_case_1
                solve( !KU( f_.1,
                            MAC(KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                     aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>),
                                <'Init', $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>)
                       ) @ #vk.1 )
                  case cMAC
                  solve( !KU( f_,
                              KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                   aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>)
                         ) @ #vk.1 )
                    case Sessk_reveal
                    by contradiction // cyclic
                  next
                    case cKDF
                    solve( !KU( f_.14, ~m2 ) @ #vk.16 )
                      case Ephk_reveal
                      solve( !KU( f_.7,
                                  MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>),
                                      <'Resp', $R, $I, aenc(~m2, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
                             ) @ #vk.9 )
                        case cMAC
                        solve( !KU( f_.14, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.19 )
                          case cadec
                          solve( !KU( f_.6, ~lkR ) @ #vk.23 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( f_.4, ~lkI ) @ #vk.17 )
                        case Ltk_reveal
                        solve( !KU( f_.8,
                                    MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>),
                                        <'Resp', $R, $I, aenc(~m2, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
                               ) @ #vk.12 )
                          case cMAC
                          solve( !KU( f_.14, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.20 )
                            case cadec
                            solve( !KU( f_.6, ~lkR ) @ #vk.24 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( f_.1,
                            MAC(KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                     aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>),
                                <'Init', $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>)
                       ) @ #vk.1 )
                  case cMAC
                  solve( !KU( f_,
                              KDF(<adec(aenc(~m1, pk(~ltkA)), ~lkR), ~m2, $I, $R, 
                                   aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>)
                         ) @ #vk.1 )
                    case Sessk_reveal
                    by contradiction // cyclic
                  next
                    case cKDF
                    solve( !KU( f_.14, ~m2 ) @ #vk.16 )
                      case Ephk_reveal
                      solve( !KU( f_.7,
                                  MAC(KDF(<~m1, adec(aenc(~m2, pk(~ltkA.1)), ~lkI), $I, $R, 
                                           aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>),
                                      <'Resp', $R, $I, aenc(~m2, pk(~ltkA.1)), aenc(~m1, pk(~ltkA))>)
                             ) @ #vk.9 )
                        case cMAC
                        solve( !KU( f_.14, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.19 )
                          case cadec
                          solve( !KU( f_.6, ~lkR ) @ #vk.23 )
                            case Ltk_reveal
                            by contradiction // from formulas
                          qed
                        qed
                      qed
                    next
                      case Resp_1
                      solve( !KU( f_.4, ~ltkA.1 ) @ #vk.17 )
                        case Ltk_reveal
                        solve( !KU( f_.8,
                                    MAC(KDF(<~m1, adec(aenc(~m2, pk(~ltkA.1)), ~lkI), $I, $R, 
                                             aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~ltkA.1))>),
                                        <'Resp', $R, $I, aenc(~m2, pk(~ltkA.1)), aenc(~m1, pk(~ltkA))>)
                               ) @ #vk.12 )
                          case cMAC
                          solve( !KU( f_.14, adec(aenc(~m1, pk(~ltkA)), ~lkR) ) @ #vk.20 )
                            case cadec
                            solve( !KU( f_.6, ~lkR ) @ #vk.24 )
                              case Ltk_reveal
                              by contradiction // from formulas
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Resp_1
        solve( (#i4, 2)[!Ltk( $R.1, ~lkR.1 )] )
          case Register_pk
          solve( (#i4, 3)[!Pk( $I.1, pkI )] )
            case Register_pk
            solve( Match( ~m2, <$R.1, $I.1, 'Resp', aenc(~m2.1, pk(~ltkA.1)), c1.1>
                   ) @ #i5 )
              case Init_2
              by solve( (#i5, 0)[Init_1( ~m2, $I.1, $R.1, ~lkI, ~m2, c1.1 )] )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Accept( s, A, B, k ) @ #i1 )
    case Init_2
    solve( (#i1, 0)[Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 )] )
      case Init_1
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( f_.3,
                    MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, aenc(~m1, pk(~ltkA)), c2>),
                        <'Resp', $R, $I, c2, aenc(~m1, pk(~ltkA))>)
               ) @ #vk.3 )
          case cMAC
          solve( !KU( f_,
                      KDF(<~m1, adec(c2, ~lkI), $I, $R, aenc(~m1, pk(~ltkA)), c2>)
                 ) @ #vk.1 )
            case Sessk_reveal
            by contradiction // cyclic
          next
            case cKDF
            solve( !KU( f_.11, ~m1 ) @ #vk.16 )
              case Ephk_reveal
              by contradiction // from formulas
            next
              case Init_1
              solve( !KU( f_.3, ~ltkA ) @ #vk.19 )
                case Ltk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( f_.3,
                    MAC(KDF(<~m1, z, $I, $R, aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>),
                        <'Resp', $R, $I, aenc(z, pk(~lkI)), aenc(~m1, pk(~ltkA))>)
               ) @ #vk.3 )
          case Resp_1
          solve( !KU( f_,
                      KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~ltkA)), aenc(~m2, pk(~lkI))>)
                 ) @ #vk.1 )
            case Sessk_reveal_case_1
            by contradiction // from formulas
          next
            case Sessk_reveal_case_2
            by contradiction // from formulas
          next
            case cKDF
            solve( !KU( f_.4, ~m1 ) @ #vk.7 )
              case Ephk_reveal
              by contradiction // from formulas
            next
              case Init_1
              solve( !KU( f_.7, ~m2 ) @ #vk.10 )
                case Ephk_reveal
                solve( !KU( f_.3, ~ltkA ) @ #vk.14 )
                  case Ltk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( !KU( f_.3, ~ltkA ) @ #vk.14 )
                  case Ltk_reveal
                  solve( !KU( f_.3, ~lkI ) @ #vk.15 )
                    case Ltk_reveal
                    by contradiction // from formulas
                  qed
                qed
              qed
            qed
          qed
        next
          case cMAC
          solve( !KU( f_,
                      KDF(<~m1, z, $I, $R, aenc(~m1, pk(~ltkA)), aenc(z, pk(~lkI))>)
                 ) @ #vk.1 )
            case Sessk_reveal_case_1
            by contradiction // cyclic
          next
            case Sessk_reveal_case_2
            by contradiction // from formulas
          next
            case cKDF
            solve( !KU( f_.11, ~m1 ) @ #vk.16 )
              case Ephk_reveal
              by contradiction // from formulas
            next
              case Init_1
              solve( !KU( f_.3, ~ltkA ) @ #vk.19 )
                case Ltk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case Resp_2
    solve( (#i1, 0)[Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 )] )
      case Resp_1
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( f_.1,
                    MAC(KDF(<adec(c1, ~lkR), ~m2, $I, $R, c1, aenc(~m2, pk(~ltkA))>),
                        <'Init', $I, $R, c1, aenc(~m2, pk(~ltkA))>)
               ) @ #vk.1 )
          case cMAC
          solve( !KU( f_,
                      KDF(<adec(c1, ~lkR), ~m2, $I, $R, c1, aenc(~m2, pk(~ltkA))>)
                 ) @ #vk.1 )
            case Sessk_reveal
            by contradiction // cyclic
          next
            case cKDF
            solve( !KU( f_.12, ~m2 ) @ #vk.14 )
              case Ephk_reveal
              by contradiction // from formulas
            next
              case Resp_1
              solve( !KU( f_.3, ~ltkA ) @ #vk.15 )
                case Ltk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( f_.1,
                    MAC(KDF(<m1, ~m2, $I, $R, aenc(m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>),
                        <'Init', $I, $R, aenc(m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
               ) @ #vk.1 )
          case Init_2
          solve( !KU( f_,
                      KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                 ) @ #vk.1 )
            case Sessk_reveal_case_1
            by contradiction // from formulas
          next
            case Sessk_reveal_case_2
            by contradiction // from formulas
          next
            case cKDF
            solve( !KU( f_.5, ~m1 ) @ #vk.8 )
              case Ephk_reveal
              solve( !KU( f_.7, ~m2 ) @ #vk.11 )
                case Ephk_reveal
                by contradiction // from formulas
              next
                case Resp_1
                solve( !KU( f_.3, ~ltkA ) @ #vk.15 )
                  case Ltk_reveal
                  by contradiction // from formulas
                qed
              qed
            next
              case Init_1
              solve( !KU( f_.8, ~m2 ) @ #vk.11 )
                case Ephk_reveal
                by contradiction // from formulas
              next
                case Resp_1
                solve( !KU( f_.3, ~lkR ) @ #vk.15 )
                  case Ltk_reveal
                  solve( !KU( f_.3, ~ltkA ) @ #vk.16 )
                    case Ltk_reveal
                    by contradiction // from formulas
                  qed
                qed
              qed
            qed
          qed
        next
          case cMAC
          solve( !KU( f_,
                      KDF(<m1, ~m2, $I, $R, aenc(m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                 ) @ #vk.1 )
            case Sessk_reveal_case_1
            by contradiction // from formulas
          next
            case Sessk_reveal_case_2
            by contradiction // cyclic
          next
            case cKDF
            solve( !KU( f_.12, ~m2 ) @ #vk.14 )
              case Ephk_reveal
              by contradiction // from formulas
            next
              case Resp_1
              solve( !KU( f_.3, ~ltkA ) @ #vk.15 )
                case Ltk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/KAS2_original.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KAS2_original.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 6.478153s
  KAS_key_secrecy (all-traces): verified (290 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KAS2_original.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 6.478153s
  KAS_key_secrecy (all-traces): verified (290 steps)

==============================================================================
*/
