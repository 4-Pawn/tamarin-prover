theory KAS2_eCK begin

// Function signature and definition of the equational theory E

functions: KDF/1, MAC/2, adec/2, aenc/2, fst/1, h/1, pair/2, pk/1, snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

section{* KAS2 *}

rule (modulo E) Register_pk:
   [ Fr( ~ltkA ) ]
  -->
   [ !Ltk( $A, ~ltkA ), !Pk( $A, pk(~ltkA) ), Out( pk(~ltkA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~m1 ), !Ltk( $I, ~lkI ), !Pk( $R, pkR ) ]
  --[ Sid( ~m1, $I, $R, <$I, $R, 'Init', aenc(~m1, pkR)> ) ]->
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, aenc(~m1, pkR) ), !Ephk( ~m1, ~m1 ),
   Out( aenc(~m1, pkR) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Resp_1:
   [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
  --[
  Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
  Match( ~m2, <$I, $R, 'Init', c1> ),
  Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
  ]->
   [
   Resp_1( ~m2, $I, $R, ~lkR, adec(c1, ~lkR), ~m2, c1, aenc(~m2, pkI) ),
   !Ephk( ~m2, ~m2 ),
   Out( <aenc(~m2, pkI), 
         MAC(KDF(<adec(c1, ~lkR), ~m2, $I, $R, c1, aenc(~m2, pkI)>),
             <'Resp', $R, $I, aenc(~m2, pkI), c1>)
        >
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ Fr( ~m2 ), In( c1 ), !Ltk( $R, ~lkR ), !Pk( $I, pkI ) ]
    --[
    Sid( ~m2, $R, $I, <$R, $I, 'Resp', aenc(~m2, pkI), c1> ),
    Match( ~m2, <$I, $R, 'Init', c1> ),
    Match( ~m2, <$I, $R, 'Init', c1, aenc(~m2, pkI)> )
    ]->
     [
     Resp_1( ~m2, $I, $R, ~lkR, z, ~m2, c1, aenc(~m2, pkI) ),
     !Ephk( ~m2, ~m2 ),
     Out( <aenc(~m2, pkI), 
           MAC(KDF(<z, ~m2, $I, $R, c1, aenc(~m2, pkI)>),
               <'Resp', $R, $I, aenc(~m2, pkI), c1>)
          >
     )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.11
       c1    = c1.13
       z     = adec(c1.13, ~lkR.11)
    
    2. ~lkR  = ~lkR.13
       c1    = aenc(z.17, pk(~lkR.13))
       z     = z.17
  */

rule (modulo E) Init_2:
   [
   Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
   In( <c2, 
        MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)
       >
   )
   ]
  --[
  Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
  Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
  Accept( ~m1, $I, $R, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
  ]->
   [
   Out( MAC(KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>),
            <'Init', $I, $R, c1, c2>)
   ),
   !Sessk( ~m1, KDF(<~m1, adec(c2, ~lkI), $I, $R, c1, c2>) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~m1, $I, $R, ~lkI, ~m1, c1 ),
     In( <c2, MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Resp', $R, $I, c2, c1>)> )
     ]
    --[
    Sid( ~m1, $I, $R, <$I, $R, 'Init', c1, c2> ),
    Match( ~m1, <$R, $I, 'Resp', c2, c1> ),
    Accept( ~m1, $I, $R, KDF(<~m1, z, $I, $R, c1, c2>) )
    ]->
     [
     Out( MAC(KDF(<~m1, z, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) ),
     !Sessk( ~m1, KDF(<~m1, z, $I, $R, c1, c2>) )
     ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.12
       c2    = c2.15
       z     = adec(c2.15, ~lkI.12)
    
    2. ~lkI  = ~lkI.13
       c2    = aenc(z.17, pk(~lkI.13))
       z     = z.17
  */

rule (modulo E) Resp_2:
   [
   Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 ),
   In( MAC(KDF(<m1, ~m2, $I, $R, c1, c2>), <'Init', $I, $R, c1, c2>) )
   ]
  --[ Accept( ~m2, $R, $I, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]->
   [ !Sessk( ~m2, KDF(<m1, ~m2, $I, $R, c1, c2>) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~s, ~ek ) ] --[ EphkRev( ~s ) ]-> [ Out( ~ek ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_key_secrecy:
  all-traces
  "not(Ex #i1 #i2.1 s.2 A.3 B.4 k.5.
        ((((Accept( s.2, A.3, B.4, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)) &
          (not(Ex #i4.6. SesskRev( s.2 ) @ #i4.6))) &
         (All ss.7 #i4.8 #i5.9 C.10 D.11 ms.12.
           ((Sid( ss.7, C.10, D.11, ms.12 ) @ #i4.8) &
            (Match( s.2, ms.12 ) @ #i5.9)) ==>
           (((not(Ex #i6.13. SesskRev( ss.7 ) @ #i6.13)) &
             (not(Ex #i6.14 #i7.15.
                   (LtkRev( A.3 ) @ #i6.14) & (EphkRev( s.2 ) @ #i7.15)))) &
            (not(Ex #i6.16 #i7.17.
                  (LtkRev( B.4 ) @ #i6.16) & (EphkRev( ss.7 ) @ #i7.17)))))) &
        ((not(Ex ss.18 #i4.19 #i5.20 C.21 D.22 ms.23.
               (Sid( ss.18, C.21, D.22, ms.23 ) @ #i4.19) &
               (Match( s.2, ms.23 ) @ #i5.20))) ==>
         ((not(Ex #i6.24. LtkRev( B.4 ) @ #i6.24)) &
          (not(Ex #i6.25 #i7.26.
                (LtkRev( A.3 ) @ #i6.25) & (EphkRev( s.2 ) @ #i7.26))))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 s.2 A.3 B.4 k.5.
  (Accept( s.2, A.3, B.4, k.5 ) @ #i1) & (K( k.5 ) @ #i2.1)
 &
  (All #i4.6. (SesskRev( s.2 ) @ #i4.6) ==> F) &
  (All ss.7 #i4.8 #i5.9 C.10 D.11 ms.12.
    (Sid( ss.7, C.10, D.11, ms.12 ) @ #i4.8) & (Match( s.2, ms.12 ) @ #i5.9)
   ==>
    (All #i6.13. (SesskRev( ss.7 ) @ #i6.13) ==> F) &
    (All #i6.14 #i7.15.
      (LtkRev( A.3 ) @ #i6.14) & (EphkRev( s.2 ) @ #i7.15)
     ==>
      F) &
    (All #i6.16 #i7.17.
      (LtkRev( B.4 ) @ #i6.16) & (EphkRev( ss.7 ) @ #i7.17)
     ==>
      F)) &
  ((Ex ss.18 #i4.19 #i5.20 C.21 D.22 ms.23.
     (Sid( ss.18, C.21, D.22, ms.23 ) @ #i4.19) &
     (Match( s.2, ms.23 ) @ #i5.20)
    &
     T) |
   ((All #i6.24. (LtkRev( B.4 ) @ #i6.24) ==> F) &
    (All #i6.25 #i7.26.
      (LtkRev( A.3 ) @ #i6.25) & (EphkRev( s.2 ) @ #i7.26)
     ==>
      F)))"
*/
simplify
solve( Disj(Ex ss.1 #i4.2 #i5.3 C.4 D.5 ms.6.
             (Sid( ss.1, C.4, D.5, ms.6 ) @ #i4.2) & (Match( s, ms.6 ) @ #i5.3)
            &
             T) |
           ((All #i6.1. (LtkRev( B ) @ #i6.1) ==> F) &
            (All #i6.2 #i7.3.
              (LtkRev( A ) @ #i6.2) & (EphkRev( s ) @ #i7.3)
             ==>
              F)) )
  case case_1
  solve( Accept( s, A, B, k ) @ #i1 )
    case Resp_2
    solve( (#i1, 0)[Resp_1( ~m2, $I, $R, ~lkR, m1, ~m2, c1, c2 )] )
      case Resp_1
      solve( Sid( ss, C, D, ms ) @ #i4 )
        case Init_1
        solve( (#i4, 1)[!Ltk( $I.1, ~lkI )] )
          case Register_pk
          solve( (#i4, 2)[!Pk( $R.1, pkR )] )
            case Register_pk
            solve( Match( ~m2, <$I.1, $R.1, 'Init', aenc(~m1.1, pk(~ltkA.1))>
                   ) @ #i5 )
              case Resp_1
              solve( splitEqs(0) )
                case split_case_1
                solve( !KU( f_.1,
                            MAC(KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>),
                                <'Init', $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                       ) @ #vk.1 )
                  case cMAC
                  solve( !KU( f_,
                              KDF(<~m1, ~m2, $I, $R, aenc(~m1, pk(~lkR)), aenc(~m2, pk(~ltkA))>)
                         ) @ #vk.1 )
                    case cKDF
                    solve( !KU( f_.10, ~m1 ) @ #vk.13 )
                      case Ephk_reveal
                      solve( !KU( f_.11, ~m2 ) @ #vk.14 )
                        case Ephk_reveal
                        solve( !KU( f_.2, aenc(~m1, pk(~lkR)) ) @ #vk.5 )
                          case Init_1
                          solve( !KU( f_.9, aenc(~m2, pk(~ltkA)) ) @ #vk.14 )
                            case Resp_1
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/KAS2_eCK.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KAS2_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.658922s
  eCK_key_secrecy (all-traces): falsified - found trace (16 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KAS2_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.658922s
  eCK_key_secrecy (all-traces): falsified - found trace (16 steps)

==============================================================================
*/
