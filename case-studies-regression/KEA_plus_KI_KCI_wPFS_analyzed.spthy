theory KEA_plus_wPFS begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* KEA+ *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) )
  ]->
   [ !Sessk( ~ekI, h(<Y^~lkI, 'g'^~lkR^~ekI, $I, $R>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<z, 'g'^(~ekI*~x), $I, $R>) ) ]->
     [ !Sessk( ~ekI, h(<z, 'g'^(~ekI*~x), $I, $R>) ) ]
  
    variants (modulo AC)
    1. ~lkI  = ~lkI.370
       Y     = Y.372
       z     = Y.372^~lkI.370
    
    2. ~lkI  = ~lkI.382
       Y     = z.387^inv(~lkI.382)
       z     = z.387
    
    3. ~lkI  = ~lkI.21508
       Y     = x.43006^x.43007
       z     = x.43006^(~lkI.21508*x.43007)
    
    4. ~lkI  = ~lkI.21956
       Y     = x.43902^inv((~lkI.21956*x.43903))
       z     = x.43902^inv(x.43903)
    
    5. ~lkI  = ~lkI.21956
       Y     = x.43902^(x.43903*inv(~lkI.21956))
       z     = x.43902^x.43903
    
    6. ~lkI  = ~lkI.22468
       Y     = x.44925^(x.44927*inv((~lkI.22468*x.44926)))
       z     = x.44925^(x.44927*inv(x.44926))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<'g'^~lkI^~ekR, X^~lkR, $I, $R>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<'g'^(~ekR*~x), z, $I, $R>) )
    ]->
     [
     Out( 'g'^~ekR ), !Ephk( ~ekR ),
     !Sessk( ~ekR, h(<'g'^(~ekR*~x), z, $I, $R>) )
     ]
  
    variants (modulo AC)
    1. ~lkR  = ~lkR.514
       X     = X.515
       z     = X.515^~lkR.514
    
    2. ~lkR  = ~lkR.526
       X     = z.531^inv(~lkR.526)
       z     = z.531
    
    3. ~lkR  = ~lkR.343874
       X     = x.687736^x.687737
       z     = x.687736^(~lkR.343874*x.687737)
    
    4. ~lkR  = ~lkR.351042
       X     = x.702072^inv((~lkR.351042*x.702073))
       z     = x.702072^inv(x.702073)
    
    5. ~lkR  = ~lkR.351042
       X     = x.702072^(x.702073*inv(~lkR.351042))
       z     = x.702072^x.702073
    
    6. ~lkR  = ~lkR.359234
       X     = x.718455^(x.718457*inv((~lkR.359234*x.718456)))
       z     = x.718455^(x.718457*inv(x.718456))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) keaplus_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> (F))) &
           (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
          (All #i3.10 #i4.11 tpartner.12 kpartner.13.
            ((SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
             (EphkRev( tpartner.12 ) @ #i4.11)) ==>
            (F))) &
         (All #i3.14 #i4.15 tpartner.16 kpartner.17.
           ((SidR_1( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
            (SesskRev( tpartner.16 ) @ #i4.15)) ==>
           (F))) &
        (All #i3.18.
          (LtkRev( R.4 ) @ #i3.18) ==>
          ((#i1 < #i3.18) &
           (Ex #i4.19 tpartner.20 kpartner.21.
             SidR_1( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i4.19))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 kpartner.13.
    (SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
    (EphkRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i3.14 #i4.15 tpartner.16 kpartner.17.
    (SidR_1( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
    (SesskRev( tpartner.16 ) @ #i4.15)
   ==>
    F) &
  (All #i3.18.
    (LtkRev( R.4 ) @ #i3.18)
   ==>
    (#i1 < #i3.18) &
    (Ex #i4.19 tpartner.20 kpartner.21.
      (SidR_1( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i4.19)
     &
      T))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.11, h(<z.8, 'g'^(~ekI.8*~x.8), $I.8, $R.8>)
                      )] /* may loop */ )
      case Sessk_reveal_case_2
      solve( splitEqs(1) )
        case split_case_1
        solve( (#vf.9, 0)[!KU( f_.10, 'g'^(~tid.60*~x.61*inv(~lkI.59))
                          )] /* may loop */ )
          case Resp_1
          solve( KU((#vr.83, 1), ~lkI.59) )
            case Ltk_reveal
            solve( KU((#vr.83, 1), ~x.73) )
              case Ltk_reveal
              solve( splitEqs(1) )
                case split_case_2
                solve( (#vf.44, 0)[!KU( f_.45, 'g'^~ekI.122 )] /* may loop */ )
                  case Init_1
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) keaplus_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        (((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
              (K( k.5 ) @ #i2.1)) &
             (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> (F))) &
            (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
           (All #i3.10 #i4.11 tpartner.12 lki.13.
             ((SidI_1( tpartner.12, I.3, R.4, lki.13 ) @ #i3.10) &
              (EphkRev( tpartner.12 ) @ #i4.11)) ==>
             (F))) &
          (All #i3.14 #i4.15 tpartner.16 kpartner.17.
            ((SidI_2( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
             (EphkRev( tpartner.16 ) @ #i4.15)) ==>
            (F))) &
         (All #i3.18 #i4.19 tpartner.20 kpartner.21.
           ((SidI_2( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i3.18) &
            (SesskRev( tpartner.20 ) @ #i4.19)) ==>
           (F))) &
        (All #i3.22.
          (LtkRev( I.3 ) @ #i3.22) ==>
          ((#i1 < #i3.22) &
           (Ex #i4.23 tpartner.24.
             SidI_1( tpartner.24, I.3, R.4, hkI.6 ) @ #i4.23))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (EphkRev( ttest.2 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 lki.13.
    (SidI_1( tpartner.12, I.3, R.4, lki.13 ) @ #i3.10) &
    (EphkRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i3.14 #i4.15 tpartner.16 kpartner.17.
    (SidI_2( tpartner.16, I.3, R.4, hkI.6, hkR.7, kpartner.17 ) @ #i3.14) &
    (EphkRev( tpartner.16 ) @ #i4.15)
   ==>
    F) &
  (All #i3.18 #i4.19 tpartner.20 kpartner.21.
    (SidI_2( tpartner.20, I.3, R.4, hkI.6, hkR.7, kpartner.21 ) @ #i3.18) &
    (SesskRev( tpartner.20 ) @ #i4.19)
   ==>
    F) &
  (All #i3.22.
    (LtkRev( I.3 ) @ #i3.22)
   ==>
    (#i1 < #i3.22) &
    (Ex #i4.23 tpartner.24.
      (SidI_1( tpartner.24, I.3, R.4, hkI.6 ) @ #i4.23)
     &
      T))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.8, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.12, h(<'g'^(~ekR.8*~x.8), z.8, $I.8, $R.8>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      solve( splitEqs(1) )
        case split_case_1
        solve( (#vf.9, 0)[!KU( f_.10, 'g'^(~tid.55*~x.56*inv(~lkR.54))
                          )] /* may loop */ )
          case Init_1
          solve( KU((#vr.73, 1), ~lkR.54) )
            case Ltk_reveal
            solve( KU((#vr.73, 1), ~x.90) )
              case Ltk_reveal
              solve( splitEqs(1) )
                case split_case_2
                solve( (#vf.39, 0)[!KU( f_.40, 'g'^~ekR.117 )] /* may loop */ )
                  case Resp_1
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/KEA_plus_KI_KCI_wPFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/KEA_plus_KI_KCI_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.02098s
  keaplus_initiator_key (all-traces): falsified - found trace (11 steps)
  keaplus_responder_key (all-traces): falsified - found trace (11 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/KEA_plus_KI_KCI_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 1.02098s
  keaplus_initiator_key (all-traces): falsified - found trace (11 steps)
  keaplus_responder_key (all-traces): falsified - found trace (11 steps)

==============================================================================
*/
