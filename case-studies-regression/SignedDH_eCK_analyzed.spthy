theory SignedDH_eCK begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Signed Diffie-Hellman Protocol in the eCK model *}

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [
   Init_1( ~ekI, $I, $R, ~ekI, 'g'^~ekI ), !Ephk( ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( ~ekI, $I, $R, ~ekI, hkI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, Y^~ekI ) ]->
   [ !Sessk( ~ekI, Y^~ekI ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.3, $R.4, ~ekI, hkI.5 ), !Pk( $R.4, pk(x.6) ),
     In( <$R.4, $I.3, Y.1, sign(<'2', $R.4, $I.3, Y.1>, x.6)> )
     ]
    --[ SidI_2( ~ekI, $I.3, $R.4, hkI.5, Y.1, z.2 ) ]->
     [ !Sessk( ~ekI, z.2 ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.30
       Y.1   = Y.31
       z.2   = Y.31^~ekI.30
    
    2. ~ekI  = ~ekI.30
       Y.1   = z.31^inv(~ekI.30)
       z.2   = z.31
    
    3. ~ekI  = ~ekI.31
       Y.1   = x.32^x.33
       z.2   = x.32^(~ekI.31*x.33)
    
    4. ~ekI  = ~ekI.31
       Y.1   = x.32^inv((~ekI.31*x.33))
       z.2   = x.32^inv(x.33)
    
    5. ~ekI  = ~ekI.31
       Y.1   = x.32^(x.33*inv(~ekI.31))
       z.2   = x.32^x.33
    
    6. ~ekI  = ~ekI.32
       Y.1   = x.33^(x.34*inv((~ekI.32*x.35)))
       z.2   = x.33^(x.34*inv(x.35))
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, X^~ekR ) ]->
   [
   !Ephk( ~ekR ), !Sessk( ~ekR, X^~ekR ),
   Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> )
   ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I.3, pk(x.4) ), !Ltk( $R.5, ltkR.6 ), Fr( ~ekR ),
     In( <$I.3, $R.5, X.1, sign(<'1', $I.3, $R.5, X.1>, x.4)> )
     ]
    --[ SidR_1( ~ekR, $I.3, $R.5, X.1, 'g'^~ekR, z.2 ) ]->
     [
     !Ephk( ~ekR ), !Sessk( ~ekR, z.2 ),
     Out( <$R.5, $I.3, 'g'^~ekR, sign(<'2', $R.5, $I.3, 'g'^~ekR>, ltkR.6)> )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.53
       X.1   = X.54
       z.2   = X.54^~ekR.53
    
    2. ~ekR  = ~ekR.53
       X.1   = z.54^inv(~ekR.53)
       z.2   = z.54
    
    3. ~ekR  = ~ekR.54
       X.1   = x.55^x.56
       z.2   = x.55^(~ekR.54*x.56)
    
    4. ~ekR  = ~ekR.54
       X.1   = x.55^inv((~ekR.54*x.56))
       z.2   = x.55^inv(x.56)
    
    5. ~ekR  = ~ekR.54
       X.1   = x.55^(x.56*inv(~ekR.54))
       z.2   = x.55^x.56
    
    6. ~ekR  = ~ekR.55
       X.1   = x.56^(x.57*inv((~ekR.55*x.58)))
       z.2   = x.56^(x.57*inv(x.58))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekA ) ] --[ EphkRev( ~ekA ) ]-> [ Out( ~ekA ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ttest.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
                (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( tpartner.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 tpartner.18 kpartner.19.
               ((SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
                (LtkRev( R.4 ) @ #i4.16)) &
               (EphkRev( tpartner.18 ) @ #i5.17)))) &
        (All #i3.20.
          (LtkRev( R.4 ) @ #i3.20) ==>
          (Ex #i4.21 tpartner.22 kpartner.23.
            SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 tpartner.18 kpartner.19.
    (SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
    (LtkRev( R.4 ) @ #i4.16) &
    (EphkRev( tpartner.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.20.
    (LtkRev( R.4 ) @ #i3.20)
   ==>
    Ex #i4.21 tpartner.22 kpartner.23.
     (SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)
    &
     T)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.11, $R.12, ~ekI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 1)[!Pk( $R.12, pk(x.14) )] )
    case Register_pk
    solve( KU((#vf.15, 0), sign(<'2', $R.12, $I.11, hkR.7>, ~ltk.37)) )
      case Resp
      solve( KU((#vf.53, 0), sign(<'1', $I.11, $R.12, X.51>, ~ltk.50)) )
        case Init_1
        solve( splitEqs(1) )
          case split_case_1
          solve( (#i2.1, 0)[!KU( f_.17, 'g'^(~ekI.119*~ekR.120) )] /* may loop */ )
            case Init_1
            solve( (#vr.138, 1)[!KU( f_.139, ~ekR.161 )] /* may loop */ )
              case Ephk_reveal
              solve( splitEqs(1) )
                case split_case_1
                solve( KU((#vf.15, 0), 'g'^~ekR.191) )
                  case Resp
                  solve( KU((#vf.53, 0), 'g'^~ekI.190) )
                    case Init_1
                    SOLVED (trace found)
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ttest.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
                (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( tpartner.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 tpartner.18.
               ((SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i3.15) &
                (LtkRev( I.3 ) @ #i4.16)) &
               (EphkRev( tpartner.18 ) @ #i5.17)))) &
        (All #i3.19.
          (LtkRev( I.3 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21.
            SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 tpartner.18.
    (SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i3.15) &
    (LtkRev( I.3 ) @ #i4.16) &
    (EphkRev( tpartner.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( I.3 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21.
     (SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)
    &
     T)"
*/
simplify
solve( (#i1, 0)[!Pk( $I.11, pk(x.12) )] )
  case Register_pk
  solve( (#i1, 1)[!Ltk( $R.13, ltkR.14 )] )
    case Register_pk
    solve( KU((#vf.15, 0), sign(<'1', $I.11, $R.13, hkI.6>, ~ltk.23)) )
      case Init_1
      solve( splitEqs(1) )
        case split_case_1
        solve( (#i2.1, 0)[!KU( f_.18, 'g'^(~ekR.67*~ekI.68) )] /* may loop */ )
          case Init_1
          solve( (#vr.86, 1)[!KU( f_.87, ~ekR.108 )] /* may loop */ )
            case Ephk_reveal
            SOLVED (trace found)
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/SignedDH_eCK.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.370116s
  eCK_initiator_key: attack found (12 steps)
  eCK_responder_key: attack found (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 4.370116s
  eCK_initiator_key: attack found (12 steps)
  eCK_responder_key: attack found (8 steps)

==============================================================================
*/
