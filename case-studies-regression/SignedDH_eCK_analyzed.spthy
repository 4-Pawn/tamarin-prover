theory SignedDH_eCK begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Signed Diffie-Hellman Protocol in the eCK model *}

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [
   Init_1( ~ekI, $I, $R, ~ekI, 'g'^~ekI ), !Ephk( ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( ~ekI, $I, $R, ~ekI, hkI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, Y^~ekI ) ]->
   [ !Sessk( ~ekI, Y^~ekI ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I, $R, ~ekI, hkI ), !Pk( $R, pk(ltkR) ),
     In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
     ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, z ) ]->
     [ !Sessk( ~ekI, z ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.22
       Y     = Y.23
       z     = Y.23^~ekI.22
    
    2. ~ekI  = ~ekI.24
       Y     = z.29^inv(~ekI.24)
       z     = z.29
    
    3. ~ekI  = ~ekI.25
       Y     = x.41^x.42
       z     = x.41^(~ekI.25*x.42)
    
    4. ~ekI  = ~ekI.25
       Y     = x.41^inv((~ekI.25*x.42))
       z     = x.41^inv(x.42)
    
    5. ~ekI  = ~ekI.25
       Y     = x.41^(x.42*inv(~ekI.25))
       z     = x.41^x.42
    
    6. ~ekI  = ~ekI.26
       Y     = x.42^(x.44*inv((~ekI.26*x.43)))
       z     = x.42^(x.44*inv(x.43))
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, X^~ekR ) ]->
   [
   !Ephk( ~ekR ), !Sessk( ~ekR, X^~ekR ),
   Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> )
   ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
     In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
     ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, z ) ]->
     [
     !Ephk( ~ekR ), !Sessk( ~ekR, z ),
     Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.115
       X     = X.116
       z     = X.116^~ekR.115
    
    2. ~ekR  = ~ekR.137
       X     = z.142^inv(~ekR.137)
       z     = z.142
    
    3. ~ekR  = ~ekR.1292
       X     = x.2576^x.2577
       z     = x.2576^(~ekR.1292*x.2577)
    
    4. ~ekR  = ~ekR.1292
       X     = x.2576^inv((~ekR.1292*x.2577))
       z     = x.2576^inv(x.2577)
    
    5. ~ekR  = ~ekR.1292
       X     = x.2576^(x.2577*inv(~ekR.1292))
       z     = x.2576^x.2577
    
    6. ~ekR  = ~ekR.1324
       X     = x.2639^(x.2641*inv((~ekR.1324*x.2640)))
       z     = x.2639^(x.2641*inv(x.2640))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekA ) ] --[ EphkRev( ~ekA ) ]-> [ Out( ~ekA ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ttest.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
                (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( tpartner.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 tpartner.18 kpartner.19.
               ((SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
                (LtkRev( R.4 ) @ #i4.16)) &
               (EphkRev( tpartner.18 ) @ #i5.17)))) &
        (All #i3.20.
          (LtkRev( R.4 ) @ #i3.20) ==>
          (Ex #i4.21 tpartner.22 kpartner.23.
            SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( I.3 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 tpartner.18 kpartner.19.
    (SidR_1( tpartner.18, I.3, R.4, hkI.6, hkR.7, kpartner.19 ) @ #i3.15) &
    (LtkRev( R.4 ) @ #i4.16) &
    (EphkRev( tpartner.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.20.
    (LtkRev( R.4 ) @ #i3.20)
   ==>
    Ex #i4.21 tpartner.22 kpartner.23.
     (SidR_1( tpartner.22, I.3, R.4, hkI.6, hkR.7, kpartner.23 ) @ #i4.21)
    &
     T)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~ekI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 1)[!Pk( $R.8, pk(ltkR.8) )] )
    case Register_pk
    solve( KU((#vf.9, 0), sign(<'2', $R.8, $I.8, hkR.7>, ~ltk.30)) )
      case Resp
      solve( (#i2.1, 0)[!KU( f_.11, 'g'^(~ekI.74*~ekR.75) )] /* may loop */ )
        case Init_1
        solve( (#vr.110, 1)[!KU( f_.113, ~ekR.123 )] /* may loop */ )
          case Ephk_reveal
          solve( KU((#vf.45, 0), sign(<'1', $I.8, $R.8, X.44>, ~ltk.49)) )
            case Init_1
            solve( KU((#vf.9, 0), 'g'^~ekR.187) )
              case Resp
              solve( KU((#vf.45, 0), 'g'^~ekI.188) )
                case Init_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (not(Ex #i3.8 #i4.9.
                  (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)))) &
           (not(Ex #i3.10. SesskRev( ttest.2 ) @ #i3.10))) &
          (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
                (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
                (SesskRev( tpartner.13 ) @ #i4.12)))) &
         (not(Ex #i3.15 #i4.16 #i5.17 tpartner.18.
               ((SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i3.15) &
                (LtkRev( I.3 ) @ #i4.16)) &
               (EphkRev( tpartner.18 ) @ #i5.17)))) &
        (All #i3.19.
          (LtkRev( I.3 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21.
            SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 #i4.9.
    (LtkRev( R.4 ) @ #i3.8) & (EphkRev( ttest.2 ) @ #i4.9)
   ==>
    F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15 #i4.16 #i5.17 tpartner.18.
    (SidI_1( tpartner.18, I.3, R.4, hkI.6 ) @ #i3.15) &
    (LtkRev( I.3 ) @ #i4.16) &
    (EphkRev( tpartner.18 ) @ #i5.17)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( I.3 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21.
     (SidI_1( tpartner.21, I.3, R.4, hkI.6 ) @ #i4.20)
    &
     T)"
*/
simplify
solve( (#i1, 0)[!Pk( $I.8, pk(ltkI.8) )] )
  case Register_pk
  solve( (#i1, 1)[!Ltk( $R.8, ltkR.8 )] )
    case Register_pk
    solve( KU((#vf.9, 0), sign(<'1', $I.8, $R.8, hkI.6>, ~ltk.18)) )
      case Init_1
      solve( (#i2.1, 0)[!KU( f_.12, 'g'^(~ekR.69*~ekI.70) )] /* may loop */ )
        case Init_1
        solve( (#vr.105, 1)[!KU( f_.108, ~ekR.117 )] /* may loop */ )
          case Ephk_reveal
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/csf12/SignedDH_eCK.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.864535s
  eCK_initiator_key (all-traces): falsified - found trace (10 steps)
  eCK_responder_key (all-traces): falsified - found trace (7 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 0.864535s
  eCK_initiator_key (all-traces): falsified - found trace (10 steps)
  eCK_responder_key (all-traces): falsified - found trace (7 steps)

==============================================================================
*/
