theory STS_MAC_fix2 begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: KDF/1, fst/1, h/1, mac/2, pair/2, pk/1, sign/2, snd/1, true/0,
           verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Station-To-Station Protocol (MAC version, fixed with names and tags) *}

rule (modulo E) Register_pk_clone:
   [ Fr( ~ltk ) ]
  --[ LtkSet( $A, ~ltk ), Corrupt( $E ) ]->
   [
   !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), !Pk( $E, pk(~ltk) ),
   Out( pk(~ltk) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~ltkI ) ]
  -->
   [ Init_1( $I, $R, ~ltkI, ~ekI ), Out( <$I, $R, 'g'^~ekI> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
   In( <$R, $I, Y, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR), 
        mac(Y^~ekI, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR))>
   )
   ]
  --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(Y^~ekI) ) ]->
   [
   Out( <$I, $R, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI), 
         mac(Y^~ekI, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI))>
   ),
   !SessionKey( ~ekI, $I, $R, KDF(Y^~ekI) )
   ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( $I, $R, ~ltkI, ~ekI ), !Pk( $R, pk(~ltkR) ),
     In( <$R, $I, Y, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR), 
          mac(z, sign(<'1', $I, $R, Y, 'g'^~ekI>, ~ltkR))>
     )
     ]
    --[ AcceptedI( ~ekI, $I, $R, 'g'^~ekI, Y, KDF(z) ) ]->
     [
     Out( <$I, $R, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI), 
           mac(z, sign(<'2', $I, $R, 'g'^~ekI, Y>, ~ltkI))>
     ),
     !SessionKey( ~ekI, $I, $R, KDF(z) )
     ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.14
       Y     = Y.17
       z     = Y.17^~ekI.14
    
    2. ~ekI  = ~ekI.17
       Y     = z.23^inv(~ekI.17)
       z     = z.23
    
    3. ~ekI  = ~ekI.63
       Y     = x.121^x.122
       z     = x.121^(~ekI.63*x.122)
    
    4. ~ekI  = ~ekI.63
       Y     = x.121^inv((~ekI.63*x.122))
       z     = x.121^inv(x.122)
    
    5. ~ekI  = ~ekI.63
       Y     = x.121^(x.122*inv(~ekI.63))
       z     = x.121^x.122
    
    6. ~ekI  = ~ekI.64
       Y     = x.122^(x.124*inv((~ekI.64*x.123)))
       z     = x.122^(x.124*inv(x.123))
  */

rule (modulo E) Resp_1:
   [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
  -->
   [
   Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   Out( <$R, $I, 'g'^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR), 
         mac(X^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR))>
   )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ !Ltk( $R, ~ltkR ), Fr( ~ekR ), In( <$I, $R, X> ) ]
    -->
     [
     Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     Out( <$R, $I, 'g'^~ekR, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR), 
           mac(z, sign(<'1', $I, $R, 'g'^~ekR, X>, ~ltkR))>
     )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.12
       X     = X.14
       z     = X.14^~ekR.12
    
    2. ~ekR  = ~ekR.15
       X     = z.20^inv(~ekR.15)
       z     = z.20
    
    3. ~ekR  = ~ekR.45
       X     = x.85^x.86
       z     = x.85^(~ekR.45*x.86)
    
    4. ~ekR  = ~ekR.45
       X     = x.85^inv((~ekR.45*x.86))
       z     = x.85^inv(x.86)
    
    5. ~ekR  = ~ekR.45
       X     = x.85^(x.86*inv(~ekR.45))
       z     = x.85^x.86
    
    6. ~ekR  = ~ekR.46
       X     = x.86^(x.88*inv((~ekR.46*x.87)))
       z     = x.86^(x.88*inv(x.87))
  */

rule (modulo E) Resp_2:
   [
   !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
   In( <$I, $R, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI), 
        mac(X^~ekR, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI))>
   )
   ]
  --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(X^~ekR) ) ]->
   [ !SessionKey( ~ekR, $I, $R, KDF(X^~ekR) ) ]

  /*
  rule (modulo AC) Resp_2:
     [
     !Pk( $I, pk(~ltkI) ), Resp_1( $I, $R, ~ltkR, ~ekR, X ),
     In( <$I, $R, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI), 
          mac(z, sign(<'2', $I, $R, X, 'g'^~ekR>, ~ltkI))>
     )
     ]
    --[ AcceptedR( ~ekR, $I, $R, X, 'g'^~ekR, KDF(z) ) ]->
     [ !SessionKey( ~ekR, $I, $R, KDF(z) ) ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.14
       X     = X.17
       z     = X.17^~ekR.14
    
    2. ~ekR  = ~ekR.17
       X     = z.23^inv(~ekR.17)
       z     = z.23
    
    3. ~ekR  = ~ekR.50
       X     = x.95^x.96
       z     = x.95^(~ekR.50*x.96)
    
    4. ~ekR  = ~ekR.50
       X     = x.95^inv((~ekR.50*x.96))
       z     = x.95^inv(x.96)
    
    5. ~ekR  = ~ekR.50
       X     = x.95^(x.96*inv(~ekR.50))
       z     = x.95^x.96
    
    6. ~ekR  = ~ekR.51
       X     = x.96^(x.98*inv((~ekR.51*x.97)))
       z     = x.96^(x.98*inv(x.97))
  */

rule (modulo E) Sessionkey_Reveal:
   [ !SessionKey( ~tid, $I, $R, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) KI_Perfect_Forward_Secrecy_I:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedI( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedR( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[Init_1( $I.8, $R.8, ~ltkI.8, ~ekI.8 )] )
  case Init_1
  solve( (#i1.4, 1)[!Pk( $R.8, pk(~ltkR.8) )] )
    case Register_pk_clone_case_1
    solve( KU((#vf.9, 0), mac(z.8,
                              sign(<'1', $I.8, $R.8, hkr.7, 'g'^~ekI.8>, ~ltkR.8))) )
      case Resp_1
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekI.67*~ekR.68))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.81, 0), mac('g'^(~ekI.67*~ekR.68),
                                   sign(<'1', $I.78, $R.78, x.94^x.95, 'g'^~tid.78>, ~ltkR.80))) )
          case Resp_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case cmac
          solve( (#vr.100, 0)[!KU( f_.103, 'g'^(~ekI.67*~ekR.68)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.129, 1)[!KU( f_.131, ~ekR.142 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.135, 1)[!KU( f_.137, ~ekI.141 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.109, 1), ~ekI.67) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.81, 0), mac('g'^(~ekI.67*~ekR.68),
                                   sign(<'1', $I.78, $R.78, x.94^x.95, 'g'^~tid.78>, ~ltkR.80))) )
          case Resp_1
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.100, 0)[!KU( f_.103, 'g'^(~ekI.67*~ekR.68)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.129, 1)[!KU( f_.131, ~ekR.142 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.135, 1)[!KU( f_.137, ~ekI.141 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.109, 1), ~ekI.67) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.81, 0), mac('g'^(~ekI.67*~ekR.68),
                                   sign(<'2', $I.78, $R.78, x.94^x.95, 'g'^~tid.78>, ~ltkI.80))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.100, 0)[!KU( f_.103, 'g'^(~ekI.67*~ekR.68)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.129, 1)[!KU( f_.131, ~ekR.142 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.135, 1)[!KU( f_.137, ~ekI.141 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.109, 1), ~ekI.67) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.81, 0), mac('g'^(~ekI.67*~ekR.68),
                                   sign(<'2', $I.78, $R.78, x.94^x.95, 'g'^~tid.78>, ~ltkI.80))) )
          case Init_2_case_1
          solve( splitEqs(1) )
            case split
            by contradiction // from formulas
          qed
        next
          case Init_2_case_2
          by solve( splitEqs(1) )
        next
          case cmac
          solve( (#vr.100, 0)[!KU( f_.103, 'g'^(~ekI.67*~ekR.68)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.129, 1)[!KU( f_.131, ~ekR.142 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.135, 1)[!KU( f_.137, ~ekI.141 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.109, 1), ~ekI.67) )
          qed
        qed
      next
        case cKDF
        solve( (#vr.72, 0)[!KU( f_.74, 'g'^(~ekI.67*~ekR.68) )] /* may loop */ )
          case Init_1
          by solve( (#vr.99, 1)[!KU( f_.101, ~ekR.112 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.105, 1)[!KU( f_.107, ~ekI.111 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.79, 1), ~ekI.67) )
        qed
      qed
    next
      case cmac
      solve( KU((#vf.9, 0), sign(<'1', $I.8, $R.8, hkr.7, 'g'^~ekI.8>,
                                 ~ltkR.8)) )
        case Resp_1
        solve( (#vr.33, 0)[!KU( f_.36, 'g'^(~ekI.82*~ekR.83) )] /* may loop */ )
          case Init_1
          by solve( (#vr.108, 1)[!KU( f_.110, ~ekR.121 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.114, 1)[!KU( f_.116, ~ekI.120 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.88, 1), ~ekI.82) )
        qed
      next
        case csign
        by solve( (#vr.42, 1)[!KU( f_.46, ~ltkR.8 )] /* may loop */ )
      qed
    qed
  next
    case Register_pk_clone_case_2
    by contradiction // from formulas
  qed
qed

lemma (modulo E) KI_Perfect_Forward_Secrecy_R:
  all-traces
  "not(Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
        (((((AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
            (not(Ex #r.8. Corrupt( I.1 ) @ #r.8))) &
           (not(Ex #r.9. Corrupt( R.2 ) @ #r.9))) &
          (K( sessKey.3 ) @ #k.5)) &
         (not(Ex #i3.10. SesskRev( ttest ) @ #i3.10))) &
        (not(Ex #i3.11 #i4.12 tpartner.13 kpartner.14.
              (SesskRev( tpartner.13 ) @ #i3.11) &
              (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14
               ) @ #i4.12))))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex ttest I.1 R.2 sessKey.3 #i1.4 #k.5 hki.6 hkr.7.
  (AcceptedR( ttest, I.1, R.2, hki.6, hkr.7, sessKey.3 ) @ #i1.4) &
  (K( sessKey.3 ) @ #k.5)
 &
  (All #r.8. (Corrupt( I.1 ) @ #r.8) ==> F) &
  (All #r.9. (Corrupt( R.2 ) @ #r.9) ==> F) &
  (All #i3.10. (SesskRev( ttest ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SesskRev( tpartner.13 ) @ #i3.11) &
    (AcceptedI( tpartner.13, I.1, R.2, hki.6, hkr.7, kpartner.14 ) @ #i4.12)
   ==>
    F)"
*/
simplify
solve( (#i1.4, 0)[!Pk( $I.8, pk(~ltkI.8) )] )
  case Register_pk_clone_case_1
  solve( (#i1.4, 1)[Resp_1( $I.8, $R.8, ~ltkR.8, ~ekR.8, hki.6 )] )
    case Resp_1
    solve( KU((#vf.9, 0), mac(z.8,
                              sign(<'2', $I.8, $R.8, hki.6, 'g'^~ekR.8>, ~ltkI.8))) )
      case Init_2_case_1
      solve( (#k.5, 0)[!KU( f_.11, KDF('g'^(~ekR.76*~ekI.77))
                       )] /* may loop */ )
        case Sessionkey_Reveal_case_1
        solve( KU((#vf.45, 0), mac('g'^(~ekR.76*~ekI.77),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.76, 'g'^~ekI.77>, ~ltkR.44))) )
          case Resp_1
          solve( KU((#vf.90, 0), mac('g'^(~ekR.76*~ekI.77),
                                     sign(<'1', $I.87, $R.87, 'g'^x.104, 'g'^~tid.87>, ~ltkR.89))) )
            case Resp_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case cmac
            solve( (#vr.144, 0)[!KU( f_.147, 'g'^(~ekR.76*~ekI.77)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.173, 1)[!KU( f_.175, ~ekR.185 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.179, 1)[!KU( f_.181, ~ekI.186 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.153, 1), ~ekR.76) )
            qed
          qed
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekR.76*~ekI.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.138, 1)[!KU( f_.140, ~ekR.150 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.144, 1)[!KU( f_.146, ~ekI.151 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekR.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_2
        solve( KU((#vf.45, 0), mac('g'^(~ekR.76*~ekI.77),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.76, 'g'^~ekI.77>, ~ltkR.44))) )
          case Resp_1
          solve( KU((#vf.90, 0), mac('g'^(~ekR.76*~ekI.77),
                                     sign(<'1', $I.87, $R.87, 'g'^x.104, 'g'^~tid.87>, ~ltkR.89))) )
            case Resp_1
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.144, 0)[!KU( f_.147, 'g'^(~ekR.76*~ekI.77)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.173, 1)[!KU( f_.175, ~ekR.185 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.179, 1)[!KU( f_.181, ~ekI.186 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.153, 1), ~ekR.76) )
            qed
          qed
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekR.76*~ekI.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.138, 1)[!KU( f_.140, ~ekR.150 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.144, 1)[!KU( f_.146, ~ekI.151 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekR.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_3
        solve( KU((#vf.45, 0), mac('g'^(~ekR.76*~ekI.77),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.76, 'g'^~ekI.77>, ~ltkR.44))) )
          case Resp_1
          solve( KU((#vf.90, 0), mac('g'^(~ekR.76*~ekI.77),
                                     sign(<'2', $I.87, $R.87, 'g'^x.104, 'g'^~tid.87>, ~ltkI.89))) )
            case Init_2_case_1
            solve( splitEqs(1) )
              case split
              by contradiction // from formulas
            qed
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.144, 0)[!KU( f_.147, 'g'^(~ekR.76*~ekI.77)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.173, 1)[!KU( f_.175, ~ekR.185 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.179, 1)[!KU( f_.181, ~ekI.186 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.153, 1), ~ekR.76) )
            qed
          qed
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekR.76*~ekI.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.138, 1)[!KU( f_.140, ~ekR.150 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.144, 1)[!KU( f_.146, ~ekI.151 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekR.76) )
          qed
        qed
      next
        case Sessionkey_Reveal_case_4
        solve( KU((#vf.45, 0), mac('g'^(~ekR.76*~ekI.77),
                                   sign(<'1', $I.8, $R.8, 'g'^~ekR.76, 'g'^~ekI.77>, ~ltkR.44))) )
          case Resp_1
          solve( KU((#vf.90, 0), mac('g'^(~ekR.76*~ekI.77),
                                     sign(<'2', $I.87, $R.87, 'g'^x.104, 'g'^~tid.87>, ~ltkI.89))) )
            case Init_2_case_1
            by solve( splitEqs(1) )
          next
            case Init_2_case_2
            by solve( splitEqs(1) )
          next
            case cmac
            solve( (#vr.144, 0)[!KU( f_.147, 'g'^(~ekR.76*~ekI.77)
                                )] /* may loop */ )
              case Init_1
              by solve( (#vr.173, 1)[!KU( f_.175, ~ekR.185 )] /* may loop */ )
            next
              case Resp_1
              by solve( (#vr.179, 1)[!KU( f_.181, ~ekI.186 )] /* may loop */ )
            next
              case cexp
              by solve( KU((#vr.153, 1), ~ekR.76) )
            qed
          qed
        next
          case cmac
          solve( (#vr.109, 0)[!KU( f_.112, 'g'^(~ekR.76*~ekI.77)
                              )] /* may loop */ )
            case Init_1
            by solve( (#vr.138, 1)[!KU( f_.140, ~ekR.150 )] /* may loop */ )
          next
            case Resp_1
            by solve( (#vr.144, 1)[!KU( f_.146, ~ekI.151 )] /* may loop */ )
          next
            case cexp
            by solve( KU((#vr.118, 1), ~ekR.76) )
          qed
        qed
      next
        case cKDF
        solve( (#vr.81, 0)[!KU( f_.83, 'g'^(~ekR.76*~ekI.77) )] /* may loop */ )
          case Init_1
          by solve( (#vr.108, 1)[!KU( f_.110, ~ekR.120 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.114, 1)[!KU( f_.116, ~ekI.121 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.88, 1), ~ekR.76) )
        qed
      qed
    next
      case Init_2_case_2
      by contradiction // from formulas
    next
      case cmac
      solve( KU((#vf.9, 0), sign(<'2', $I.8, $R.8, hki.6, 'g'^~ekR.8>,
                                 ~ltkI.8)) )
        case Init_2_case_1
        solve( (#vr.36, 0)[!KU( f_.39, 'g'^(~ekR.91*~ekI.92) )] /* may loop */ )
          case Init_1
          by solve( (#vr.117, 1)[!KU( f_.119, ~ekR.129 )] /* may loop */ )
        next
          case Resp_1
          by solve( (#vr.123, 1)[!KU( f_.125, ~ekI.130 )] /* may loop */ )
        next
          case cexp
          by solve( KU((#vr.97, 1), ~ekR.91) )
        qed
      next
        case Init_2_case_2
        by contradiction // from formulas
      next
        case csign
        by solve( (#vr.45, 1)[!KU( f_.49, ~ltkI.8 )] /* may loop */ )
      qed
    qed
  qed
next
  case Register_pk_clone_case_2
  by contradiction // from formulas
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/STS_MAC_fix2.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/STS_MAC_fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 8.125121s
  KI_Perfect_Forward_Secrecy_I (all-traces): verified (45 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): verified (66 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/STS_MAC_fix2.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 8.125121s
  KI_Perfect_Forward_Secrecy_I (all-traces): verified (45 steps)
  KI_Perfect_Forward_Secrecy_R (all-traces): verified (66 steps)

==============================================================================
*/
