theory JKL_TS2_2008_KI_wPFS begin

// Function signature and definition of the equational theory E

builtin: diffie-hellman
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

section{* Jeong, Katz, Lee : TS2 (2008) *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !Ephk( ~ekI ), Out( 'g'^~ekI )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[
  SidI_2( ~ekI, $I, $R, hkI, Y, h(<$I, $R, hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>)
  )
  ]->
   [ !Sessk( ~ekI, h(<$I, $R, hkI, Y, Y^~ekI, 'g'^~lkR^~lkI>) ) ]

  /*
  rule (modulo AC) Init_2:
     [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~x ) ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<$I, $R, hkI, Y, z, 'g'^(~lkI*~x)>) )
    ]->
     [ !Sessk( ~ekI, h(<$I, $R, hkI, Y, z, 'g'^(~lkI*~x)>) ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.31
       Y     = Y.34
       z     = Y.34^~ekI.31
    
    2. ~ekI  = ~ekI.31
       Y     = z.37^inv(~ekI.31)
       z     = z.37
    
    3. ~ekI  = ~ekI.143
       Y     = x.281^x.282
       z     = x.281^(~ekI.143*x.282)
    
    4. ~ekI  = ~ekI.143
       Y     = x.281^inv((~ekI.143*x.282))
       z     = x.281^inv(x.282)
    
    5. ~ekI  = ~ekI.143
       Y     = x.281^(x.282*inv(~ekI.143))
       z     = x.281^x.282
    
    6. ~ekI  = ~ekI.144
       Y     = x.282^(x.284*inv((~ekI.144*x.283)))
       z     = x.282^(x.284*inv(x.283))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[
  SidR_1( ~ekR, $I, $R, X, 'g'^~ekR,
          h(<$I, $R, X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>)
  )
  ]->
   [
   Out( 'g'^~ekR ), !Ephk( ~ekR ),
   !Sessk( ~ekR, h(<$I, $R, X, 'g'^~ekR, X^~ekR, 'g'^~lkI^~lkR>) )
   ]

  /*
  rule (modulo AC) Resp_1:
     [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~x ) ]
    --[
    SidR_1( ~ekR, $I, $R, X, 'g'^~ekR,
            h(<$I, $R, X, 'g'^~ekR, z, 'g'^(~lkR*~x)>)
    )
    ]->
     [
     Out( 'g'^~ekR ), !Ephk( ~ekR ),
     !Sessk( ~ekR, h(<$I, $R, X, 'g'^~ekR, z, 'g'^(~lkR*~x)>) )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.34
       X     = X.37
       z     = X.37^~ekR.34
    
    2. ~ekR  = ~ekR.34
       X     = z.40^inv(~ekR.34)
       z     = z.40
    
    3. ~ekR  = ~ekR.218
       X     = x.431^x.432
       z     = x.431^(~ekR.218*x.432)
    
    4. ~ekR  = ~ekR.218
       X     = x.431^inv((~ekR.218*x.432))
       z     = x.431^inv(x.432)
    
    5. ~ekR  = ~ekR.218
       X     = x.431^(x.432*inv(~ekR.218))
       z     = x.431^x.432
    
    6. ~ekR  = ~ekR.219
       X     = x.432^(x.434*inv((~ekR.219*x.433)))
       z     = x.432^(x.434*inv(x.433))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

lemma (modulo E) JKL2008_2_initiator_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i3.15.
           (LtkRev( I.3 ) @ #i3.15) ==>
           (Ex #i4.16 tpartner.17 kpartner.18.
             SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16))) &
        (All #i3.19.
          (LtkRev( R.4 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21 kpartner.22.
            SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidR_1( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15.
    (LtkRev( I.3 ) @ #i3.15)
   ==>
    Ex #i4.16 tpartner.17 kpartner.18.
     (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.16)
    &
     T) &
  (All #i3.19.
    (LtkRev( R.4 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21 kpartner.22.
     (SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)
    &
     T)"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.8, $R.8, ~lkI.8, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.11,
                           h(<$I.8, $R.8, 'g'^~ekI.8, hkR.7, z.8, 'g'^(~lkI.8*~x.8)>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.33, 0), 'g'^(~lkI.8*~x.8)) )
        case cexp
        solve( KU((#vr.40, 1), ~lkI.8) )
          case Ltk_reveal
          solve( (#i4.65, 2)[!Ltk( $R.8, ~lkR.68 )] )
            case generate_ltk
            solve( (#i4.65, 3)[!Pk( $I.8, 'g'^~x.68 )] )
              case generate_ltk
              solve( KU((#vr.40, 1), ~x.8) )
                case Ltk_reveal
                solve( KU((#vr.33, 0), 'g'^(~ekI.86*~ekR.87)) )
                  case Init_1
                  solve( (#vr.123, 1)[!KU( f_.125, ~ekR.135 )] /* may loop */ )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                next
                  case Resp_1
                  solve( (#vr.128, 1)[!KU( f_.130, ~ekI.134 )] /* may loop */ )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                next
                  case cexp
                  solve( KU((#vr.111, 1), ~ekI.86) )
                    case Ephk_reveal
                    by contradiction // from formulas
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_1
        solve( (#vr.49, 1)[!KU( f_.51, ~x.64 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.86, 2)[!Ltk( $R.8, ~lkR.89 )] )
            case generate_ltk
            solve( (#i4.86, 3)[!Pk( $I.8, 'g'^~x.89 )] )
              case generate_ltk
              solve( KU((#vr.33, 0), 'g'^(~ekI.107*~ekR.108)) )
                case Init_1
                solve( (#vr.131, 1)[!KU( f_.133, ~ekR.143 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( (#vr.136, 1)[!KU( f_.138, ~ekI.142 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( KU((#vr.119, 1), ~ekI.107) )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_2
        solve( (#vr.49, 1)[!KU( f_.51, ~lkI.63 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.86, 2)[!Ltk( $R.8, ~lkR.89 )] )
            case generate_ltk
            solve( (#i4.86, 3)[!Pk( $I.8, 'g'^~x.89 )] )
              case generate_ltk
              solve( KU((#vr.33, 0), 'g'^(~ekI.107*~ekR.108)) )
                case Init_1
                solve( (#vr.131, 1)[!KU( f_.133, ~ekR.143 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( (#vr.136, 1)[!KU( f_.138, ~ekI.142 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( KU((#vr.119, 1), ~ekI.107) )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) JKL2008_2_responder_key:
  all-traces
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> (F))) &
           (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> (F))) &
          (All #i3.11 #i4.12 tpartner.13 kpartner.14.
            ((SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
             (SesskRev( tpartner.13 ) @ #i4.12)) ==>
            (F))) &
         (All #i3.15.
           (LtkRev( I.3 ) @ #i3.15) ==>
           (Ex #i4.16 tpartner.17.
             SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16))) &
        (All #i3.18.
          (LtkRev( R.4 ) @ #i3.18) ==>
          (Ex #i4.19 tpartner.20.
            SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)))"
/* proof based on the same lemma modulo AC */
/*
guarded formula characterizing all counter-examples:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8 t.9. (EphkRev( t.9 ) @ #i3.8) ==> F) &
  (All #i3.10. (SesskRev( ttest.2 ) @ #i3.10) ==> F) &
  (All #i3.11 #i4.12 tpartner.13 kpartner.14.
    (SidI_2( tpartner.13, I.3, R.4, hkI.6, hkR.7, kpartner.14 ) @ #i3.11) &
    (SesskRev( tpartner.13 ) @ #i4.12)
   ==>
    F) &
  (All #i3.15.
    (LtkRev( I.3 ) @ #i3.15)
   ==>
    Ex #i4.16 tpartner.17.
     (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.16)
    &
     T) &
  (All #i3.18.
    (LtkRev( R.4 ) @ #i3.18)
   ==>
    Ex #i4.19 tpartner.20.
     (SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)
    &
     T)"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.8, ~lkR.8 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.8, 'g'^~x.8 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.12,
                           h(<$I.8, $R.8, hkI.6, 'g'^~ekR.8, z.8, 'g'^(~lkR.8*~x.8)>)
                      )] /* may loop */ )
      case Sessk_reveal_case_1
      by contradiction // from formulas
    next
      case Sessk_reveal_case_2
      by contradiction // from formulas
    next
      case Sessk_reveal_case_3
      by contradiction // from formulas
    next
      case Sessk_reveal_case_4
      by contradiction // from formulas
    next
      case ch
      solve( KU((#vr.28, 0), 'g'^(~lkR.8*~x.8)) )
        case cexp
        solve( KU((#vr.35, 1), ~lkR.8) )
          case Ltk_reveal
          solve( (#i4.60, 1)[!Ltk( $I.8, ~lkI.62 )] )
            case generate_ltk
            solve( KU((#vr.35, 1), ~x.8) )
              case Ltk_reveal
              solve( KU((#vr.28, 0), 'g'^(~ekR.72*~ekI.73)) )
                case Init_1
                solve( (#vr.103, 1)[!KU( f_.105, ~ekR.114 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case Resp_1
                solve( (#vr.108, 1)[!KU( f_.110, ~ekI.115 )] /* may loop */ )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              next
                case cexp
                solve( KU((#vr.91, 1), ~ekR.72) )
                  case Ephk_reveal
                  by contradiction // from formulas
                qed
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_1
        solve( (#vr.44, 1)[!KU( f_.46, ~x.59 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.81, 1)[!Ltk( $I.8, ~lkI.83 )] )
            case generate_ltk
            solve( KU((#vr.28, 0), 'g'^(~ekR.93*~ekI.94)) )
              case Init_1
              solve( (#vr.111, 1)[!KU( f_.113, ~ekR.122 )] /* may loop */ )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case Resp_1
              solve( (#vr.116, 1)[!KU( f_.118, ~ekI.123 )] /* may loop */ )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case cexp
              solve( KU((#vr.99, 1), ~ekR.93) )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      next
        case generate_ltk_case_2
        solve( (#vr.44, 1)[!KU( f_.46, ~lkR.58 )] /* may loop */ )
          case Ltk_reveal
          solve( (#i4.81, 1)[!Ltk( $I.8, ~lkI.83 )] )
            case generate_ltk
            solve( KU((#vr.28, 0), 'g'^(~ekR.93*~ekI.94)) )
              case Init_1
              solve( (#vr.111, 1)[!KU( f_.113, ~ekR.122 )] /* may loop */ )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case Resp_1
              solve( (#vr.116, 1)[!KU( f_.118, ~ekI.123 )] /* may loop */ )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            next
              case cexp
              solve( KU((#vr.99, 1), ~ekR.93) )
                case Ephk_reveal
                by contradiction // from formulas
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/JKL_TS2_2008_KI_wPFS.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/JKL_TS2_2008_KI_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.084884s
  JKL2008_2_initiator_key (all-traces): verified (40 steps)
  JKL2008_2_responder_key (all-traces): verified (37 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/JKL_TS2_2008_KI_wPFS.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 3.084884s
  JKL2008_2_initiator_key (all-traces): verified (40 steps)
  JKL2008_2_responder_key (all-traces): verified (37 steps)

==============================================================================
*/
