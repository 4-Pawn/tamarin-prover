theory UM_eCK_noKCI begin

 builtin: diffie-hellman

section{* Finite Variants of the Intruder Rules *}

 rule (modulo AC) isend:
    [ !KU( f_, x ) ] --[ K( x ) ]-> [ In( x ) ]
 
 rule (modulo AC) fst:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.1 ) ]
 
 rule (modulo AC) snd:
    [ !KD( f_.3, <x.1, x.2> ) ] --> [ !KD( f_.4, x.2 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, x.1 ) ]
   -->
    [ !KD( 'exp', x.3^(x.1*x.4) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^x.3 ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.3) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv(x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^inv((x.3*x.5)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^inv((x.3*x.5)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.3*x.5) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.3)) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, inv((x.4*x.5)) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.5) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.3^x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv(x.4) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv(x.6)) ), !KU( f_.2, inv(x.3) ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv((x.3*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^inv(x.4) ), !KU( f_.2, (x.5*inv(x.6)) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv((x.4*x.6))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.4^(x.5*inv((x.3*x.6))) ), !KU( f_.2, x.3 ) ]
   -->
    [ !KD( 'exp', x.4^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.4*x.6)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.3)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*x.6) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.4)) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^(x.3*x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^x.4 ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.5*inv(x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv(x.7)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv(x.6)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.3*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^inv((x.3*x.6)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv((x.4*x.6)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.4*x.7))) ), !KU( f_.2, (x.3*x.4) ) ]
   -->
    [ !KD( 'exp', x.5^((x.3*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*x.5) ), !KU( f_.2, (x.6*inv((x.5*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.6)*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.3)) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^x.6 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^(x.5*inv(x.4)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^x.3 ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^((x.4*x.6)*inv(x.7)) ), !KU( f_.2, inv((x.3*x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.3*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.6^inv((x.4*x.7)) ), !KU( f_.2, ((x.3*x.4)*inv(x.5)) ) ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.4*inv((x.3*x.6))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.5*inv((x.4*x.6))) ) ]
   -->
    [ !KD( 'exp', x.3^inv(x.6) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.3^(x.4*inv(x.5)) ), !KU( f_.2, (x.6*inv((x.4*x.7))) ) ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv((x.5*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.4)) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*x.7) ) ]
 
 rule (modulo AC) exp:
    [ !KD( 'noexp', x.5^(x.6*inv((x.3*x.7))) ), !KU( f_.2, (x.3*inv(x.4)) ) ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv((x.4*x.7))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^(x.4*inv(x.5)) ),
    !KU( f_.2, ((x.5*x.6)*inv((x.4*x.7))) )
    ]
   -->
    [ !KD( 'exp', x.3^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.5^((x.4*x.6)*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv(x.4)) )
    ]
   -->
    [ !KD( 'exp', x.5^(x.6*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.4*x.7))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.3*inv(x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.3)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv(x.4)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv(x.8)) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.7*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^(x.5*inv((x.3*x.7))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^inv((x.4*x.7)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.3^((x.4*x.5)*inv(x.6)) ),
    !KU( f_.2, ((x.6*x.7)*inv((x.5*x.8))) )
    ]
   -->
    [ !KD( 'exp', x.3^((x.4*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv(x.5)) )
    ]
   -->
    [ !KD( 'exp', x.6^((x.3*x.7)*inv(x.8)) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^(x.6*inv((x.4*x.8))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^(x.3*inv((x.5*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.6^((x.5*x.7)*inv((x.3*x.8))) ),
    !KU( f_.2, (x.3*inv((x.4*x.5))) )
    ]
   -->
    [ !KD( 'exp', x.6^(x.7*inv((x.4*x.8))) ) ]
 
 rule (modulo AC) exp:
    [
    !KD( 'noexp', x.7^((x.6*x.8)*inv((x.4*x.9))) ),
    !KU( f_.2, ((x.3*x.4)*inv((x.5*x.6))) )
    ]
   -->
    [ !KD( 'exp', x.7^((x.3*x.8)*inv((x.5*x.9))) ) ]
 
 rule (modulo AC) inv:
    [ !KD( f_.1, inv(x.2) ) ] --> [ !KD( 'noexp', x.2 ) ]
 
 rule (modulo AC) fst:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', fst(x) ) ]
 
 rule (modulo AC) h:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', h(x) ) ]
 
 rule (modulo AC) pair:
    [ !KU( f_.2, x ), !KU( f_.3, x.1 ) ] --> [ !KU( 'noexp', <x, x.1> ) ]
 
 rule (modulo AC) snd:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', snd(x) ) ]
 
 rule (modulo AC) coerce:
    [ !KD( f_, x ) ] --> [ !KU( f_, x ) ]
 
 rule (modulo AC) pub:
    [ ] --> [ !KU( f_, $x ) ]
 
 rule (modulo AC) fresh:
    [ Fr( ~x ) ] --> [ !KU( f_, ~x ) ]
 
 rule (modulo AC) exp:
    [ !KU( 'noexp', x ), !KU( f_.2, x.1 ) ] --> [ !KU( 'exp', x^x.1 ) ]
 
 rule (modulo AC) inv:
    [ !KU( f_.1, x ) ] --> [ !KU( 'noexp', inv(x) ) ]

section{* The Unified Model (UM) Key-Exchange Protocol *}

rule (modulo E) generate_ltk:
   [ Fr( ~lk ) ] --> [ !Ltk( $A, ~lk ), !Pk( $A, 'g'^~lk ), Out( 'g'^~lk ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ~lkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [ Init_1( ~ekI, $I, $R, ~lkI, 'g'^~ekI ), !EphkI( ~ekI ), Out( 'g'^~ekI )
   ]
  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [ Init_1( ~ekI, $I, $R, ~lkI, hkI ), In( Y ), !Pk( $R, 'g'^~lkR ) ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]->
   [ !SesskOfI( ~ekI, h(<Y^~ekI, 'g'^~lkR^~lkI>) ) ]
  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I.3, $R.4, ~lkI.5, hkI.6 ), In( Y.1 ),
     !Pk( $R.4, 'g'^~x.7 )
     ]
    --[ SidI_2( ~ekI, $I.3, $R.4, hkI.6, Y.1, h(<x.2, 'g'^(~lkI.5*~x.7)>) )
    ]->
     [ !SesskOfI( ~ekI, h(<x.2, 'g'^(~lkI.5*~x.7)>) ) ]
  
    variants (modulo AC)
    1. ~ekI  = ~ekI.25
       Y.1   = Y.26
       x.2   = Y.26^~ekI.25
    
    2. ~ekI  = ~ekI.25
       Y.1   = x.27^inv(~ekI.25)
       x.2   = x.27
    
    3. ~ekI  = ~ekI.26
       Y.1   = x.28^x.29
       x.2   = x.28^(~ekI.26*x.29)
    
    4. ~ekI  = ~ekI.26
       Y.1   = x.28^inv((~ekI.26*x.29))
       x.2   = x.28^inv(x.29)
    
    5. ~ekI  = ~ekI.26
       Y.1   = x.28^(x.29*inv(~ekI.26))
       x.2   = x.28^x.29
    
    6. ~ekI  = ~ekI.27
       Y.1   = x.29^(x.30*inv((~ekI.27*x.31)))
       x.2   = x.29^(x.30*inv(x.31))
  */

rule (modulo E) Resp_1:
   [ In( X ), Fr( ~ekR ), !Ltk( $R, ~lkR ), !Pk( $I, 'g'^~lkI ) ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) ) ]->
   [
   Out( 'g'^~ekR ), !EphkR( ~ekR ),
   !SesskOfR( ~ekR, h(<X^~ekR, 'g'^~lkI^~lkR>) )
   ]
  /*
  rule (modulo AC) Resp_1:
     [ In( X.1 ), Fr( ~ekR ), !Ltk( $R.3, ~lkR.4 ), !Pk( $I.5, 'g'^~x.6 ) ]
    --[
    SidR_1( ~ekR, $I.5, $R.3, X.1, 'g'^~ekR, h(<x.2, 'g'^(~lkR.4*~x.6)>) )
    ]->
     [
     Out( 'g'^~ekR ), !EphkR( ~ekR ),
     !SesskOfR( ~ekR, h(<x.2, 'g'^(~lkR.4*~x.6)>) )
     ]
  
    variants (modulo AC)
    1. ~ekR  = ~ekR.27
       X.1   = X.28
       x.2   = X.28^~ekR.27
    
    2. ~ekR  = ~ekR.27
       X.1   = x.29^inv(~ekR.27)
       x.2   = x.29
    
    3. ~ekR  = ~ekR.28
       X.1   = x.30^x.31
       x.2   = x.30^(~ekR.28*x.31)
    
    4. ~ekR  = ~ekR.28
       X.1   = x.30^inv((~ekR.28*x.31))
       x.2   = x.30^inv(x.31)
    
    5. ~ekR  = ~ekR.28
       X.1   = x.30^(x.31*inv(~ekR.28))
       x.2   = x.30^x.31
    
    6. ~ekR  = ~ekR.29
       X.1   = x.31^(x.32*inv((~ekR.29*x.33)))
       x.2   = x.31^(x.32*inv(x.33))
  */

rule (modulo E) Sessk_revealI:
   [ !SesskOfI( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Sessk_revealR:
   [ !SesskOfR( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealI:
   [ !EphkI( ~ekI ) ] --[ EphkRev( ~ekI ) ]-> [ Out( ~ekI ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_revealR:
   [ !EphkR( ~ekR ) ] --[ EphkRev( ~ekR ) ]-> [ Out( ~ekR ) ]
  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, k ) ] --[ LtkRev( $A ) ]-> [ Out( k ) ]
  /* has exactly the trivial AC variant */

lemma (modulo E) eCK_initiator_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8. (LtkRev( I.3 ) @ #i3.8) ==> (F))) &
           (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
          (All #i3.10 #i4.11 tpartner.12 kpartner.13.
            ((SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
             (SesskRev( tpartner.12 ) @ #i4.11)) ==>
            (F))) &
         (All #i4.14 #i5.15 #i6.16 tpartner.17 kpartner.18.
           (((SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.14) &
             (LtkRev( R.4 ) @ #i5.15)) &
            (EphkRev( tpartner.17 ) @ #i6.16)) ==>
           (F))) &
        (All #i3.19.
          (LtkRev( R.4 ) @ #i3.19) ==>
          (Ex #i4.20 tpartner.21 kpartner.22.
            SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (LtkRev( I.3 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 kpartner.13.
    (SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
    (SesskRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i4.14 #i5.15 #i6.16 tpartner.17 kpartner.18.
    (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.14) &
    (LtkRev( R.4 ) @ #i5.15) &
    (EphkRev( tpartner.17 ) @ #i6.16)
   ==>
    F) &
  (All #i3.19.
    (LtkRev( R.4 ) @ #i3.19)
   ==>
    Ex #i4.20 tpartner.21 kpartner.22.
     (SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidI_2( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8. (LtkRev( I.3 ) @ #i3.8) ==> F) &
   (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
   (All #i3.10 #i4.11 tpartner.12 kpartner.13.
     (SidR_1( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
     (SesskRev( tpartner.12 ) @ #i4.11)
    ==>
     F) &
   (All #i4.14 #i5.15 #i6.16 tpartner.17 kpartner.18.
     (SidR_1( tpartner.17, I.3, R.4, hkI.6, hkR.7, kpartner.18 ) @ #i4.14) &
     (LtkRev( R.4 ) @ #i5.15) &
     (EphkRev( tpartner.17 ) @ #i6.16)
    ==>
     F) &
   (All #i3.19.
     (LtkRev( R.4 ) @ #i3.19)
    ==>
     Ex #i4.20 tpartner.21 kpartner.22.
      (SidR_1( tpartner.21, I.3, R.4, hkI.6, hkR.7, kpartner.22 ) @ #i4.20)
     &
      T)) &
 (All #i1.23 #i2.24 ttest.25 I.26 R.27 k.28 hkI.29 hkR.30.
   (SidI_2( ttest.25, I.26, R.27, hkI.29, hkR.30, k.28 ) @ #i1.23) &
   (K( k.28 ) @ #i2.24)
  ==>
   (Last(#i2.24)) |
   (Last(#i1.23)) |
   (Ex #i3.31. (LtkRev( I.26 ) @ #i3.31) & All. (Last(#i3.31)) ==> F) |
   (Ex #i3.32.
     (SesskRev( ttest.25 ) @ #i3.32)
    &
     All. (Last(#i3.32)) ==> F) |
   (Ex #i3.33 #i4.34 tpartner.35 kpartner.36.
     (SidR_1( tpartner.35, I.26, R.27, hkI.29, hkR.30, kpartner.36
      ) @ #i3.33) &
     (SesskRev( tpartner.35 ) @ #i4.34)
    &
     (All. (Last(#i4.34)) ==> F) & (All. (Last(#i3.33)) ==> F)) |
   (Ex #i4.37 #i5.38 #i6.39 tpartner.40 kpartner.41.
     (SidR_1( tpartner.40, I.26, R.27, hkI.29, hkR.30, kpartner.41
      ) @ #i4.37) &
     (LtkRev( R.27 ) @ #i5.38) &
     (EphkRev( tpartner.40 ) @ #i6.39)
    &
     (All. (Last(#i6.39)) ==> F) &
     (All. (Last(#i5.38)) ==> F) &
     (All. (Last(#i4.37)) ==> F)) |
   (Ex #i3.42.
     (LtkRev( R.27 ) @ #i3.42)
    &
     (All. (Last(#i3.42)) ==> F) &
     (All #i4.43 tpartner.44 kpartner.45.
       (SidR_1( tpartner.44, I.26, R.27, hkI.29, hkR.30, kpartner.45 ) @ #i4.43)
      ==>
       Last(#i4.43))))"
*/
simplify
solve( (#i1, 0)[Init_1( ~ekI.8, $I.11, $R.12, ~lkI.13, hkI.6 )] )
  case Init_1
  solve( (#i1, 2)[!Pk( $R.12, 'g'^~x.15 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18, h(<x.10, 'g'^(~lkI.13*~x.15)>) )] )
      case Sessk_revealI_case_1
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_3
          solve( (#vf.54, 0)[!KU( f_.55, hkR.81^(~ekI.82*inv(~tid.80)) )] )
            case Init_1
            solve( KU((#vr.95, 1), ~tid.106) )
              case Ephk_revealI
              SOLVED (trace found)
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma (modulo E) eCK_responder_key:
  "not(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
        ((((((SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
             (K( k.5 ) @ #i2.1)) &
            (All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> (F))) &
           (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> (F))) &
          (All #i3.10 #i4.11 tpartner.12 kpartner.13.
            ((SidI_2( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
             (SesskRev( tpartner.12 ) @ #i4.11)) ==>
            (F))) &
         (All #i4.14 #i5.15 #i6.16 tpartner.17.
           (((SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.14) &
             (LtkRev( I.3 ) @ #i5.15)) &
            (EphkRev( tpartner.17 ) @ #i6.16)) ==>
           (F))) &
        (All #i3.18.
          (LtkRev( I.3 ) @ #i3.18) ==>
          (Ex #i4.19 tpartner.20.
            SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)))"
/* proof based on the same lemma modulo AC */
/*
doubly-guarded formula characterizing all attacks:
"Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
  (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
  (K( k.5 ) @ #i2.1)
 &
  (All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> F) &
  (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
  (All #i3.10 #i4.11 tpartner.12 kpartner.13.
    (SidI_2( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
    (SesskRev( tpartner.12 ) @ #i4.11)
   ==>
    F) &
  (All #i4.14 #i5.15 #i6.16 tpartner.17.
    (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.14) &
    (LtkRev( I.3 ) @ #i5.15) &
    (EphkRev( tpartner.17 ) @ #i6.16)
   ==>
    F) &
  (All #i3.18.
    (LtkRev( I.3 ) @ #i3.18)
   ==>
    Ex #i4.19 tpartner.20.
     (SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)
    &
     T)"
*/
/*
proof by induction possible over the formula:
"(Ex #i1 #i2.1 ttest.2 I.3 R.4 k.5 hkI.6 hkR.7.
   (SidR_1( ttest.2, I.3, R.4, hkI.6, hkR.7, k.5 ) @ #i1) &
   (K( k.5 ) @ #i2.1)
  &
   (All #i3.8. (LtkRev( R.4 ) @ #i3.8) ==> F) &
   (All #i3.9. (SesskRev( ttest.2 ) @ #i3.9) ==> F) &
   (All #i3.10 #i4.11 tpartner.12 kpartner.13.
     (SidI_2( tpartner.12, I.3, R.4, hkI.6, hkR.7, kpartner.13 ) @ #i3.10) &
     (SesskRev( tpartner.12 ) @ #i4.11)
    ==>
     F) &
   (All #i4.14 #i5.15 #i6.16 tpartner.17.
     (SidI_1( tpartner.17, I.3, R.4, hkI.6 ) @ #i4.14) &
     (LtkRev( I.3 ) @ #i5.15) &
     (EphkRev( tpartner.17 ) @ #i6.16)
    ==>
     F) &
   (All #i3.18.
     (LtkRev( I.3 ) @ #i3.18)
    ==>
     Ex #i4.19 tpartner.20.
      (SidI_1( tpartner.20, I.3, R.4, hkI.6 ) @ #i4.19)
     &
      T)) &
 (All #i1.21 #i2.22 ttest.23 I.24 R.25 k.26 hkI.27 hkR.28.
   (SidR_1( ttest.23, I.24, R.25, hkI.27, hkR.28, k.26 ) @ #i1.21) &
   (K( k.26 ) @ #i2.22)
  ==>
   (Last(#i2.22)) |
   (Last(#i1.21)) |
   (Ex #i3.29. (LtkRev( R.25 ) @ #i3.29) & All. (Last(#i3.29)) ==> F) |
   (Ex #i3.30.
     (SesskRev( ttest.23 ) @ #i3.30)
    &
     All. (Last(#i3.30)) ==> F) |
   (Ex #i3.31 #i4.32 tpartner.33 kpartner.34.
     (SidI_2( tpartner.33, I.24, R.25, hkI.27, hkR.28, kpartner.34
      ) @ #i3.31) &
     (SesskRev( tpartner.33 ) @ #i4.32)
    &
     (All. (Last(#i4.32)) ==> F) & (All. (Last(#i3.31)) ==> F)) |
   (Ex #i4.35 #i5.36 #i6.37 tpartner.38.
     (SidI_1( tpartner.38, I.24, R.25, hkI.27 ) @ #i4.35) &
     (LtkRev( I.24 ) @ #i5.36) &
     (EphkRev( tpartner.38 ) @ #i6.37)
    &
     (All. (Last(#i6.37)) ==> F) &
     (All. (Last(#i5.36)) ==> F) &
     (All. (Last(#i4.35)) ==> F)) |
   (Ex #i3.39.
     (LtkRev( I.24 ) @ #i3.39)
    &
     (All. (Last(#i3.39)) ==> F) &
     (All #i4.40 tpartner.41.
       (SidI_1( tpartner.41, I.24, R.25, hkI.27 ) @ #i4.40)
      ==>
       Last(#i4.40))))"
*/
simplify
solve( (#i1, 2)[!Ltk( $R.11, ~lkR.12 )] )
  case generate_ltk
  solve( (#i1, 3)[!Pk( $I.13, 'g'^~x.14 )] )
    case generate_ltk
    solve( (#i2.1, 0)[!KU( f_.18, h(<x.10, 'g'^(~lkR.12*~x.14)>) )] )
      case Sessk_revealI_case_1
      solve( splitEqs(1) )
        case split_case_1
        solve( splitEqs(1) )
          case split_case_2
          solve( (#vf.45, 0)[!KU( f_.46, hkI.72^(~ekR.73*inv(~tid.71)) )] )
            case Resp_1
            solve( KU((#vr.91, 1), ~tid.106) )
              case Ephk_revealI
              SOLVED (trace found)
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.


analyzing: data/examples/UM_eCK_noKCI.spthy

------------------------------------------------------------------------------
analyzed: data/examples/UM_eCK_noKCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.838061s
  eCK_initiator_key: attack found (9 steps)
  eCK_responder_key: attack found (9 steps)

------------------------------------------------------------------------------

==============================================================================
summary of processed files:

analyzed: data/examples/UM_eCK_noKCI.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 2.838061s
  eCK_initiator_key: attack found (9 steps)
  eCK_responder_key: attack found (9 steps)

==============================================================================
*/
