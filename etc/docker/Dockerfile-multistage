FROM ocaml/opam as build-ocaml
# MAINTAINER Protocol Platform <protocolplatform@protonmail.com>
USER root
RUN opam install -y ocamlfind ocamlbuild

WORKDIR /opt/build
ENV RES="etc/docker/res"
ENV PROVERIF_URL="https://prosecco.gforge.inria.fr/personal/bblanche/proverif/proverif2.02pl1.tar.gz"
ENV PROVERIF_DIR_NAME="proverif2.02pl1"
ENV GSVERIF_TGZ="gsverif2.0.zip"
ENV GSVERIF_DIR_NAME="gsverif"
ENV DEEPSEC_URL="https://github.com/DeepSec-prover/deepsec.git"
ENV DEEPSEC_DIR_NAME="deepsec"
# Install ProVerif from source
# Note: need to install ProVerif before switching to 4.05.0, because that one doesn't have ocamlyacc
RUN curl -SL ${PROVERIF_URL} | tar -xzC .

# Note: installation will fail because of lacking libgtk, but still produce the binary :D
# Note: need to run bash so the .bashrc sets the environment variables and ocamlfind can be found
# CharlieNote: running the eval is the minimal lightweight setup to build
RUN eval `opam config env` && cd ${PROVERIF_DIR_NAME} && ./build; test -x proverif

RUN git clone --depth 1 ${DEEPSEC_URL} ${DEEPSEC_DIR_NAME} && cd ${DEEPSEC_DIR_NAME} &&  eval `opam config env` && make

# Install our custom gsverif
COPY ${RES}/${GSVERIF_TGZ} ${GSVERIF_DIR_NAME}/
RUN cd ${GSVERIF_DIR_NAME} && unzip ${GSVERIF_TGZ} && rm ${GSVERIF_TGZ}
RUN cd ${GSVERIF_DIR_NAME} &&  eval `opam config env` && ./build

FROM fpco/stack-build:lts-16.12 as deps-tamarin
RUN mkdir /opt/build
WORKDIR /opt/build
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    #general stuff
    curl \
    # gnupg \
    m4 \
    && rm -rf /var/lib/apt/lists/*

COPY stack.yaml stack.yaml.lock tamarin-prover.cabal /opt/build/
RUN mkdir lib lib/export lib/theory lib/sapic lib/tools lib/term 
COPY lib/sapic/tamarin-prover-sapic.cabal lib/sapic/
COPY lib/term/tamarin-prover-term.cabal lib/term/
COPY lib/theory/tamarin-prover-theory.cabal lib/theory/
COPY lib/utils/tamarin-prover-utils.cabal lib/utils/
COPY lib/export/tamarin-prover-export.cabal lib/export/
RUN stack build --system-ghc --dependencies-only --ghc-options="+RTS -M600M" -j1

FROM fpco/stack-build:lts-16.12 as build-tamarin
# Copy compiled dependencies from previous stage
COPY --from=deps-tamarin /root/.stack /root/.stack
COPY . /opt/build/
WORKDIR /opt/build
RUN stack build --system-ghc
RUN mv "$(stack path --local-install-root --system-ghc)/bin" /opt/build/bin

# Base image for stack build so compiled artifact from previous
# stage should run
FROM debian:buster-slim as protocolplatform
RUN mkdir -p /opt/protocolplatform
WORKDIR /opt/protocolplatform

RUN apt-get update && apt-get install -y --no-install-recommends \
    #general stuff
    graphviz \
    maude \
    && rm -rf /var/lib/apt/lists/*

# Install third party tools
COPY --from=build-ocaml /opt/${PROVERIF_DIR_NAME} /opt/
COPY --from=build-ocaml /opt/${GSVERIF_DIR_NAME} /opt/
COPY --from=build-ocaml /opt/${DEEPSEC_DIR_NAME} /opt/

# Install built app 
COPY --from=build /opt/build/bin .

# Install new maude maude version 
ENV PRELUDE_MAUDE="res/prelude.maude"
COPY ${MAUDE} /usr/local/bin/
COPY ${PRELUDE_MAUDE} /usr/local/bin/

COPY res/proverif-tamarin /usr/local/bin/
COPY res/progsverif-tamarin /usr/local/bin/
COPY res/deepsec-tamarin /usr/local/bin/

EXPOSE 3001
ENV PATH="/usr/local/bin:${PATH}"
CMD ["/bin/bash"]

#TODOS (above to keep cache) ... 
