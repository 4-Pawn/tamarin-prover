{-# LANGUAGE RecordWildCards #-}
-- Copyright   : (c) 2019 Robert Künnemann
-- License     : GPL v3 (see LICENSE)
--
-- Maintainer  : Robert Künnemann <robert@kunnemann.de>
-- Portability : GHC only
--
-- TODO
module Sapic.Facts (
     TransAction(..)
   , TransFact(..)
   , AnnotatedRule(..)
   , StateKind(..)
   , factToFact
   , actionToFact
   , toRule
) where
-- import Data.Maybe
-- import Data.Foldable
-- import Control.Exception
-- import Control.Monad.Fresh
-- import Control.Monad.Catch
-- import Sapic.Exceptions
import Theory
import Theory.Sapic
import Sapic.Annotation
import Theory.Model.Rule
-- import Theory.Model.Rule
-- import Data.Typeable
-- import Data.Text
import Data.Char
import qualified Data.Set as S
import Data.Color
-- import Control.Monad.Trans.FastFresh

data TransAction =  InitEmpty
  | InitId
  | StopId
  | EventEmpty
  | EventId
  | Predicate LNFact
  | NegPredicate LNFact
  | ProgressFrom Position 
  | ProgressTo Position Position
  | Listen Position LVar 
  | Receive Position SapicTerm
  | Send Position SapicTerm
  | TamarinAct LNFact

data StateKind  = LState | PState | LSemiState | PSemiState

data TransFact = K SapicTerm | Fr LVar | In SapicTerm 
            | Out SapicTerm
            | Message SapicTerm SapicTerm
            | Ack SapicTerm SapicTerm
            | State StateKind Position (S.Set LVar)
            | MessageIDSender Position
            | MessageIDReceiver Position
            | TamarinFact LNFact

data AnnotatedRule ann = AnnotatedRule { 
      processName  :: Maybe String
    , process      :: AnProcess ann
    , position     :: Position
    , prems        :: [TransFact]
    , acts         :: [TransAction]  
    , concs        :: [TransFact]
}

-- data Fact t = Fact
--     { factTag         :: FactTag
--     , factAnnotations :: S.Set FactAnnotation
--     , factTerms       :: [t]
--     }
-- -- | A protocol fact denotes a fact generated by a protocol rule.
-- protoFact :: Multiplicity -> String -> [t] -> Fact t
-- protoFact multi name ts = Fact (ProtoFact multi name (length ts)) S.empty ts

actionToFact :: TransAction -> Fact t
actionToFact InitEmpty = protoFact Linear "Init" []
  -- | InitId
  -- | StopId
  -- | EventEmpty
  -- | EventId
  -- | Predicate LNFact
  -- | NegPredicate LNFact
  -- | ProgressFrom Position 
  -- | ProgressTo Position Position
  -- | Listen Position LVar 
  -- | Receive Position SapicTerm
  -- | Send Position SapicTerm
  -- | TamarinAct LNFact

-- factToFact :: TransFact -> Fact t
factToFact (K t) = protoFact Linear "K" [t]
-- data TransFact = K SapicTerm | Fr LVar | In SapicTerm 
--             | Out SapicTerm
--             | Message SapicTerm SapicTerm
--             | Ack SapicTerm SapicTerm
--             | State StateKind Position (S.Set LVar)
--             | MessageIDSender Position
--             | MessageIDReceiver Position
--             | TamarinFact LNFact

toRule AnnotatedRule{..} = -- this is a Record Wildcard
          Rule (ProtoRuleEInfo (StandRule name) attr) l a r
          where
            name = stripNonAlphanumerical (prettySapicTopLevel process) ++ "_" ++ prettyPosition position
            attr = [RuleColor $ RGB 0.3 0.3 0.3] -- TODO compute color from
            l = map factToFact prems
            a = map actionToFact acts
            r = map factToFact concs

stripNonAlphanumerical = filter (\x -> isLower x || isSpace x || isDigit x )
